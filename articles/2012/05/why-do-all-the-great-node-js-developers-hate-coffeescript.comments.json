[
    {
        "date_created_gmt": "2013-01-25T00:18:49.000Z",
        "user_id": "0",
        "comment_id": "724",
        "parent": "705",
        "status": "approve",
        "content": "Hipster",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-724",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Ryan",
        "author_url": "",
        "author_email": "sdfsdf@ssdsd.net",
        "author_ip": "31.110.109.34",
        "type": ""
    },
    {
        "date_created_gmt": "2013-01-22T10:17:11.000Z",
        "user_id": "342641",
        "comment_id": "722",
        "parent": "720",
        "status": "approve",
        "content": "Ha, nice one... But I'm referring to the language's ability to accomplish a programmatic task, not its syntax.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-722",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "mark",
        "author_url": "http://wmdmark.wordpress.com/",
        "author_email": "wmdmark@gmail.com",
        "author_ip": "71.81.113.33",
        "type": ""
    },
    {
        "date_created_gmt": "2013-01-22T06:33:07.000Z",
        "user_id": "13263954",
        "comment_id": "721",
        "parent": "720",
        "status": "approve",
        "content": "ignore whitespace.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-721",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "kristopolous",
        "author_url": "",
        "author_email": "kristopolous@yahoo.com",
        "author_ip": "75.84.186.87",
        "type": ""
    },
    {
        "date_created_gmt": "2013-01-21T23:49:47.000Z",
        "user_id": "0",
        "comment_id": "720",
        "parent": "556",
        "status": "approve",
        "content": "Sorry but that's a completely bogus claim. I challenge you to name even one thing that JS can do that CS cannot.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-720",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Mark",
        "author_url": "http://gravatar.com/wmdmark",
        "author_email": "wmdmark@gmail.com",
        "author_ip": "68.115.251.182",
        "type": ""
    },
    {
        "date_created_gmt": "2013-01-21T21:27:09.000Z",
        "user_id": "0",
        "comment_id": "719",
        "parent": "0",
        "status": "approve",
        "content": "coffeescript should not be learned and should not be used on any real app. I don't use modules written in coffeescript, they're just overloaded and slow garbage.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-719",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Twich",
        "author_url": "",
        "author_email": "twich@yahoo.es",
        "author_ip": "89.128.156.107",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-31T20:27:18.000Z",
        "user_id": "0",
        "comment_id": "716",
        "parent": "0",
        "status": "approve",
        "content": "It's still important to know the fundamental javascript underlying.\r\nIt should still be the primary conveyance of concepts, I definitely don't recommend 'blind' use of coffeescript\r\n\r\nBut when you need to use coffeescript as part of a framework, or a team. It is a tool that has yielded productivity to traverse this difficult web development landscape.\r\n\r\nIf so hated, then the greater prerogative is to stem jQuery and any sub-culture of javascript (including nodejs), or practice that is averse to writing verbatim, ES only, standard w3c DOM methods\r\n\r\n--&gt;&gt; what I call 'Browser Java'",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-716",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "han",
        "author_url": "http://www.sidlr.com",
        "author_email": "han@sidlr.com",
        "author_ip": "220.255.253.128",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-31T20:03:17.000Z",
        "user_id": "0",
        "comment_id": "715",
        "parent": "709",
        "status": "approve",
        "content": "that's rubbish, this is like saying LOL is a layer of incompatibility with spelling \"Laugh Out Loud\"\r\nit is a matter of coffeescript evolving into being a better shorthand for a needlessly oversyntaxed language\r\n\r\nbtw : nodejs is an awful module system, that also in time, must be overhauled.\r\n\r\nJavascript is a language of convenience not of good design.\r\nIf we are forced to use this because of the Web, let's do it the best way we can and stop the newbies (and careless folk) from executing potentially show-stopping code repeatedly.\r\n\r\nAnd coffeescript does that exactly.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-715",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "han",
        "author_url": "http://www.sidlr.com",
        "author_email": "han@sidlr.com",
        "author_ip": "220.255.253.128",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-03T10:57:15.000Z",
        "user_id": "0",
        "comment_id": "711",
        "parent": "0",
        "status": "approve",
        "content": "Your assertion that because coffee-script is the second most depended on module it is widely popular in the community is incorrect.\r\n\r\nThat number is, roughly, how many coffeescript modules exist in the entire registry. Currently it's 957 out of 18,588 which means that coffeescript makes up about 5% of the node.js community. which means that choosing coffeescript opts you out of about 95% of the potential contributors to your work. \r\n\r\nI don't find that number to be a positive one for coffee-script users..",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-711",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Mikeal (@mikeal)",
        "author_url": "http://twitter.com/mikeal",
        "author_email": "mikeal@twitter.example.com",
        "author_ip": "24.6.19.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-03T10:49:38.000Z",
        "user_id": "0",
        "comment_id": "710",
        "parent": "696",
        "status": "approve",
        "content": "we've had people on that like coffeescript and people that don't. i'd say we are dissmissive more than we \"hate\" it.\r\n\r\nas for it being a \"circlejerk\", it's called NodeUp, we talk about Node, if you want to hear about some other shit go ahead and do your own podcast.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-710",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Mikeal (@mikeal)",
        "author_url": "http://twitter.com/mikeal",
        "author_email": "mikeal@twitter.example.com",
        "author_ip": "24.6.19.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-03T10:48:20.000Z",
        "user_id": "0",
        "comment_id": "709",
        "parent": "0",
        "status": "approve",
        "content": "I won't go in to the kind of detail TJ has but I'll try to express the few issues I have with coffeescript in node.js.\r\n\r\nThe first is that it focuses on prettying up the syntax, which is not a huge problem in JavaScript. Newcomers to any language over-value syntax and under-value semantics. That's natural, because when you're first learning the syntax and the semantics carry the same weight. Syntax is easy to get over because you're always confronted with it, you read it, it's \"on the page\", semantics are in the background and you can never let them leave your brain. Greatly increasing the level of implicit semantics or creating inconsistent semantic (implicit function returns except when they aren't) have a huge weight on the programmer who is keeping all these semantics in their head all the time. JavaScript syntax isn't the prettiest, but it's not bad enough to justify the kind of increase you get when you add a compile target language to the equation.\r\n\r\nMy other issue has less to do with coffeescript and more to do with node.js and Object Oriented Programming. Node.js is best when you treat the language functionally and ignore most of the OO features. Keeping state in closures is your friend, it makes it easier to manage when doing IO, attaching all the state to instantiated objects is going to get messy. Coffeescript has lots of new OO features that you're encouraged to use and, in node.js I don't think that is a good thing.\r\n\r\nNode.js has a wonderful module ecosystem. Lots of small reusable libraries that stay small and simple and the way we enable that is by core defining a very small layer of compatibility to follow (callbacks, streams, module pattern). If you go with alternate IO styles or compile-to languages you're created walls between your library and the rest of the community. \r\n\r\nTo a programmer who likes coffeescript it certainly seems like adding the features of coffeescript would add value to their module but this view is incorrect. When people write in node.js they don't just pick core, which has very little functionality, they pick the entire ecosystem, and adding coffeescript is adding another layer of incompatibility between you and the rest of the ecosystem and the community.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-709",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Mikeal (@mikeal)",
        "author_url": "http://twitter.com/mikeal",
        "author_email": "mikeal@twitter.example.com",
        "author_ip": "24.6.19.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-02T07:14:41.000Z",
        "user_id": "0",
        "comment_id": "708",
        "parent": "653",
        "status": "approve",
        "content": "@tjholowaychuck let me start by saying that I appreciate your work - it's improved our development a lot.\r\n\r\nWith that out of the way, I have to strongly disagree with you here. For me, Coffeescript has been nothing but an absolute pleasure. Let me start with javascript, the bad parts.\r\nEvery time I have to write that = this and then use that, I want to punch someone in the face. typeof var !== \"undefined\" &amp;&amp; var !== null? kick in the balls! There's so much crap in javascript that you have to keep this mental parser running at all times whenever you write or read it. Coffeescript shrinks this parser to the absolute minimum.\r\n\r\nI love the syntax and the beautiful legibility of hashes and things but the biggest difference is the class primitives. Not having to deal with js's hugely verbose inheritance syntax encourages devs to structure their code well. You admit yourself that Coffeescript looks fantastic in small snippets. I only have small snippets of code. We use lots of well organized files, each file has 1 or more classes and each class has instance methods that are small concise fantastically legible pieces of code.\r\n\r\nI agree with you that implicit returns are unneeded most of the time so i end up adding an @ at the end for piece of mind - this is my only real grip with CS so far. I hope this anti CS rhetoric gets turned down because I love it and I need to hire devs to write in it. For the sake of everybody's happiness let's all just get along!",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-708",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Yaniv Tal (@yanivtalmusic)",
        "author_url": "http://twitter.com/yanivtalmusic",
        "author_email": "yanivtalmusic@twitter.example.com",
        "author_ip": "70.116.95.30",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T08:56:21.000Z",
        "user_id": "0",
        "comment_id": "706",
        "parent": "0",
        "status": "approve",
        "content": "The 'most depended on' argument is a straw man because to use coffeescript you don't need to 'depend' on it via your package.json\r\n\r\nI've been listening to NodeUp podcast past episodes recently and there is definitely some coffeescript dislike.\r\n\r\nThe main argument that I think Mikael Rogers makes is that it forks the platform, making it another hurdle to contribute -- consider riak-js and other open sources libraries written in coffeescript.\r\n\r\nPersonally, I think for application code that argument becomes moot and it's all about what becomes more maintainable for __your team__. The fact that style decisions on a team can be reduced because spacing, commas, semicolons, and multiline object literal styles are basically already chosen for you makes for a pleasant team experience.\r\n\r\nPlus, you can hook a coffeescript filewatcher to your editor and get free compile time checking.\r\n\r\nConcise class definition syntax is nice on the frontend where you might work with models/views that need classes.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-706",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "nibblebot (@nibblebot)",
        "author_url": "http://twitter.com/nibblebot",
        "author_email": "nibblebot@twitter.example.com",
        "author_ip": "68.175.111.217",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T07:30:09.000Z",
        "user_id": "0",
        "comment_id": "705",
        "parent": "0",
        "status": "approve",
        "content": "Not that everyone already knew, but you don't need semi-colons or curly braces in JavaScript, either.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-705",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Dustin Diaz",
        "author_url": "http://dustindiaz.com",
        "author_email": "polvero@gmail.com",
        "author_ip": "70.199.72.85",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T03:52:25.000Z",
        "user_id": "0",
        "comment_id": "704",
        "parent": "565",
        "status": "approve",
        "content": "Using a debugger makes you a bad developer? Are you new?",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-704",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Ilia Choly",
        "author_url": "http://www.facebook.com/icholy",
        "author_email": "ilia.choly@gmail.com",
        "author_ip": "68.71.19.210",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T01:22:19.000Z",
        "user_id": "3046554",
        "comment_id": "701",
        "parent": "694",
        "status": "approve",
        "content": "I agree completely. This is the position that I've taken. At first I started rewriting my modules in pure JavaScript to encourage collaboration. Funny thing happened. I wound up being more of a JS lover instead of a CS lover. You're right, we're playing in a JS community, and it would probably be helpful for the CS fans to start learning JavaScript first. But to be fair, I did learn quite a bit JS while writing exclusively in CS as I always had the CS homepage open and saw the translation real-time.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-701",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "JP",
        "author_url": "http://gitpilot.com",
        "author_email": "jprichardson@gmail.com",
        "author_ip": "208.82.105.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T01:19:21.000Z",
        "user_id": "3046554",
        "comment_id": "700",
        "parent": "692",
        "status": "approve",
        "content": "I agree with you. This is the camp (excitement for ES6) that I've fallen into. Although, I think JS is an excellent language once you become familiar with the warts. But, I can't wait for ES6 to make its way into the browsers!",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-700",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "JP",
        "author_url": "http://gitpilot.com",
        "author_email": "jprichardson@gmail.com",
        "author_ip": "208.82.105.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T01:17:34.000Z",
        "user_id": "3046554",
        "comment_id": "699",
        "parent": "691",
        "status": "approve",
        "content": "Sweet, I didn't know about CoffeeCompile. Thanks for sharing that. That's a pain for many devs.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-699",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "JP",
        "author_url": "http://gitpilot.com",
        "author_email": "jprichardson@gmail.com",
        "author_ip": "208.82.105.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T01:16:22.000Z",
        "user_id": "3046554",
        "comment_id": "698",
        "parent": "689",
        "status": "approve",
        "content": "Rises to the level of \"hatred\"? You're right, maybe not. Notice though, that it says \"update\". When I wrote this article, that update didn't exist. \r\n\r\nOveremotional? Hardly. \r\n\r\nI was simply asking a question that piqued my interest at the time. However, I'd bet that some  do actually hate CoffeeScript. I'm sure if you ask TJ, he'd probably tell you flat out that he does. (Nothing wrong with this though).",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-698",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "JP",
        "author_url": "http://gitpilot.com",
        "author_email": "jprichardson@gmail.com",
        "author_ip": "208.82.105.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T01:12:11.000Z",
        "user_id": "3046554",
        "comment_id": "697",
        "parent": "685",
        "status": "approve",
        "content": "I agree 100% in regards to module development. Modules that will be consumed by others should be written in JavaScript, preferably, JavaScript from the start.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-697",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "JP",
        "author_url": "http://gitpilot.com",
        "author_email": "jprichardson@gmail.com",
        "author_ip": "208.82.105.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T00:58:24.000Z",
        "user_id": "0",
        "comment_id": "696",
        "parent": "0",
        "status": "approve",
        "content": "those 'great' node.js developers are simply immature, hating on things on their circlejerk podcast",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-696",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "dude",
        "author_url": "",
        "author_email": "dude@crap.com",
        "author_ip": "24.52.247.163",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T00:39:41.000Z",
        "user_id": "0",
        "comment_id": "695",
        "parent": "556",
        "status": "approve",
        "content": "CoffeeScript allows inline JavaScript which I think makes it a proper superset of functionality. I've only had to use the feature once so far.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-695",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Scott Vachalek (@svachalek)",
        "author_url": "http://twitter.com/svachalek",
        "author_email": "svachalek@twitter.example.com",
        "author_ip": "76.103.212.62",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T00:34:36.000Z",
        "user_id": "0",
        "comment_id": "694",
        "parent": "0",
        "status": "approve",
        "content": "Personally, I would want to understand JavaScript before moving on to some abstraction. The official Node.js documentation is written in JS, etc.. Then, once I am totally capable with JavaScript, there just isn't a great incentive for me to learn another language to code on top of the same environment. I'm very happy with JavaScript. CoffeeScript has become an instant turn-off to me, and I think this sentiment is common in the community. If someone asks for help in the IRC channel, I just can't offer a thing. And usually no one can. I've seen many calls-for-help that fell on deaf ears because few people are willing to learn CoffeeScript for assisting a fraction of the community. Why do I hate CoffeeScript? Because I like helping people. :( This is my personal history, and you may notice that I am totally ignorant of any benefits that CS may provide by way of being more concise, or linguistically harmonious.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-694",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "wltsmrz (@wltsmrz)",
        "author_url": "http://twitter.com/wltsmrz",
        "author_email": "wltsmrz@twitter.example.com",
        "author_ip": "174.131.242.248",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T00:31:23.000Z",
        "user_id": "0",
        "comment_id": "693",
        "parent": "565",
        "status": "approve",
        "content": "it's not about the debugger, it's about the ~act~ of debugging. It's painful. Say you have a loop that's not working quite right (say it breaks early or whatever). Trying to figure out ~what's~ going on is difficult sometimes.\r\n\r\nsaying \"you're probably not that good of a developer\" is jst an ad-homine to hide a real pain spot. This is why I don't use coffeescript.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-693",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "bob",
        "author_url": "",
        "author_email": "effyou@not-telling.gmail.com",
        "author_ip": "173.230.189.93",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T00:24:30.000Z",
        "user_id": "0",
        "comment_id": "692",
        "parent": "0",
        "status": "approve",
        "content": "I'd think they'd all prefer to have a better javascript than just a syntactic sugar that doesn't add anything but hide much, and they are looking forward to getting their wishes.\r\n\r\nIn fact, when running nodejs, they *can* use the next javascript right now, however long it might be for it to reach all browsers.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-692",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Daniel Capo Sobral (@dcsobral)",
        "author_url": "http://twitter.com/dcsobral",
        "author_email": "dcsobral@twitter.example.com",
        "author_ip": "189.27.10.136",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T00:15:23.000Z",
        "user_id": "0",
        "comment_id": "691",
        "parent": "0",
        "status": "approve",
        "content": "I have written a few apps in CoffeeScript. Whenever an error occurs and the server exits, Node reports the line number. This line number is the number in the compiled JavaScript.\r\n\r\nSo I have installed a plugin in Sublime Text 2 called CoffeeCompile. Whenever I need to know where the error is, I just use that plugin, it shows me the result there itself, and I can debug pretty fast...\r\n\r\nAnd most of the times its not errors which I need to handle (at least for right now), it's more like unwanted behavior... which the debugger doesn't report!\r\n\r\nPersonally, I don't feel CS is bad! I know, I'm new to CS and it's flaws, but I like the language, it's easier to write in it, and for me, reading and understanding CS code is easier than JS code. It's mainly because I find it hard to track the flow of the program when there are too many \"});\"... But that's just me, in this point in time, liking CS! Never know, in the future, I may switch back to JS!",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-691",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Arjun Bajajaj",
        "author_url": "http://arjunbajaj.com",
        "author_email": "arjun@headonlabs.com",
        "author_ip": "122.179.178.33",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T00:15:15.000Z",
        "user_id": "0",
        "comment_id": "690",
        "parent": "557",
        "status": "approve",
        "content": "I hope you're kidding.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-690",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Mike Gourney",
        "author_url": "",
        "author_email": "Mike@gmail.com",
        "author_ip": "24.207.14.73",
        "type": ""
    },
    {
        "date_created_gmt": "2012-12-01T00:14:22.000Z",
        "user_id": "0",
        "comment_id": "689",
        "parent": "0",
        "status": "approve",
        "content": "Do you really think your first link of CoffeeScript \"hatred\" rises to that level? Particularly given that the first thing in that article is about how much the author now loves CoffeeScript?\r\n\r\nConsider making technical arguments instead of overemotional ones. Nobody hates CoffeeScript, stop it. This is overly dramatic and silly.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-689",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "KT",
        "author_url": "",
        "author_email": "ktz@sogetthis.com",
        "author_ip": "208.75.169.10",
        "type": ""
    },
    {
        "date_created_gmt": "2012-11-30T23:48:58.000Z",
        "user_id": "0",
        "comment_id": "688",
        "parent": "556",
        "status": "approve",
        "content": "I used to believe that.  As of 1.3, I can't think of a single thing I could do with Javascript that I can't with Coffeescript.  Can you?",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-688",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Elf M. Sternberg",
        "author_url": "http://gravatar.com/elfsternberg",
        "author_email": "elf.sternberg@gmail.com",
        "author_ip": "67.168.108.22",
        "type": ""
    },
    {
        "date_created_gmt": "2012-11-30T23:40:16.000Z",
        "user_id": "0",
        "comment_id": "687",
        "parent": "675",
        "status": "approve",
        "content": "I dont think Lua is bland at all! Maybe syntactically but semantically it's far more beautiful than most",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-687",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "TJ Holowaychuk (@tjholowaychuk)",
        "author_url": "http://twitter.com/tjholowaychuk",
        "author_email": "tjholowaychuk@twitter.example.com",
        "author_ip": "184.66.5.53",
        "type": ""
    },
    {
        "date_created_gmt": "2012-11-06T22:37:35.000Z",
        "user_id": "0",
        "comment_id": "685",
        "parent": "0",
        "status": "approve",
        "content": "Implementation details are very important when coding coffee-script, beware of commas, parens, and anonymous functions. Spacing and newlines also take important notes like the historic setTimeout example. Once you learn the edge cases it can be fast to develop in, and can be very nice if you don't want to care about implementation details. So for application specific logic, business logic, or even some simple data manipulation it can make sense to use CoffeeScript.\r\n\r\nAs a module developer, however, porting code back to Javascript for publishing of libraries leads to complexities. You end up only caring about the compiled source and not the origin sometimes since that is what is running. Debugging is much better than it used to be, thankfully. But often, the use of generated JS in libraries is like having someone use emscripten to get C++ running as JS; the code generation is an extra step, can compile some minor oddities, and requires more effort to debug.\r\n\r\nAlso, people need to be careful about not requiring other parts of the coffee-script toolchain in their libraries, cake for example is picky about our build server. Another interesting issue we have see is memory usage going up and down wildly when using the inline coffee script compilers. Be careful is my take away, use it for personal/localized development, don't use it for things that are meant to be stable in the hands of other people.\r\n\r\nIn summation, it can have it's uses; but it introduces implementation specific edge cases, extra steps, potential oddities (not just in code generation), and even some toolchain debugging fun. I prefer not to use it for those reasons since I am mostly a module author and my applications/services tend to just be REST with some streaming endpoints.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-685",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "bradleymeck",
        "author_url": "http://gravatar.com/bradleymeck",
        "author_email": "bradley.meck@gmail.com",
        "author_ip": "64.134.154.29",
        "type": ""
    },
    {
        "date_created_gmt": "2012-10-07T12:26:58.000Z",
        "user_id": "0",
        "comment_id": "676",
        "parent": "656",
        "status": "approve",
        "content": "Ruby really isn't consistent at all.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-676",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Craig",
        "author_url": "",
        "author_email": "cbgnome@gmail.com",
        "author_ip": "86.136.18.206",
        "type": ""
    },
    {
        "date_created_gmt": "2012-10-07T11:48:07.000Z",
        "user_id": "0",
        "comment_id": "675",
        "parent": "650",
        "status": "approve",
        "content": "The CoffeeScript issue tracker is a total clusterf*ck of edge cases. Designer syntax just isn't worth the pain. Give me Lua any day, the most bland and yet reliable language I've ever used.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-675",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Craig",
        "author_url": "",
        "author_email": "cbgnome@gmail.com",
        "author_ip": "86.136.18.206",
        "type": ""
    },
    {
        "date_created_gmt": "2012-08-28T20:54:51.000Z",
        "user_id": "3046554",
        "comment_id": "660",
        "parent": "653",
        "status": "approve",
        "content": "Subjective indeed.\r\n\r\nOne point that I think we can all agree on and really important to consider, as you said, developers spend more time reading code than writing code. I guess where we differ on opinion is what is more readable or has more clarity.\r\n\r\nI do find it ironic that https://github.com/component/string/blob/master/test/string.js uses should.js which (since you wrote it =p) encourages verbal readability. Conversely, I just prefer a simple assert(someCondition) or T (someCondition). Once again, subjective preferences.\r\n\r\nAnyway, I do appreciate you dropping by to share your comments. I've found a good home in the Node.js community and I'm really enjoying writing JavaScript, so I'm sure we'll cross paths again.\r\n\r\nTake care.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-660",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "JP",
        "author_url": "http://gitpilot.com",
        "author_email": "jprichardson@gmail.com",
        "author_ip": "208.82.105.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-08-28T20:46:45.000Z",
        "user_id": "5922742",
        "comment_id": "659",
        "parent": "656",
        "status": "approve",
        "content": "$ node debug script.js\r\n\r\ndoes a pretty good job. but yeah I mean js is a pretty nice language, people that write bad code will write bad code in any language but I think CS makes that pretty easy and even advocates it with the features it provides. Personally I think Ruby is a terrible language, it's confused and misguided, the grammar is a huge mess (why the hell do they need %w( foo bar baz ) etc), I just consider it the \"clusterfuck\" language, so many work-arounds for classes since they're so inflexible so it becomes very inelegant, they're constantly changing / \"upgrading\" the syntax in various ways so you have a lot of legacy junk as well, the js object model is much nicer, if you get rid of .prototype and constructors at least.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-659",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "tjholowaychuk",
        "author_url": "",
        "author_email": "tj@vision-media.ca",
        "author_ip": "96.50.119.149",
        "type": ""
    },
    {
        "date_created_gmt": "2012-08-28T14:02:14.000Z",
        "user_id": "0",
        "comment_id": "656",
        "parent": "652",
        "status": "approve",
        "content": "Thanks TJ HWC! I've been wondering why you dislike coffeescript for a while.\r\n\r\nThose are some very good points. I very much agree with CS introducing ambiguity. I used to think that it's a matter of getting used to the new \"cleaner\" syntax, but after using it in my work for a while, I agree that huge CS files can get unreadable simply because it is too empty - there's nothing to \"guide you\".\r\n\r\nIn HCI terms, having parens { [ ( ) ] }  isn't necessarily distracting, but can be rather helpful because of the Gestalt principles. ( http://en.wikipedia.org/wiki/Gestalt_psychology )\r\n\r\nI too prefer symbols \"==\"  \"!=\" \"||\"  over CS's verbose counterparts. I agree with OP that the relationship can be \"felt\"\r\n\r\nI still think ruby is an amazing language though (ruby, not rails - never used rails). It's extremely thought-out and consistent. I also think the parenthesislessness suits ruby as it behaves consistently - unlike CS where  \"derp\"  !=  \"derp()\"  while \"derp mario\" == \"derp(mario)\". Ruby also perfectly conforms to the encapsulation principles through *only* having methods available to the users. That combined with skipping parens makes perfect attributes \"disguised\" as methods - which it *always* will be since it's ruby and every rubyist will know.\r\n\r\nAnd then there's blocks. Those are awesome!\r\n\r\nTo sum up, I think I'll move back to programming pure javascript based on what I've read lately &amp; my own experience with big messy CS files. Debugging is a very big thing for me as well as I'm in love with firebugs debugger. ^^\r\n\r\nCan I ask how you debug your server side node.js javascript? :)",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-656",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "LarsQuarky",
        "author_url": "",
        "author_email": "larsquarky@twitter.com",
        "author_ip": "80.202.88.63",
        "type": ""
    },
    {
        "date_created_gmt": "2012-08-27T22:45:59.000Z",
        "user_id": "5922742",
        "comment_id": "655",
        "parent": "653",
        "status": "approve",
        "content": "Oh and implicit parens are really gross too :s not fun to read at all, by the time I left Ruby even most rubyists stopped using them",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-655",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "tjholowaychuk",
        "author_url": "",
        "author_email": "tj@vision-media.ca",
        "author_ip": "184.70.76.178",
        "type": ""
    },
    {
        "date_created_gmt": "2012-08-27T22:42:39.000Z",
        "user_id": "5922742",
        "comment_id": "654",
        "parent": "653",
        "status": "approve",
        "content": "A \"nice language\" is certainly subjective, and I think that's really where coffeescript comes in, it bridges the cap for python / ruby people to start getting more into javascript, whether or not it's a good language. I do agree that you should use whatever tools you like, just from personal experience most of the \"features\" CS provides are actually quite terrible.\r\n\r\nThese opinions obviously adjust with experience over time, for example I used to love Ruby, I used it for a few years and then I began to realize that the language has a lot of features that advocate ambiguity and obscurity, so I started to really hate using it in practice, especially libraries that used some of these more magical features. You can tell people \"oh just ignore those features\", but when you're building a community there's no escaping them.\r\n\r\nI've said it before and I do think coffeescript looks fantastic when you're staring at very small snippets or example code, but that's really where it stops. Large bodies, especially indented several levels are very difficult to parse in your mind, sure it's less to type, but programmers spend most of their time reading (their own, or others) code, not writing. The argument that you'll write much less code is a fallacy, for example I pretty much never type \"function\", this is what editors are for, \"f-&gt;tab\" is fine. People say js function definitions are too verbose, personally I call it clarity, not verbosity, \"function\" and \"return\" stand out and give you immediate feedback. Something like \"-&gt;\" again looks great with small functions, but otherwise is a very weak token and gets lost amongst the others. This argument applies to many of the other features as well, list comprehension, the yaml-like object literals, they look great when used as configuration etc, but when you see them \"in the wild\" in production code they're very ambiguous and difficult to read.\r\n\r\nIt doesn't take a genius to get rid of most tokens in a language, hell Stylus serves as a great example of how far you can take that, but you introduce nothing but ambiguity. It's not all bad though, things like interpolation, multi-line strings and regular expressions are a given. IMHO the languages which deliberately restrict functionality are the elegant ones, Lua, Lisp etc, complexity is easy, simplicity not so much.\r\n\r\nPersonally I think this https://github.com/component/string/blob/master/test/string.js looks much more clear than your coffeescript tests, certainly not any less readable. I had originally started designing Luna to use significant whitespace, drawn in be the allure of small snippets that look nice, but after having seen really gross coffeescript / stylus source I'm going to add braces back, the clarity just can't be beat, if your program looks like a novel you're doing it wrong IMO.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-654",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "tjholowaychuk",
        "author_url": "",
        "author_email": "tj@vision-media.ca",
        "author_ip": "184.70.76.178",
        "type": ""
    },
    {
        "date_created_gmt": "2012-08-27T21:53:20.000Z",
        "user_id": "3046554",
        "comment_id": "653",
        "parent": "652",
        "status": "approve",
        "content": "I'll preface my statements by stating that I've started writing my modules in JavaScript, as I prefer the purist approach (as sorta stated in your Component wiki). Since I wrote this article, I 've come to really like JavaScript. However, I still really like CoffeeScript. But, I digress.\r\n\r\nOK, so I understand the ambiguous nature of implicit returns. But, if something is \"stolen\", \"inspired\", \"copied\"... whatever... does it really make it any less valuable? It seems to me that CoffeeScript took some good parts from Ruby and Python to blend into a nice language. My favorites being whitespace for declarative markup and optional parenthesis. What else does the author state? The debugging argument is a joke. I completely agree with you and the article on verbal readability does not necessarily imply that the code will be more readable, the author gives examples showing this.\r\n\r\nWhen it comes down to it, and I didn't consider this before actually writing a lot of JavaScript myself, but it could be said that JavaScript is good enough to get the job done, and it's native, so why not? I just still can't shake the idea that some actually hate it and make fun of those who use it. That just seems silly - in less it's in jest, than I'm all for that =)\r\n\r\nOk, now for your opinion... is this not very readable? https://github.com/jprichardson/string.js/blob/master/test/string.test.coffee (As an aside, I'm converting it all to JS soon, but I'm still interested in your opinion on the readability aspect of this CoffeeScript snippet).",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-653",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "JP",
        "author_url": "http://gitpilot.com",
        "author_email": "jprichardson@gmail.com",
        "author_ip": "208.82.105.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-08-27T21:30:39.000Z",
        "user_id": "5922742",
        "comment_id": "652",
        "parent": "0",
        "status": "approve",
        "content": "That article you mentioned (http://ryanflorence.com/2011/case-against-coffeescript/) describes it quite well. Implicit returns are atrocious, everything as an expression is stolen from ruby, most of the features are stolen from ruby, like the author of that article states, verbal readability does absolutely not equate to comprehension (look at applescript...). I still do prefer significant whitespace for declarative things like markup, however for logic (even large bodies of logic in stylus) I find it very difficult to read.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-652",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "tjholowaychuk",
        "author_url": "",
        "author_email": "tj@vision-media.ca",
        "author_ip": "184.70.76.178",
        "type": ""
    },
    {
        "date_created_gmt": "2012-08-27T21:25:32.000Z",
        "user_id": "5922742",
        "comment_id": "651",
        "parent": "0",
        "status": "approve",
        "content": "Plus keep in mind nothing is \"like coffeescript\", coffeescript is like python and others, there's not a single unique or inventive thing about coffeescript, quite the opposite really. I think it's a very poorly designed \"language\".",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-651",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "tjholowaychuk",
        "author_url": "",
        "author_email": "tj@vision-media.ca",
        "author_ip": "184.70.76.178",
        "type": ""
    },
    {
        "date_created_gmt": "2012-08-27T21:23:18.000Z",
        "user_id": "0",
        "comment_id": "650",
        "parent": "0",
        "status": "approve",
        "content": "Honestly some of those choices I made with Stylus turned out to be far too ambiguous and terrible, much like Coffeescript is ambiguous and terrible.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-650",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "tjholowaychuk",
        "author_url": "http://gravatar.com/tjholowaychuk",
        "author_email": "tj@vision-media.ca",
        "author_ip": "184.70.76.178",
        "type": ""
    },
    {
        "date_created_gmt": "2012-05-26T05:31:27.000Z",
        "user_id": "0",
        "comment_id": "565",
        "parent": "0",
        "status": "approve",
        "content": "As usual, coffeescript-doesnt-do-this argument. CoffeeScript does JavaScript through backticks for those mythical cases. Stylus looks like Python. Jade looks like Python. CoffeeScript looks like Python. Schluter complains ad-nauseum about semi-colons. There's no logic to it. My guess is it is not-invented-here syndrome. They didn't invent it, so it must not be any good.\r\n\r\nPlease don't bring up the debugger. If you have to rely on the debugger every time something goes wrong, you're probably not that good of a developer or are  working in a corporate cubible behind your IDE. Most of the time you can look at the error message and you know where you Fd up. And the times that you need a debugger all you have to do is look at the javascript error and filename and you can find the offending line with the same ease as if you had written it in Javascript.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-565",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "mark",
        "author_url": "",
        "author_email": "mark@no-reply.com",
        "author_ip": "184.177.175.227",
        "type": ""
    },
    {
        "date_created_gmt": "2012-05-25T20:04:54.000Z",
        "user_id": "3046554",
        "comment_id": "561",
        "parent": "559",
        "status": "approve",
        "content": "Eric, sure. My title may have been a bit of a poor choice. So feel free to change the title if need be. Just please link back to this page.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-561",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "JP",
        "author_url": "http://gitpilot.com",
        "author_email": "jprichardson@gmail.com",
        "author_ip": "208.82.105.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-05-25T02:55:02.000Z",
        "user_id": "0",
        "comment_id": "559",
        "parent": "0",
        "status": "approve",
        "content": "Would you be interested in getting this republished on DZone.com? - we've got readers interested in debating the costs/benefits of Node.js.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-559",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Eric",
        "author_url": "http://www.dzone.com",
        "author_email": "egenesky@dzone.com",
        "author_ip": "71.65.236.232",
        "type": ""
    },
    {
        "date_created_gmt": "2012-05-19T01:55:18.000Z",
        "user_id": "3046554",
        "comment_id": "557",
        "parent": "556",
        "status": "approve",
        "content": "Hey Brandon, do you have any examples on either of your assertions? I haven't encountered one thing that CoffeeScript couldn't do that JavaScript can. Also, regarding your second point of unnecessary code, I'd argue that minification takes care of that.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-557",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "JP",
        "author_url": "http://gitpilot.com",
        "author_email": "jprichardson@gmail.com",
        "author_ip": "208.82.105.200",
        "type": ""
    },
    {
        "date_created_gmt": "2012-05-19T01:50:41.000Z",
        "user_id": "0",
        "comment_id": "556",
        "parent": "0",
        "status": "approve",
        "content": "This is simply because there are a lot of things that coffee-script doesn't provide which JavaScript does. On top of this, Coffee-Script generates a lot of unneeded code. Returning things that it doesn't need to, etc.",
        "link": "https://procbits.wordpress.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript/#comment-556",
        "post_id": "312",
        "post_title": "Why Do All the Great Node.js Developers Hate&nbsp;CoffeeScript?",
        "author": "Brandon Stoner (@monokrome)",
        "author_url": "http://twitter.com/monokrome",
        "author_email": "monokrome@twitter.example.com",
        "author_ip": "76.23.11.131",
        "type": ""
    }
]