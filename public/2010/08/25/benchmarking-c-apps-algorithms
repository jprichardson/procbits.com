<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Benchmarking C# Apps &amp; Algorithms</title>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="JP Richardson">
    <link href="http://netdna.bootstrapcdn.com/bootswatch/2.1.1/spacelab/bootstrap.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <link href="/css/highlight.css" rel="stylesheet">
  </head>
  <body>
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container-fluid nav-container">
          <nav role="navigation"><a title="" href="http://procbits.com" class="brand">procbits</a>
            <p class="navbar-text pull-left">source code snippets and other random musings about software</p>
            <ul class="nav pull-right">             
              <li><a href="/tags">Tags</a></li>
              <li><a href="/rss.xml">RSS</a></li>
            </ul>
          </nav><a data-toggle="collapse" data-target=".nav-collapse" href="http://procbits.com" class="btn btn-navbar">procbits<span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></a>
        </div>
      </div>
    </div>
    <div class="container-fluid">
      <div id="content" class="clearfix row-fluid">
        <div id="main" role="main" class="span8 clearfix"><h1>Benchmarking C# Apps & Algorithms</h1>

<p>I created a class to help me benchmark my C# algorithms.</p>
<p>Here&#39;s how you can use it:</p>
<div class="highlight"><pre><span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">Start</span><span class="p">(</span><span class="s">&quot;Long running algorithm&quot;</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="m">3</span><span class="p">;</span> <span class="p">++</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">Start</span><span class="p">(</span><span class="s">&quot;Small running algorithm&quot;</span><span class="p">);</span>
    <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">1000</span><span class="p">);</span>
    <span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">StopAndOutput</span><span class="p">();</span>
<span class="p">}</span>
<span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">StopAndOutput</span><span class="p">();</span>
</pre></div>

<p>Output: Small running algorithm: 1000.3712 ms Small running algorithm:
1000.3712 ms Small running algorithm: 1000.3712 ms Long running
algorithm: 3001.1136 ms</p>
<p>You can find my entire C# CommonLib library here:
<a href="http://github.com/jprichardson/CommonLib"><a href="http://github.com/jprichardson/CommonLib">http://github.com/jprichardson/CommonLib</a></a></p>
<p>Here is the relevant class:</p>
<div class="highlight"><pre><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">BenchmarkTimer</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="n">Stack</span><span class="p">&lt;</span><span class="n">BenchmarkData</span><span class="p">&gt;</span> <span class="n">_startStack</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="p">&lt;</span><span class="n">BenchmarkData</span><span class="p">&gt;();</span>

        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">_startStack</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="k">new</span> <span class="n">BenchmarkData</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">(</span><span class="kt">string</span> <span class="n">label</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">var</span> <span class="n">bd</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BenchmarkData</span><span class="p">()</span> <span class="p">{</span> <span class="n">Label</span> <span class="p">=</span> <span class="n">label</span> <span class="p">};</span>
            <span class="n">_startStack</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">bd</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">TimeSpan</span> <span class="nf">Stop</span><span class="p">()</span> <span class="p">{</span>
            <span class="kt">var</span> <span class="n">stop</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">startBD</span> <span class="p">=</span> <span class="n">_startStack</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">stop</span> <span class="p">-</span> <span class="n">startBD</span><span class="p">.</span><span class="n">DateTime</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">StopAndOutput</span><span class="p">()</span> <span class="p">{</span>
            <span class="kt">var</span> <span class="n">stop</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">startBD</span> <span class="p">=</span> <span class="n">_startStack</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">delta</span> <span class="p">=</span> <span class="n">stop</span> <span class="p">-</span> <span class="n">startBD</span><span class="p">.</span><span class="n">DateTime</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">lbl</span> <span class="p">=</span> <span class="s">&quot;{0}: {1} ms&quot;</span><span class="p">;</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="n">lbl</span><span class="p">,</span> <span class="n">startBD</span><span class="p">.</span><span class="n">Label</span><span class="p">,</span> <span class="n">delta</span><span class="p">.</span><span class="n">TotalMilliseconds</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">class</span> <span class="nc">BenchmarkData</span>
        <span class="p">{</span>
            <span class="k">public</span> <span class="n">DateTime</span> <span class="n">DateTime</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">public</span> <span class="kt">string</span> <span class="n">Label</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

            <span class="k">public</span> <span class="nf">BenchmarkData</span><span class="p">(){</span>
                <span class="k">this</span><span class="p">.</span><span class="n">DateTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="n">Label</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</pre></div>

<p>Are you a <a href="http://gitpilot.com">Git</a> user? Let me help you make project
management with Git simple. Checkout <a href="http://gitpilot.com">Gitpilot</a>.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a>
Read my blog entrepreneurship: <a href="http://techneur.com">Techneur</a></p>
<p>-JP</p>


<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>

<p>
  -JP
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2010/08/25/benchmarking-c-apps-algorithms/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    <span id="footer"><br><span style="font-size: 10px;">Proudly built with<a href="https://github.com/skywrite"> Sky</a></span></span></div>
      </div>
    </div>
    <div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
    </div>
  </body>
</html>