<!DOCTYPE html>
<title>Traversal of GWT Tree</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/highlight.css" rel="stylesheet">
<link href="/assets/css/style.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>Traversal of GWT Tree</h1>

<p>Recently, an app I&#39;m working on needed two trees. I just so happened
that I needed to deep copy part of one of the trees to the other tree.
The copied tree will then have checkboxes as nodes instead of just
Strings.</p>
<p>So how would you do this? The first solution that came to mine is
depth-first traversal of the tree. This method could be adapted to any
tree structure in just about any language.</p>
<p>We need a callback function for everytime we &#39;hit&#39; a tree node. Let&#39;s
create an interface called &#39;Action&#39;: Action.java:</p>
<div class="highlight"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Action</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>

<p>Now, we need to create a file called TreeItemUtil.java. This will
include the algorithm. The algorithm is really straightforward, it just
uses a stack for each node and iterates the stack. If a node has
children, they are pushed onto the stack. TreeItemUtil.java:</p>
<div class="highlight"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeItemUtil</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">&gt;</span> <span class="nf">fetchChildren</span><span class="o">(</span><span class="n">TreeItem</span> <span class="n">ti</span><span class="o">){</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ti</span><span class="o">.</span><span class="na">getChildCount</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
            <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ti</span><span class="o">.</span><span class="na">getChild</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">children</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">traverseDfs</span><span class="o">(</span><span class="n">TreeItem</span> <span class="n">root</span><span class="o">,</span> <span class="n">Action</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">&gt;</span> <span class="n">onNode</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">onNode</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Must pass an action.&quot;</span><span class="o">);</span>

        <span class="n">Stack</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">&gt;();</span>
        <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>

        <span class="k">while</span> <span class="o">(!</span><span class="n">children</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">TreeItem</span> <span class="n">current</span> <span class="o">=</span> <span class="n">children</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="n">onNode</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">current</span><span class="o">);</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">&gt;</span> <span class="n">currentChildren</span> <span class="o">=</span> <span class="n">fetchChildren</span><span class="o">(</span><span class="n">current</span><span class="o">);</span>
            <span class="n">children</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">currentChildren</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>

<p>Here is our TreeItemUtilTest.java that uses Mockito:</p>
<div class="highlight"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testTraverseDfs</span><span class="o">(){</span>
        <span class="kd">final</span> <span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>

        <span class="n">TreeItem</span> <span class="n">a</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">b</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">c</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">d</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;d&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">e</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;e&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">f</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;f&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">g</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;g&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">h</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;h&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">i</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;i&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">j</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;j&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">k</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;k&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">l</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;l&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">m</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;m&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">n</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;n&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">o</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;o&quot;</span><span class="o">);</span>
        <span class="n">TreeItem</span> <span class="n">p</span> <span class="o">=</span> <span class="n">createMockedTI</span><span class="o">(</span><span class="s">&quot;p&quot;</span><span class="o">);</span>

        <span class="n">addMockedChildren</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">o</span><span class="o">);</span>
        <span class="n">addMockedChildren</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
        <span class="n">addMockedChildren</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">p</span><span class="o">);</span>
        <span class="n">addMockedChildren</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">);</span>
        <span class="n">addMockedChildren</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span>
        <span class="n">addMockedChildren</span><span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="n">addMockedChildren</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">k</span><span class="o">,</span> <span class="n">l</span><span class="o">);</span>
        <span class="n">addMockedChildren</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">f</span><span class="o">,</span> <span class="n">g</span><span class="o">);</span>
        <span class="n">addMockedChildren</span><span class="o">(</span><span class="n">g</span><span class="o">,</span> <span class="n">h</span><span class="o">);</span>

        <span class="n">TreeItemUtil</span><span class="o">.</span><span class="na">traverseDfs</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="k">new</span> <span class="n">Action</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">&gt;(){</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="n">TreeItem</span> <span class="n">current</span><span class="o">){</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">});</span>

        <span class="c1">//I was assuming it would be leftmost child first, if so, it would be in alphabetical order</span>
        <span class="c1">//but it starts with rightmost node first.</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;aopnbimjlkcdeghf&quot;</span><span class="o">,</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">TreeItem</span> <span class="nf">createMockedTI</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">){</span>
        <span class="n">TreeItem</span> <span class="n">ti</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">TreeItem</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">when</span><span class="o">(</span><span class="n">ti</span><span class="o">.</span><span class="na">getText</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ti</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addMockedChildren</span><span class="o">(</span><span class="n">TreeItem</span> <span class="n">parent</span><span class="o">,</span> <span class="n">TreeItem</span><span class="o">...</span> <span class="n">children</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">children</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">x</span><span class="o">){</span>
            <span class="n">when</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">getChild</span><span class="o">(</span><span class="n">x</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">children</span><span class="o">[</span><span class="n">x</span><span class="o">]);</span>
            <span class="n">when</span><span class="o">(</span><span class="n">children</span><span class="o">[</span><span class="n">x</span><span class="o">].</span><span class="na">getParentItem</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">parent</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">when</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">getChildCount</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">children</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="o">}</span>
</pre></div>

<p>Now for the actual algorithm that clones the TreeItem into a TreeItem
with checkboxes:</p>
<div class="highlight"><pre><span class="kd">private</span> <span class="n">TreeItem</span> <span class="nf">cloneTreeItemsWithCheckboxes</span><span class="o">(</span><span class="n">TreeItem</span> <span class="n">root</span><span class="o">){</span>
        <span class="kd">final</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">,</span> <span class="n">TreeItem</span><span class="o">&gt;</span> <span class="n">oldNew</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">,</span> <span class="n">TreeItem</span><span class="o">&gt;();</span>

        <span class="n">TreeItemUtil</span><span class="o">.</span><span class="na">traverseDfs</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="k">new</span> <span class="n">Action</span><span class="o">&lt;</span><span class="n">TreeItem</span><span class="o">&gt;(){</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="n">TreeItem</span> <span class="n">current</span><span class="o">){</span>
                <span class="n">TreeItem</span> <span class="n">newTi</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeItem</span><span class="o">(</span><span class="k">new</span> <span class="n">CheckBox</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">getText</span><span class="o">()));</span>
                <span class="n">newTi</span><span class="o">.</span><span class="na">setUserObject</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">getUserObject</span><span class="o">());</span>
                <span class="n">oldNew</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">current</span><span class="o">,</span> <span class="n">newTi</span><span class="o">);</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">getParentItem</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">oldNew</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">getParentItem</span><span class="o">())){</span>
                    <span class="n">TreeItem</span> <span class="n">newParent</span> <span class="o">=</span> <span class="n">oldNew</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">getParentItem</span><span class="o">());</span>
                    <span class="n">newParent</span><span class="o">.</span><span class="na">addItem</span><span class="o">(</span><span class="n">newTi</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>

        <span class="k">return</span> <span class="n">oldNew</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
    <span class="o">}</span>
</pre></div>



<!--<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>-->

<p>
If you made it this far, you should <a href="http://twitter.com/jprichardson">follow me on Twitter</a>.
</p>

<p>
  -JP
</p>

<p style="border: 1px solid #ccc; background-color: #f8f8f8; padding: 3px;">
Want to test-drive Bitcoin without any risk? Check out my 
  <a href="https://play.google.com/store/apps/details?id=com.coinbolt.bitcoin">
    bitcoin wallet Coinbolt</a>. It includes test coins for free.
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2010/08/09/traversal-of-gwt-tree/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>