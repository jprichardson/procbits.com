<!DOCTYPE html>
<title>LinkedList Always Slower than a List in C#?</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/style.css" rel="stylesheet">
<link href="/assets/css/highlight.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>LinkedList Always Slower than a List in C#?</h1>

<p>I started using some LinkedList&#39;s instead of Lists in some of my C#
algorithms hoping to speed them up. However, I noticed that they just
felt slower. Like any good developer, I figured that I should do due
diligence and verify my feelings. So I decided to benchmark some simple
loops. You can find the benchmark class
<a href="http://procbits.com/2010/08/25/benchmarking-c-apps-algorithms/">here</a>.</p>
<p>I thought that populating the collections with some random integers
should be sufficient. I ran this code in Debug mode to avoid any
compiler optimizations. Here is the code that I used:</p>
<div class="highlight"><pre><span class="kt">var</span> <span class="n">rand</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">(</span><span class="n">Environment</span><span class="p">.</span><span class="n">TickCount</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">ll</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
<span class="kt">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
<span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">20000000</span><span class="p">;</span>

<span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">Start</span><span class="p">(</span><span class="s">&quot;Linked List Insert&quot;</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="p">++</span><span class="n">x</span><span class="p">)</span>
    <span class="n">ll</span><span class="p">.</span><span class="n">AddFirst</span><span class="p">(</span><span class="n">rand</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">));</span>
<span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">StopAndOutput</span><span class="p">();</span>

<span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">Start</span><span class="p">(</span><span class="s">&quot;List Insert&quot;</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="p">++</span><span class="n">x</span><span class="p">)</span>
    <span class="n">list</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">rand</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">));</span>
<span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">StopAndOutput</span><span class="p">();</span>

<span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
<span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">Start</span><span class="p">(</span><span class="s">&quot;Linked List Iterate&quot;</span><span class="p">);</span>
<span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="k">in</span> <span class="n">ll</span><span class="p">)</span>
    <span class="p">++</span><span class="n">y</span><span class="p">;</span> <span class="c1">//some atomic operation;</span>
<span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">StopAndOutput</span><span class="p">();</span>

<span class="kt">int</span> <span class="n">z</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
<span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">Start</span><span class="p">(</span><span class="s">&quot;List Iterate&quot;</span><span class="p">);</span>
<span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span>
    <span class="p">++</span><span class="n">z</span><span class="p">;</span> <span class="c1">//some atomic operation;</span>
<span class="n">BenchmarkTimer</span><span class="p">.</span><span class="n">StopAndOutput</span><span class="p">();</span>
</pre></div>

<p>Here is the output:</p>
<blockquote>
<p>Linked List Insert: 8959.808 ms List Insert: 845.856 ms Linked List
Iterate: 203.632 ms List Iterate: 125.312 ms</p>
</blockquote>
<p>This result baffled me. A Linked List insert should be O(1) whereas as
List Insert is Î˜(1), O(n) (because of copy) if it needs to be resized.
Both list iterations should be O(1) because of the enumerator. I looked
at the disassembled output and it doesn&#39;t shed much light on the
situation.</p>
<p>Anyone else have any thoughts on why this is? Did I miss something
glaringly obvious?</p>
<p>Are you a <a href="http://gitpilot.com">Git</a> user? Let me help you make project
management with Git simple. Checkout <a href="http://gitpilot.com">Gitpilot</a>.</p>
<p>Read me blog on entrepreneurship: <a href="http://techneur.com">Techneur</a> Follow
me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a></p>
<p>-JP</p>


<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>

<p>
  -JP
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2010/09/10/linkedlist-always-slower-than-a-list-in-c/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>