<!DOCTYPE html>
<title>Using LINQ with CSV Files</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/style.css" rel="stylesheet">
<link href="/assets/css/highlight.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>Using LINQ with CSV Files</h1>

<p>In my <a href="http://procbits.com/2010/10/07/convert-a-csv-to-xml-using-c/">last
post</a>, I
wrote how you can convert a CSV to XML. I stated that the reason that
you would do this is so that you can use LINQ on CSV files.</p>
<p>Using my CsvToXml class you can easily use LINQ on CSV. You can see the
<a href="http://github.com/jprichardson/CommonLib/blob/master/CommonLib/Data/Csv/CsvToXml.cs">source for
CsvToXml</a>
in my C# CommonLib library.</p>
<p>Let&#39;s assume your CSV file looks like the following:
<code>&#39;Product&#39;,&#39;Price&#39;,&#39;DateStocked&#39; &#39;Pepsi&#39;,&#39;4.50&#39;,&#39;2010-05-04&#39; &#39;Coke&#39;,&#39;3.00&#39;,&#39;2010-09-22&#39; &#39;Cheetos&#39;,&#39;7.25&#39;,&#39;2009-01-13&#39;</code></p>
<p>You can then convert like so:</p>
<div class="highlight"><pre><span class="kt">var</span> <span class="n">csv2xml</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CsvToXml</span><span class="p">(</span><span class="s">&quot;mycsvfile.csv&quot;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
<span class="n">csv2xml</span><span class="p">.</span><span class="n">TextQualifier</span> <span class="p">=</span> <span class="sc">&#39;\&#39;&#39;</span><span class="p">;</span>
<span class="n">csv2xml</span><span class="p">.</span><span class="n">Convert</span><span class="p">();</span>
</pre></div>

<p>You can then do cool LINQ queries using the &quot;Records&quot; property of the
CsvToXml class:</p>
<div class="highlight"><pre><span class="kt">var</span> <span class="n">records</span> <span class="p">=</span> <span class="k">from</span> <span class="n">rec</span> <span class="k">in</span> <span class="n">csv2xml</span><span class="p">.</span><span class="n">Records</span>
            <span class="k">where</span> <span class="p">(</span><span class="kt">decimal</span><span class="p">)</span><span class="n">rec</span><span class="p">.</span><span class="n">Element</span><span class="p">(</span><span class="s">&quot;Price&quot;</span><span class="p">)</span> <span class="p">&gt;</span> <span class="m">3.5</span><span class="n">m</span>
            <span class="k">orderby</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">rec</span><span class="p">.</span><span class="n">Element</span><span class="p">(</span><span class="s">&quot;Product&quot;</span><span class="p">)</span>
            <span class="k">select</span> <span class="n">rec</span><span class="p">;</span>
</pre></div>

<p>or use LINQ like...</p>
<div class="highlight"><pre><span class="kt">var</span> <span class="n">records</span> <span class="p">=</span> <span class="k">from</span> <span class="n">rec</span> <span class="k">in</span> <span class="n">csv2xml</span><span class="p">.</span><span class="n">Records</span>
            <span class="k">where</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToDateTime</span><span class="p">((</span><span class="kt">string</span><span class="p">)</span><span class="n">rec</span><span class="p">.</span><span class="n">Element</span><span class="p">(</span><span class="s">&quot;DateStocked&quot;</span><span class="p">))</span> <span class="p">&gt;</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">2010</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
            <span class="k">orderby</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">rec</span><span class="p">.</span><span class="n">Element</span><span class="p">(</span><span class="s">&quot;Product&quot;</span><span class="p">)</span>
            <span class="k">select</span> <span class="n">rec</span><span class="p">;</span>
</pre></div>

<p>Then to access the data of the returned &quot;records&quot; object you can do
this:</p>
<div class="highlight"><pre><span class="kt">var</span> <span class="n">myrec</span> <span class="p">=</span> <span class="n">records</span><span class="p">.</span><span class="n">ElementAt</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">firstProduct</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">myrec</span><span class="p">.</span><span class="n">Element</span><span class="p">(</span><span class="s">&quot;Product&quot;</span><span class="p">);</span>
</pre></div>

<p>Cool, huh? But we can do better. It&#39;s annoying to cast your objects all
of the time and to call Element(&quot;CSV_COLUMN_NAME&quot;). Why not take
advantage of .NET 4.0 and use its &#39;dynamic&#39; data type? Admittedly, I got
this idea from this article: <a href="http://blogs.msdn.com/b/csharpfaq/archive/2009/10/19/dynamic-in-c-4-0-creating-wrappers-with-dynamicobject.aspx">Creating Wrappers with
DynamicObject</a>.</p>
<p>Now we can use LINQ like this:</p>
<div class="highlight"><pre><span class="kt">var</span> <span class="n">records</span> <span class="p">=</span> <span class="k">from</span> <span class="n">rec</span> <span class="k">in</span> <span class="n">csv2xml</span><span class="p">.</span><span class="n">DynamicRecords</span>
            <span class="k">where</span> <span class="p">(</span><span class="kt">decimal</span><span class="p">)</span><span class="n">rec</span><span class="p">.</span><span class="n">Price</span> <span class="p">&gt;</span> <span class="m">3.5</span><span class="n">m</span>
            <span class="k">orderby</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">rec</span><span class="p">.</span><span class="n">Product</span>
            <span class="k">select</span> <span class="n">rec</span><span class="p">;</span>

<span class="c1">//OR</span>

<span class="n">records</span> <span class="p">=</span> <span class="k">from</span> <span class="n">rec</span> <span class="k">in</span> <span class="n">csv2xml</span><span class="p">.</span><span class="n">DynamicRecords</span>
        <span class="k">where</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToDateTime</span><span class="p">((</span><span class="kt">string</span><span class="p">)</span><span class="n">rec</span><span class="p">.</span><span class="n">DateStocked</span><span class="p">)</span> <span class="p">&gt;</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">2010</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
        <span class="k">orderby</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">rec</span><span class="p">.</span><span class="n">Product</span>
        <span class="k">select</span> <span class="n">rec</span><span class="p">;</span>
</pre></div>

<p>A bit better. Now you don&#39;t have to call &quot;Element&quot; method everytime, you
still have to annoyingly cast. But, in each CSV column, we already know
that the types should be consistent. Let&#39;s define our types up front:</p>
<div class="highlight"><pre><span class="kt">var</span> <span class="n">csv2xml</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CsvToXml</span><span class="p">(</span><span class="s">&quot;mycsvfile.csv&quot;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
<span class="n">csv2xml</span><span class="p">.</span><span class="n">TextQualifier</span> <span class="p">=</span> <span class="sc">&#39;\&#39;&#39;</span><span class="p">;</span>

<span class="n">csv2xml</span><span class="p">.</span><span class="n">ColumnTypes</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Product&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">string</span><span class="p">));</span>
<span class="n">csv2xml</span><span class="p">.</span><span class="n">ColumnTypes</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Price&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">decimal</span><span class="p">));</span>
<span class="n">csv2xml</span><span class="p">.</span><span class="n">ColumnTypes</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;DateStocked&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">DateTime</span><span class="p">));</span>

<span class="n">csv2xml</span><span class="p">.</span><span class="n">Convert</span><span class="p">();</span>
</pre></div>

<p>Now we can use LINQ like this:</p>
<div class="highlight"><pre><span class="n">records</span> <span class="p">=</span> <span class="k">from</span> <span class="n">rec</span> <span class="k">in</span> <span class="n">csv2xml</span><span class="p">.</span><span class="n">DynamicRecords</span>
            <span class="k">where</span> <span class="n">rec</span><span class="p">.</span><span class="n">Price</span> <span class="p">&gt;</span> <span class="m">3.5</span><span class="n">m</span>
            <span class="k">orderby</span> <span class="n">rec</span><span class="p">.</span><span class="n">Product</span>
            <span class="k">select</span> <span class="n">rec</span><span class="p">;</span>

<span class="c1">//OR</span>
<span class="n">records</span> <span class="p">=</span> <span class="k">from</span> <span class="n">rec</span> <span class="k">in</span> <span class="n">csv2xml</span><span class="p">.</span><span class="n">DynamicRecords</span>
            <span class="k">where</span> <span class="n">rec</span><span class="p">.</span><span class="n">DateStocked</span> <span class="p">&gt;</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">2010</span><span class="p">,</span> <span class="m">9</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
            <span class="k">orderby</span> <span class="n">rec</span><span class="p">.</span><span class="n">Product</span>
            <span class="k">select</span> <span class="n">rec</span><span class="p">;</span>
</pre></div>

<p>This is truly clean code. All you need to do is define your types for
each column and you&#39;re set. At this time, the major disadvantage is that
you can&#39;t lazily evaluate your CSV. You must read it entirely into
memory. This class could be modified for lazy evaluation and then you
would be able to use LINQ on large CSV files.</p>
<p>Are you a <a href="http://gitpilot.com">Git</a> user? Let me help you make project
management with Git simple. Checkout <a href="http://gitpilot.com">Gitpilot</a>.</p>
<p>I hope you&#39;ve enjoyed this. You should read my blog on entrepreneurship:
<a href="http://techneur.com">Techneur</a> or follow me on Twitter:
<a href="http://twitter.com/jprichardson">@jprichardson</a>.</p>
<p>-JP</p>


<!--<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>-->

<p>
If you made it this far, you should <a href="http://twitter.com/jprichardson">follow me on Twitter</a>.
</p>

<p>
  -JP
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2010/10/11/using-linq-with-csv-files/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>