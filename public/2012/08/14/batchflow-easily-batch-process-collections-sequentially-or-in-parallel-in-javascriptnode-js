<!DOCTYPE html>
<html lang="en">
  <head>
    <title>BatchFlow: Easily batch process collections sequentially or in parallel in JavaScript/Node.js</title>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="JP">
    <mete name="description" content="">

    <link href="http://netdna.bootstrapcdn.com/bootswatch/2.1.1/spacelab/bootstrap.min.css" rel="stylesheet">
    <link href="/vendor/highlight.js/styles/vs.css" rel="stylesheet">
    <!--<link href="style.css" rel="stylesheet">-->

    <style>
      body {
        padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */
      }
    </style>

    <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

      <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', ]);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
  </head>
  <body>
    
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container-fluid nav-container">
          <nav role="navigation">
            <a class="brand" title="" href="http://procbits.com">procbits</a>
            
            <p class="navbar-text pull-left">
              source code snippets and other random musings about software
            </p>
          </nav>

            <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </a>



        </div>
      </div>
    </div>


    <div class="container-fluid">
      <div id="content" class="clearfix row-fluid">
        <div id="main" class="span8 clearfix" role="main">


<h1>BatchFlow: Easily batch process collections sequentially or in parallel in JavaScript/Node.js</h1>
<h2>Why?</h2>
<p>I really got tired of writing the following patterns over and over
again:</p>
<p><strong>Sequential:</strong></p>
<pre><code class="lang-javascript"><span class="keyword">var</span> files = [... <span class="keyword">list</span> of files ...];
<span class="keyword">function</span> again(x) {
    <span class="keyword">if</span> (x &lt; files.length) {
        fs.readFile(files[x], <span class="keyword">function</span>(err, data) {
            <span class="comment">//... do something with data ...</span>
            again(x + <span class="number">1</span>);
        });
    } <span class="keyword">else</span> {
        console.log(<span class="string">'Done.'</span>);
    }
}

again(<span class="number">0</span>);</code></pre>
<p>or..</p>
<p><strong>Parallel:</strong></p>
<pre><code class="lang-javascript"><span class="keyword">var</span> files = [... <span class="keyword">list</span> of files ...];
<span class="keyword">var</span> pending = <span class="number">0</span>;
files.<span class="keyword">forEach</span>(<span class="keyword">function</span>(file, i) {
    pending += <span class="number">1</span>;
    fs.readFile(file, <span class="keyword">function</span>(err, data) {
        <span class="comment">//... do something with data ....</span>

        pending -= <span class="number">1</span>;
        <span class="keyword">if</span> (pending === <span class="number">0</span> &amp;&amp; i === files.length -<span class="number">1</span>) {
            console.log(<span class="string">'Done.'</span>);
        }
    });
});</code></pre>
<p>That&#39;s ugly. For more complicated examples it requires a bit more
thinking.</p>
<p>Why don&#39;t I use the wonderful library
<a href="https://github.com/caolan/async/">async</a>? Well, `async` tries to do
way too much. I also suffer from a server case of NIH syndrome. Kidding,
or else I&#39;d rewrite Express.js. Or, am I? Muahahhaa. `async` syntax is
also very ugly and not CoffeeScript friendly.</p>
<h2>Installation</h2>
<p><code>npm install batchflow</code></p>
<h2>Examples</h2>
<h3>Arrays</h3>
<p>Let&#39;s rewrite the previous sequential example:</p>
<p><strong>Sequential:</strong></p>
<pre><code class="lang-javascript"><span class="keyword">var</span> batch = <span class="keyword">require</span>(<span class="string">'batchflow'</span>);

<span class="keyword">var</span> files = [... <span class="keyword">list</span> of files ...];
batch(files).sequential()
.each(<span class="keyword">function</span>(i, item, done) {
    fs.readFile(item, <span class="keyword">function</span>(err, data) {
        <span class="comment">//do something with data</span>
        done(someResult);
    });
}).end(<span class="keyword">function</span>(results) {
    <span class="comment">//analyze results</span>
});</code></pre>
<p>How about the parallel example?</p>
<p><strong>Parallel:</strong></p>
<pre><code class="lang-javascript"><span class="keyword">var</span> batch = <span class="keyword">require</span>(<span class="string">'batchflow'</span>);

<span class="keyword">var</span> files = [... <span class="keyword">list</span> of files ...];
batch(files).parallel()
.each(<span class="keyword">function</span>(i, item, done) {
    fs.readFile(item, <span class="keyword">function</span>(err, data) {
        <span class="comment">//do something with data</span>
        done(someResult); <span class="comment">//&lt;---- yes, you must still call done in parallel, this way we can know when to trigger `end()`.</span>
    });
}).end(<span class="keyword">function</span>(results) {
    <span class="comment">//analyze results</span>
});</code></pre>
<pre><code>
What&#39;s that, your data is not stored in an array? Oh, you say it&#39;s
stored in an object? That&#39;s OK too...

Objects
-------

**Sequential:**

```javascript
var batch = require(&#39;batchflow&#39;);

var files = {&#39;file1&#39;: &#39;path&#39;.... &#39;filen&#39;: &#39;pathn&#39;}
batch(files).sequential()
.each(function(key, val, done) {
    fs.readFile(val, function(err, data) {
        //do something with data
        done(someResult);
    });
}).end(function(results) {
    //analyze results
});</code></pre>
<p>How about the parallel example? <strong>Parallel:</strong></p>
<pre><code class="lang-javascript"><span class="keyword">var</span> batch = <span class="keyword">require</span>(<span class="string">'batchflow'</span>);

<span class="keyword">var</span> files = {<span class="string">'file1'</span>: <span class="string">'path'</span>.... <span class="string">'filen'</span>: <span class="string">'pathn'</span>}
batch(files).parallel()
.each(<span class="keyword">function</span>(key, val, done) {
    fs.readFile(val, <span class="keyword">function</span>(err, data) {
        <span class="comment">//do something with data</span>
        done(someResult);
    });
}).end(<span class="keyword">function</span>(results) {
    <span class="comment">//analyze results</span>
});</code></pre>
<h2>Misc</h2>
<p>â€‹1. Is `sequential()` or `parallel()` too long? Fine. `series()`
and `seq()` are aliases for `sequential()` and `par()` is an alias
for `parallel()`. 2. You don&#39;t like the fluent API? That&#39;s OK too:</p>
<p>Non-fluent API BatchFlow</p>
<pre><code class="lang-javascript"><span class="keyword">var</span> batch = <span class="keyword">require</span>(<span class="string">'batchflow'</span>);
<span class="keyword">var</span> bf = batch(files);
bf.isSequential = <span class="keyword">true</span>;

bf.each(<span class="keyword">function</span>(i, file, done) {
    done(someResult);
});

bf.end(<span class="keyword">function</span>(results) {
    <span class="comment">//blah blah</span>
});</code></pre>
<h2>CoffeeScript</h2>
<pre><code class="lang-ruby">batch = <span class="keyword">require</span>(<span class="string">'batchflow'</span>)
files = [... <span class="keyword">list</span> of files ...]
bf = batch(files).seq().each (i, file, done) ->
  fs.readFile file, done
bf.error (err) ->
  console.log(err);
bf.end (results) ->
  console.log fr.toString() <span class="keyword">for</span> fr in results</code></pre>
<h2>Error Handling</h2>
<p>What&#39;s that, you want error handling? Well, you might as well call me
Burger King... have it your way.</p>
<pre><code class="lang-javascript"><span class="keyword">var</span> a = {<span class="string">'f'</span>: <span class="string">'/tmp/file_DOES_NOT_exist_hopefully'</span> + Math.random()};
batch(a).parallel().each(<span class="keyword">function</span>(i, item, done) {
    fs.readFile(item, done);
}).error(<span class="keyword">function</span>(err) {
    assert(err);
    done();
}).end(<span class="keyword">function</span>() {
    assert(<span class="keyword">false</span>); <span class="comment">//&lt;--- shouldn't get here</span>
});


<span class="keyword">var</span> a = [<span class="string">'/tmp/file_DOES_NOT_exist_hopefully'</span> + Math.random()];
batch(a).series().each(<span class="keyword">function</span>(i, item, done) {
    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">'err'</span>);
}).error(<span class="keyword">function</span>(err) {
    assert(err);
    done();
}).end(<span class="keyword">function</span>() {
    assert(<span class="keyword">false</span>); <span class="comment">//&lt;--- shouldn't get here</span>
});</code></pre>
<p>You can grab the source on
<a href="https://github.com/jprichardson/node-batchflow">Github</a>.</p>
<p>If you use Git with others, you should checkout
<a href="http://gitpilot.com">Gitpilot</a> to make collaboration with Git simple
using a different GUI. We would love your feedback.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a></p>
<p>-JP</p>


 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    

          <span id="footer">
            <br/>
            <span style="font-size: 10px">
              Proudly built with <a href="{{sky.homepage}}">Sky</a>.
            </span>
          </span>
        </div>
      </div>
    </div>
    
  </body>
</html>
