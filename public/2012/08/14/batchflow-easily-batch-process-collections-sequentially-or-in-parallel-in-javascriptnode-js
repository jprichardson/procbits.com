<!DOCTYPE html>
<title>BatchFlow: Easily batch process collections sequentially or in parallel in JavaScript/Node.js</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/highlight.css" rel="stylesheet">
<link href="/assets/css/style.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>BatchFlow: Easily batch process collections sequentially or in parallel in JavaScript/Node.js</h1>

<h2>Why?</h2>
<p>I really got tired of writing the following patterns over and over
again:</p>
<p><strong>Sequential:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="kd">function</span> <span class="nx">again</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">files</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">files</span><span class="p">[</span><span class="nx">x</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//... do something with data ...</span>
            <span class="nx">again</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Done.&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">again</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</pre></div>

<p>or..</p>
<p><strong>Parallel:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="kd">var</span> <span class="nx">pending</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">files</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">pending</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//... do something with data ....</span>

        <span class="nx">pending</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">pending</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">===</span> <span class="nx">files</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Done.&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span>
</pre></div>

<p>That&#39;s ugly. For more complicated examples it requires a bit more
thinking.</p>
<p>Why don&#39;t I use the wonderful library
<a href="https://github.com/caolan/async/">async</a>? Well, `async` tries to do
way too much. I also suffer from a server case of NIH syndrome. Kidding,
or else I&#39;d rewrite Express.js. Or, am I? Muahahhaa. `async` syntax is
also very ugly and not CoffeeScript friendly.</p>
<h2>Installation</h2>
<p><code>npm install batchflow</code></p>
<h2>Examples</h2>
<h3>Arrays</h3>
<p>Let&#39;s rewrite the previous sequential example:</p>
<p><strong>Sequential:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">).</span><span class="nx">sequential</span><span class="p">()</span>
<span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//do something with data</span>
        <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//analyze results</span>
<span class="p">});</span>
</pre></div>

<p>How about the parallel example?</p>
<p><strong>Parallel:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">).</span><span class="nx">parallel</span><span class="p">()</span>
<span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//do something with data</span>
        <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span> <span class="c1">//&lt;---- yes, you must still call done in parallel, this way we can know when to trigger `end()`.</span>
    <span class="p">});</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//analyze results</span>
<span class="p">});</span>
</pre></div>

<pre><code>
What&#39;s that, your data is not stored in an array? Oh, you say it&#39;s
stored in an object? That&#39;s OK too...

Objects
-------

**Sequential:**

```javascript
var batch = require(&#39;batchflow&#39;);

var files = {&#39;file1&#39;: &#39;path&#39;.... &#39;filen&#39;: &#39;pathn&#39;}
batch(files).sequential()
.each(function(key, val, done) {
    fs.readFile(val, function(err, data) {
        //do something with data
        done(someResult);
    });
}).end(function(results) {
    //analyze results
});</code></pre>
<p>How about the parallel example? <strong>Parallel:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;file1&#39;</span><span class="o">:</span> <span class="s1">&#39;path&#39;</span><span class="p">....</span> <span class="s1">&#39;filen&#39;</span><span class="o">:</span> <span class="s1">&#39;pathn&#39;</span><span class="p">}</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">).</span><span class="nx">parallel</span><span class="p">()</span>
<span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//do something with data</span>
        <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//analyze results</span>
<span class="p">});</span>
</pre></div>

<h2>Misc</h2>
<p>​1. Is `sequential()` or `parallel()` too long? Fine. `series()`
and `seq()` are aliases for `sequential()` and `par()` is an alias
for `parallel()`. 2. You don&#39;t like the fluent API? That&#39;s OK too:</p>
<p>Non-fluent API BatchFlow</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">bf</span> <span class="o">=</span> <span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">);</span>
<span class="nx">bf</span><span class="p">.</span><span class="nx">isSequential</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

<span class="nx">bf</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">bf</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//blah blah</span>
<span class="p">});</span>
</pre></div>

<h2>CoffeeScript</h2>
<div class="highlight"><pre><span class="n">batch</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">)</span>
<span class="n">files</span> <span class="o">=</span> <span class="o">[.</span><span class="n">.</span><span class="o">.</span> <span class="n">list</span> <span class="n">of</span> <span class="n">files</span> <span class="o">.</span><span class="n">.</span><span class="o">.]</span>
<span class="n">bf</span> <span class="o">=</span> <span class="n">batch</span><span class="p">(</span><span class="n">files</span><span class="p">)</span><span class="o">.</span><span class="n">seq</span><span class="p">()</span><span class="o">.</span><span class="n">each</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="n">done</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">fs</span><span class="o">.</span><span class="n">readFile</span> <span class="n">file</span><span class="p">,</span> <span class="n">done</span>
<span class="n">bf</span><span class="o">.</span><span class="n">error</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
<span class="n">bf</span><span class="o">.</span><span class="n">end</span> <span class="p">(</span><span class="n">results</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">fr</span><span class="o">.</span><span class="n">toString</span><span class="p">()</span> <span class="k">for</span> <span class="n">fr</span> <span class="k">in</span> <span class="n">results</span>
</pre></div>

<h2>Error Handling</h2>
<p>What&#39;s that, you want error handling? Well, you might as well call me
Burger King... have it your way.</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;f&#39;</span><span class="o">:</span> <span class="s1">&#39;/tmp/file_DOES_NOT_exist_hopefully&#39;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()};</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">parallel</span><span class="p">().</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//&lt;--- shouldn&#39;t get here</span>
<span class="p">});</span>


<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;/tmp/file_DOES_NOT_exist_hopefully&#39;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()];</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">series</span><span class="p">().</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;err&#39;</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//&lt;--- shouldn&#39;t get here</span>
<span class="p">});</span>
</pre></div>

<p>You can grab the source on
<a href="https://github.com/jprichardson/node-batchflow">Github</a>.</p>
<p>If you use Git with others, you should checkout
<a href="http://gitpilot.com">Gitpilot</a> to make collaboration with Git simple
using a different GUI. We would love your feedback.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a></p>
<p>-JP</p>


<!--<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>-->

<p>
If you made it this far, you should <a href="http://twitter.com/jprichardson">follow me on Twitter</a>.
</p>

<p>
  -JP
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2012/08/14/batchflow-easily-batch-process-collections-sequentially-or-in-parallel-in-javascriptnode-js/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>