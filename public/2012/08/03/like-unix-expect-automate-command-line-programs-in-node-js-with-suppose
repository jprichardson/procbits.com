<!DOCTYPE html>
<title>Like Unix Expect: Automate Command Line Programs in Node.js with Suppose</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/highlight.css" rel="stylesheet">
<link href="/assets/css/style.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>Like Unix Expect: Automate Command Line Programs in Node.js with Suppose</h1>

<p>Have you ever heard of the command line program
<a href="http://en.wikipedia.org/wiki/Expect">expect</a>? Basically, expect allows
you to automate command line programs.
<a href="https://github.com/jprichardson/node-suppose">suppose</a> is a
programmable Node.js module that allows the same behavior.</p>
<p>Why would you do this? Maybe you want to automate a ssh session? Or,
maybe you want to test the external interface of on of your Node.js
command line scripts.</p>
<p>Install: <code>npm install suppose</code></p>
<p>Example:</p>
<div class="highlight"><pre><span class="nx">process</span><span class="p">.</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;/tmp/awesome&#39;</span><span class="p">);</span>
<span class="nx">suppose</span><span class="p">(</span><span class="s1">&#39;npm&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;init&#39;</span><span class="p">])</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;name: (awesome) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;awesome_package\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;version: (0.0.0) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;0.0.1\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;description: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s2">&quot;It&#39;s an awesome package man!\n&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;entry point: (index.js) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;test command: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;npm test\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;git repository: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keywords: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;awesome, cool\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;author: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;JP Richardson\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;license: (BSD) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;MIT\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ok? (yes) &#39;</span> <span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;yes\n&#39;</span><span class="p">)</span>
<span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">code</span><span class="p">){</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">code</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">packageFile</span> <span class="o">=</span> <span class="s1">&#39;/tmp/awesome/package.json&#39;</span><span class="p">;</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">packageFile</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">packageObj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;awesome_package&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">version</span> <span class="o">===</span> <span class="s1">&#39;0.0.1&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">description</span> <span class="o">===</span> <span class="s2">&quot;It&#39;s an awesome package man!&quot;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">main</span> <span class="o">===</span> <span class="s1">&#39;index.js&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">scripts</span><span class="p">.</span><span class="nx">test</span> <span class="o">===</span> <span class="s1">&#39;npm test&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">keywords</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;awesome&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">keywords</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;cool&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">author</span> <span class="o">===</span> <span class="s1">&#39;JP Richardson&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">license</span> <span class="o">===</span> <span class="s1">&#39;MIT&#39;</span><span class="p">);</span>
        <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">});</span>
</pre></div>

<p>Pretty easy, huh? You can grab the source on
<a href="https://github.com/jprichardson/node-suppose">Github</a>.</p>


<!--<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>-->

<p>
If you made it this far, you should <a href="http://twitter.com/jprichardson">follow me on Twitter</a>.
</p>

<p>
  -JP
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2012/08/03/like-unix-expect-automate-command-line-programs-in-node-js-with-suppose/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>