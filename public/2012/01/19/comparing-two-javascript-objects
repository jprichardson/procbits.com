<!DOCTYPE html>
<title>Comparing Two Javascript Objects</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/style.css" rel="stylesheet">
<link href="/assets/css/highlight.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>Comparing Two Javascript Objects</h1>

<p>Recently, I was faced with a problem where I needed to compare two
Javascript objects. My initial strategy was to convert them to JSON and
compare the JSON strings.</p>
<p>Sort of like this:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span><span class="c1">//&#39;{&quot;firstName&quot;:&quot;JP&quot;,&quot;lastName&quot;:&quot;Richardson&quot;}&#39;</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">person2</span><span class="p">);</span><span class="c1">//&#39;{&quot;firstName&quot;:&quot;JP&quot;,&quot;lastName&quot;:&quot;Richardson&quot;}&#39;</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">);</span>
</pre></div>

<p>Simple enough, right?</p>
<p>Not so fast. I encountered a case like this:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span><span class="c1">//&#39;{&quot;firstName&quot;:&quot;JP&quot;,&quot;lastName&quot;:&quot;Richardson&quot;}&#39;</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">person2</span><span class="p">);</span><span class="c1">//&#39;{&quot;lastName&quot;:&quot;Richardson&quot;,&quot;firstName&quot;:&quot;JP&quot;}&#39;</span>

<span class="nx">assert</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">);</span>
</pre></div>

<p>The data is the same, but the string is different. Fortunately,
Stackoverflow had a nice <a href="http://stackoverflow.com/questions/1068834/object-comparison-in-javascript">Javascript object comparison
algorithm</a>
to dump into my app.</p>
<div class="highlight"><pre><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">equals</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kd">var</span> <span class="nx">p</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="nx">p</span> <span class="k">in</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">x</span><span class="p">[</span><span class="nx">p</span><span class="p">])</span><span class="o">==</span><span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="kc">false</span><span class="p">;}</span>
  <span class="p">}</span>

  <span class="k">for</span><span class="p">(</span><span class="nx">p</span> <span class="k">in</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">p</span><span class="p">])</span> <span class="p">{</span>
          <span class="k">switch</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">p</span><span class="p">]))</span> <span class="p">{</span>
              <span class="k">case</span> <span class="s1">&#39;object&#39;</span><span class="o">:</span>
                  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">equals</span><span class="p">(</span><span class="nx">x</span><span class="p">[</span><span class="nx">p</span><span class="p">]))</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="p">}</span> <span class="k">break</span><span class="p">;</span>
              <span class="k">case</span> <span class="s1">&#39;function&#39;</span><span class="o">:</span>
                  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">x</span><span class="p">[</span><span class="nx">p</span><span class="p">])</span><span class="o">==</span><span class="s1">&#39;undefined&#39;</span> <span class="o">||</span>
                      <span class="p">(</span><span class="nx">p</span> <span class="o">!=</span> <span class="s1">&#39;equals&#39;</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">toString</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">x</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">toString</span><span class="p">()))</span>
                      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
                  <span class="k">break</span><span class="p">;</span>
              <span class="k">default</span><span class="o">:</span>
                  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">x</span><span class="p">[</span><span class="nx">p</span><span class="p">])</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="p">}</span>
          <span class="p">}</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="p">[</span><span class="nx">p</span><span class="p">])</span>
              <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">for</span><span class="p">(</span><span class="nx">p</span> <span class="k">in</span> <span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">p</span><span class="p">])</span><span class="o">==</span><span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="kc">false</span><span class="p">;}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p>Test passed. I eventually hit a situation where I had some code with an
Object that had a Person prototype and some data that came from JSON.
Kinda like this:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;JP&#39;</span><span class="p">,</span> <span class="s1">&#39;Richardson&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;{&quot;firstName&quot;:&quot;JP&quot;,&quot;lastName&quot;:&quot;Richardson&quot;}&#39;</span><span class="p">);</span>

<span class="c1">//deepEquals is code snippet above ^</span>
<span class="nx">person1</span><span class="p">.</span><span class="nx">deepEquals</span><span class="p">(</span><span class="nx">person2</span><span class="p">);</span> <span class="c1">// &lt;--- THIS FAILS</span>
</pre></div>

<p>I only cared about comparing the data. The methods associated with the
object (Prototype) didn&#39;t matter. Let&#39;s modify the above algorithm. I
use CoffeeScript. Here&#39;s the modification:</p>
<div class="highlight"><pre><span class="no">Object</span><span class="o">::</span><span class="n">jsonEquals</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="c1">#we do this because two objects may have the same data fields and data but different prototypes</span>
  <span class="n">x1</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">stringify</span><span class="p">(</span><span class="n">this</span><span class="p">))</span>
  <span class="n">x2</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">stringify</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>

  <span class="nb">p</span> <span class="o">=</span> <span class="n">null</span>
  <span class="k">for</span> <span class="nb">p</span> <span class="n">of</span> <span class="n">x1</span>
    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">typeof</span> <span class="p">(</span><span class="n">x2</span><span class="o">[</span><span class="nb">p</span><span class="o">]</span><span class="p">)</span> <span class="n">is</span> <span class="s1">&#39;undefined&#39;</span>
  <span class="k">for</span> <span class="nb">p</span> <span class="n">of</span> <span class="n">x1</span>
    <span class="k">if</span> <span class="n">x1</span><span class="o">[</span><span class="nb">p</span><span class="o">]</span>
      <span class="n">switch</span> <span class="n">typeof</span> <span class="p">(</span><span class="n">x1</span><span class="o">[</span><span class="nb">p</span><span class="o">]</span><span class="p">)</span>
        <span class="k">when</span> <span class="s1">&#39;object&#39;</span>
          <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">x1</span><span class="o">[</span><span class="nb">p</span><span class="o">].</span><span class="n">jsonEquals</span><span class="p">(</span><span class="n">x2</span><span class="o">[</span><span class="nb">p</span><span class="o">]</span><span class="p">)</span>
        <span class="k">when</span> <span class="s1">&#39;function&#39;</span>
          <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">typeof</span> <span class="p">(</span><span class="n">x2</span><span class="o">[</span><span class="nb">p</span><span class="o">]</span><span class="p">)</span> <span class="n">is</span> <span class="s1">&#39;undefined&#39;</span> <span class="ow">or</span> <span class="p">(</span><span class="nb">p</span> <span class="n">isnt</span> <span class="s1">&#39;equals&#39;</span> <span class="ow">and</span> <span class="n">x1</span><span class="o">[</span><span class="nb">p</span><span class="o">].</span><span class="n">toString</span><span class="p">()</span> <span class="n">isnt</span> <span class="n">x2</span><span class="o">[</span><span class="nb">p</span><span class="o">].</span><span class="n">toString</span><span class="p">())</span>
        <span class="k">else</span>
          <span class="k">return</span> <span class="kp">false</span>  <span class="k">unless</span> <span class="n">x1</span><span class="o">[</span><span class="nb">p</span><span class="o">]</span> <span class="n">is</span> <span class="n">x2</span><span class="o">[</span><span class="nb">p</span><span class="o">]</span>
    <span class="k">else</span>
      <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">x2</span><span class="o">[</span><span class="nb">p</span><span class="o">]</span>
  <span class="k">for</span> <span class="nb">p</span> <span class="n">of</span> <span class="n">x2</span>
    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">typeof</span> <span class="p">(</span><span class="n">x1</span><span class="o">[</span><span class="nb">p</span><span class="o">]</span><span class="p">)</span> <span class="n">is</span> <span class="s1">&#39;undefined&#39;</span>
  <span class="kp">true</span>
</pre></div>

<p>This causes the situation like I described above to pass. Essentially
convert to JSON to remove the prototype. I suppose you could make this
more efficient my just manually setting the prototype to Object before
doing the comparison, but oh well this works for the time being.</p>
<p>Do you use Git? If so, checkout <a href="http://gitpilot.com">Gitpilot</a> to make
project management and collaborating on projects seamless.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a>
and read my blog on entrepreneurship: <a href="http://techneur.com">Techneur</a>.</p>
<p>-JP Richardson</p>


<!--<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>-->

<p>
If you made it this far, you should <a href="http://twitter.com/jprichardson">follow me on Twitter</a>.
</p>

<p>
  -JP
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2012/01/19/comparing-two-javascript-objects/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>