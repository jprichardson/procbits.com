<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Thinking Asynchronously in CoffeeScript/JavaScript: Loops and Callbacks</title>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="JP">
    <mete name="description" content="">

    <link href="http://netdna.bootstrapcdn.com/bootswatch/2.1.1/spacelab/bootstrap.min.css" rel="stylesheet">
    <link href="/vendor/highlight.js/styles/vs.css" rel="stylesheet">
    <!--<link href="style.css" rel="stylesheet">-->

    <style>
      body {
        padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */
      }
    </style>

    <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

      <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', ]);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
  </head>
  <body>
    
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container-fluid nav-container">
          <nav role="navigation">
            <a class="brand" title="" href="http://procbits.com">procbits</a>
            
            <p class="navbar-text pull-left">
              source code snippets and other random musings about software
            </p>
          </nav>

            <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </a>



        </div>
      </div>
    </div>


    <div class="container-fluid">
      <div id="content" class="clearfix row-fluid">
        <div id="main" class="span8 clearfix" role="main">


<h1>Thinking Asynchronously in CoffeeScript/JavaScript: Loops and Callbacks</h1>
<p>Awhile back, I wrote about my new experience in learning Node.js: <a href="http://procbits.com/2011/10/29/a-node-js-experiment-thinking-asynchronously-recursion-calculate-file-size-directory/">A
Node.js Experiment: Thinking Asynchronously, Using Recursion to
Calculate the Total File Size in a
Directory</a>.</p>
<p>Consider this snippet of code:</p>
<pre><code class="lang-javascript"><span class="keyword">var</span> names = [<span class="string">'JP'</span>, <span class="string">'Chris'</span>, <span class="string">'Leslie'</span>];
<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.length; ++i){
  <span class="keyword">var</span> name = names[i];
  setTimeout(<span class="keyword">function</span>(){
    alert(name);              
  },<span class="number">10</span>);
}​</code></pre>
<p>Equivalent CoffeeScript:</p>
<pre><code class="lang-ruby">names = [<span class="string">'JP'</span>, <span class="string">'Chris'</span>, <span class="string">'Leslie'</span>]
<span class="keyword">for</span> name in names
  setTimeout(->
    alert(name)
  ,<span class="number">10</span>)</code></pre>
<p>Click
<a href="http://coffeescript.org/#try:names%20%3D%20%5B&#39;JP&#39;%2C%20&#39;Chris&#39;%2C%20&#39;Leslie&#39;%5D%0Afor%20name%20in%20names%0A%20%20setTimeout(-%3E%0A%20%20%20%20alert(name">here</a>%0A%20%20%2C10))
to run it. If you guessed that the loop would alert &quot;Leslie&quot; three
times, then you&#39;d be correct.</p>
<p>The problem is, that before the callback executes, the loop has
completed. Thus callback always has the last value.</p>
<p>How do you solve this problem? You wrap the callback in a closure that
executes immediately.</p>
<p>JavaScript:</p>
<pre><code class="lang-javascript"><span class="keyword">var</span> names = [<span class="string">'JP'</span>, <span class="string">'Chris'</span>, <span class="string">'Leslie'</span>];
<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.length; ++i){
  <span class="keyword">var</span> name = names[i];
  (<span class="keyword">function</span>(name){
    setTimeout(<span class="keyword">function</span>(){
      alert(name);              
    },<span class="number">10</span>);
  })(name);
}​</code></pre>
<p>CoffeeScript:</p>
<pre><code class="lang-ruby">names = [<span class="string">'JP'</span>, <span class="string">'Chris'</span>, <span class="string">'Leslie'</span>]
<span class="keyword">for</span> name in names
  <span class="keyword">do</span> (name) ->
    setTimeout(->
      alert(name)
    ,<span class="number">10</span>)</code></pre>
<p>Click
<a href="http://coffeescript.org/#try:names%20%3D%20%5B&#39;JP&#39;%2C%20&#39;Chris&#39;%2C%20&#39;Leslie&#39;%5D%0Afor%20name%20in%20names%0A%20%20do%20(name">here</a>%20-%3E%0A%20%20%20%20setTimeout(-%3E%0A%20%20%20%20%20%20alert(name)%0A%20%20%20%20%2C10))
to run it.</p>
<p>These solutions execute the block of code in a parallel manner. Using
the alert&#39;s are not a good indication in showing this behavior. However,
if you were opening files, all of them would be opened approximately
(not exactly) at the same time.</p>
<p>What if you wanted to perform the action in the callback in a serial
manner?</p>
<p>Using the previous simple example, it&#39;d look like this:</p>
<p>JavaScript:</p>
<pre><code class="lang-javascript"><span class="keyword">var</span> names = [<span class="string">'JP'</span>, <span class="string">'Chris'</span>, <span class="string">'Leslie'</span>];
loop = <span class="keyword">function</span>(i){
    setTimeout(<span class="keyword">function</span>(){
      alert(names[i]);
      <span class="keyword">if</span> (i &lt; names.length - <span class="number">1</span>)
        loop(i + <span class="number">1</span>);       
    },<span class="number">10</span>);
}
loop(<span class="number">0</span>);</code></pre>
<p>CoffeeScript:</p>
<pre><code class="lang-ruby">names = [<span class="string">'JP'</span>, <span class="string">'Chris'</span>, <span class="string">'Leslie'</span>];
doloop = (i) ->
  setTimeout(->
    alert(names[i])
    <span class="keyword">if</span> i &lt; names.length - <span class="number">1</span>
      doloop(i + <span class="number">1</span>)       
  ,<span class="number">10</span>);
doloop(<span class="number">0</span>)</code></pre>
<p><a href="http://coffeescript.org/#try:names%20%3D%20%5B&#39;JP&#39;%2C%20&#39;Chris&#39;%2C%20&#39;Leslie&#39;%5D%3B%0Adoloop%20%3D%20(i">Run
it.</a>%20-%3E%0A%20%20setTimeout(-%3E%0A%20%20%20%20alert(names%5Bi%5D)%0A%20%20%20%20if%20i%20%3C%20names.length%20-%201%0A%20%20%20%20%20%20doloop(i%20%2B%201)%20%20%20%20%20%20%20%0A%20%20%2C10)%3B%0Adoloop(0))</p>
<p>If you were doing file processing in the loop, it would be executed
sequentially.</p>
<p>Hopefully this helps you to better understand asynchronous design of
algorithms in JavaScript.</p>
<p><strong>Update:</strong> I forgot about the forEach function that exists in Node.js
and most modern browsers. This function pretty much solves the problem.</p>
<p>Here&#39;s the JavaScript code:</p>
<pre><code class="lang-javascript"><span class="keyword">var</span> names = [<span class="string">'JP'</span>, <span class="string">'Chris'</span>, <span class="string">'Leslie'</span>];
names.<span class="keyword">forEach</span>(<span class="keyword">function</span>(name){
  setTimeout(<span class="keyword">function</span>(){
    alert(name);              
  },<span class="number">10</span>);
}​);</code></pre>
<p>Much cleaner. Thanks to <a href="http://www.reddit.com/r/programming/comments/u34ed/thinking_asynchronously_in_coffeescriptjavascript/c4ryifw">smog_alado
[Reddit]</a>
for the reminder.</p>
<p>Checkout <a href="http://gitpilot.com">Gitpilot</a>, a different kind of Git GUI.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a></p>
<p>-JP</p>


 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    

          <span id="footer">
            <br/>
            <span style="font-size: 10px">
              Proudly built with <a href="{{sky.homepage}}">Sky</a>.
            </span>
          </span>
        </div>
      </div>
    </div>
    
  </body>
</html>
