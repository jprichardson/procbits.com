<!DOCTYPE html>
<title>Understanding Custom AngularJS Promises, Services, and Punching Clowns with a Phonegap Example</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/highlight.css" rel="stylesheet">
<link href="/assets/css/style.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>Understanding Custom AngularJS Promises, Services, and Punching Clowns with a Phonegap Example</h1>

<p>If you look at the documentation for <a href="http://docs.angularjs.org/api/ng.$q">$q</a>, the AngularJS promise library inspired by <a href="https://github.com/kriskowal/q">Q</a>, you&#39;ll notice that it functions a bit different than the promise returned by <a href="http://docs.angularjs.org/api/ng.$http">$http</a>.</p>
<p>For example:</p>
<div class="highlight"><pre><span class="c1">// =&gt; myPromise standard $q promise returned or created above somewhere</span>
<span class="nx">myPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// =&gt; success code here</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// =&gt; failure code here</span>
<span class="p">})</span>
</pre></div>

<p>vs <code>$http</code> promise:</p>
<div class="highlight"><pre><span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="cm">/* ... */</span><span class="p">)</span>
<span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// =&gt; success</span>
<span class="p">}).</span><span class="nx">failure</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// =&gt; failure</span>
<span class="p">})</span>
</pre></div>

<p>The documentation does not make it clear why they&#39;re different. But this <a href="http://stackoverflow.com/questions/16385278/angular-httppromise-difference-between-success-error-methods-and-thens-a">StackOverflow post</a>  has some details. Arguably, it can be said that it may be a bit cleaner. Let&#39;s take a look on you can leverage this idea to make a clean modal confirmation service for a Phonegap/Cordova app.</p>
<h2 id="phonegap-cordova">Phonegap/Cordova</h2>
<p>As you may know, Adobe Phonegap provides <a href="http://docs.phonegap.com/en/3.3.0/cordova_notification_notification.md.html#Notification">notifications</a> so that your app can have native alert dialogs instead of the dialogs created by JavaScript.</p>
<p>so, instead of:</p>
<div class="highlight"><pre><span class="c1">// =&gt; returns `true` if &#39;OK&#39; was clicked and `false` if &#39;Cancel&#39; was clicked</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Are you sure that you want to punch the clown?&#39;</span><span class="p">)</span>
</pre></div>

<p>you can do this:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">onConfirm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">idx</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// =&gt; &#39;OK&#39; was pressed (clown punched)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// =&gt; &#39;Cancel&#39; was pressed (you&#39;re a weeny)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">navigator</span><span class="p">.</span><span class="nx">notification</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Are you sure that you want to punch the clown?&#39;</span><span class="p">,</span> <span class="nx">onConfirm</span><span class="p">)</span>
</pre></div>

<p>even better, you can add a title and change the text of the buttons:</p>
<div class="highlight"><pre><span class="nx">navigator</span><span class="p">.</span><span class="nx">notification</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Are you sure that you want to punch the clown?&#39;</span><span class="p">,</span> <span class="nx">onConfirm</span><span class="p">,</span> <span class="s1">&#39;Punch Clown?&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;Punch Clown&#39;</span><span class="p">,</span> <span class="s1">&#39;Cancel&#39;</span><span class="p">])</span>
</pre></div>

<h2 id="angularjs-services">AngularJS Services</h2>
<p>Let&#39;s wrap this bad boy up in a service so that we don&#39;t have to worry if we&#39;re testing our desktop browser or native mobile app.</p>
<p><strong>alerts.js</strong>:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">alertsModule</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;alerts&#39;</span><span class="p">,</span> <span class="p">[])</span>

<span class="nx">alertsModule</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;alerts&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$window</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">confirm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">buttonLabels</span><span class="p">,</span> <span class="nx">successCallback</span><span class="p">,</span> <span class="nx">cancelCallback</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">notification</span> <span class="o">&amp;&amp;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">notification</span><span class="p">.</span><span class="nx">confirm</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//native app</span>
      <span class="kd">var</span> <span class="nx">onConfirm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">idx</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">idx</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">successCallback</span><span class="p">()</span> <span class="o">:</span> <span class="nx">cancelCallback</span><span class="p">()</span>
      <span class="p">}</span>

      <span class="nx">navigator</span><span class="p">.</span><span class="nx">notification</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">onConfirm</span><span class="p">,</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">buttonLabels</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">$window</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">?</span> <span class="nx">successCallback</span><span class="p">()</span> <span class="o">:</span> <span class="nx">cancelCallback</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</pre></div>

<p>now somewhere in your app, you can do:</p>
<div class="highlight"><pre><span class="kd">function</span> <span class="nx">onSuccess</span><span class="p">(){</span>
  <span class="c1">// =&gt; bozo punched</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">onCancel</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// =&gt; ya, Bozo scares me too, not punched.</span>
<span class="p">}</span>

<span class="nx">alerts</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Do you want to punch bozo?&#39;</span><span class="p">,</span> <span class="s1">&#39;Punch him?&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;Punch Bozo&#39;</span><span class="p">,</span> <span class="s2">&quot;No, I&#39;m a Weeny&quot;</span><span class="p">],</span> <span class="nx">onSuccess</span><span class="p">,</span> <span class="nx">onCancel</span><span class="p">)</span>
</pre></div>

<p>but that&#39;s ugly. </p>
<h2 id="promises">Promises</h2>
<p>I won&#39;t talk about the virtues of promises, as it&#39;s been done <a href="http://blog.parse.com/2013/01/29/whats-so-great-about-javascript-promises/">ad nausaem</a>. I rarely use them, but when I do... probably a Dos Equis meme here. </p>
<p>Let&#39;s modify our service to have a promise:</p>
<div class="highlight"><pre><span class="nx">mod</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;alerts&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$window</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">confirm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">buttonLabels</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">defer</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">notification</span> <span class="o">&amp;&amp;</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">notification</span><span class="p">.</span><span class="nx">confirm</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">onConfirm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">idx</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">idx</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span><span class="p">()</span> <span class="o">:</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">reject</span><span class="p">()</span>
      <span class="p">}</span>

      <span class="nx">navigator</span><span class="p">.</span><span class="nx">notification</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">onConfirm</span><span class="p">,</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">buttonLabels</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">$window</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">?</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span><span class="p">()</span> <span class="o">:</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">reject</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">promise</span>
  <span class="p">}</span>
<span class="p">})</span>
</pre></div>

<p>now you can do this:</p>
<div class="highlight"><pre><span class="nx">alerts</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Do you want to punch bozo?&#39;</span><span class="p">,</span> <span class="s1">&#39;Punch him?&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;Punch Bozo&#39;</span><span class="p">,</span> <span class="s2">&quot;No, I&#39;m a Weeny&quot;</span><span class="p">])</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="c1">// =&gt; bozo punched</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// =&gt; ya, Bozo scares me too, not punched.</span>
<span class="p">})</span>
</pre></div>

<h3 id="custom-promise">Custom Promise</h3>
<p>You can make a custom promise to add clarity, let&#39;s modify our <code>alerts</code> service again:</p>
<div class="highlight"><pre><span class="nx">mod</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;alerts&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$window</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">confirm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="cm">/* ... */</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* ... */</span>
    <span class="k">return</span> <span class="nx">alertPromise</span><span class="p">(</span><span class="nx">defer</span><span class="p">.</span><span class="nx">promise</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="kd">function</span> <span class="nx">alertPromise</span><span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">promise</span><span class="p">.</span><span class="nx">ok</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">promise</span>
  <span class="p">}</span>

  <span class="nx">promise</span><span class="p">.</span><span class="nx">cancel</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">promise</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">promise</span>
<span class="p">}</span>
</pre></div>

<p>now you can do this:</p>
<div class="highlight"><pre><span class="nx">alerts</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Do you want to punch bozo?&#39;</span><span class="p">,</span> <span class="s1">&#39;Punch him?&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;Punch Bozo&#39;</span><span class="p">,</span> <span class="s2">&quot;No, I&#39;m a Weeny&quot;</span><span class="p">])</span>
<span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="c1">// =&gt; bozo punched</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">cancel</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// =&gt; ya, Bozo scares me too, not punched.</span>
<span class="p">})</span>
</pre></div>

<p>is this better? Not really. But at least your clown punching code has a little more clarity.</p>


<!--<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>-->

<p>
If you made it this far, you should <a href="http://twitter.com/jprichardson">follow me on Twitter</a>.
</p>

<p>
  -JP
</p>

<p style="border: 1px solid #ccc; background-color: #f8f8f8; padding: 3px;">
Want to test-drive Bitcoin without any risk? Check out my 
  <a href="https://play.google.com/store/apps/details?id=com.coinbolt.bitcoin">
    bitcoin wallet Coinbolt</a>. It includes test coins for free.
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2014/01/05/understanding-custom-angularjs-promises-services-clown-punch-phonegap-example/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>