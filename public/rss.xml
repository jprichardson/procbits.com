<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[procbits]]></title><description><![CDATA[source code snippets and other random musings about software]]></description><link>http://procbits.com</link><generator>NodeJS RSS Module</generator><lastBuildDate>Thu, 05 Dec 2013 14:10:45 GMT</lastBuildDate><atom:link href="http://procbits.com/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Warming Up To Grunt: Compiling Less and Browserify]]></title><description><![CDATA[<p>I use to hate <a href="http://gruntjs.com/">Grunt</a>. No, I actually use to loath Grunt. I couldn&#39;t understand why anyone would want to use it over something so simple as a Makefile. I&#39;d rather gouge my eyes out with a spoon than look at a Gruntfile. I hate CoffeeScript too, (forgive all the hate, please don&#39;t think of me like a Sith Lord of programming) but CoffeeScript at least makes Grunt a little easier on the eyes.</p>
<p>When I started using <a href="https://github.com/substack/node-browserify">Browserify</a> and <a href="http://lesscss.org/">Less</a> I needed a way to recompile the changes. So I like a good little *nix developer, I made Make tasks:</p>
<p><strong>Makefile</strong>:</p>
<div class="highlight"><pre><span class="nf">client-js</span><span class="o">:</span>
    browserify js/app.js -o build/bundle.js

<span class="nf">client-css</span><span class="o">:</span>
    lessc css/app.less css/app.css 

<span class="nf">.PHONY</span><span class="o">:</span> <span class="m">client-js client-css</span>
</pre></div>

<p>It got really annoying typing <code>make client-js</code> or <code>make client-css</code> after everytime I changed my JavaScript of less source. I needed something to watch my files and recompile the changes.</p>
<p>Enter Grunt.</p>
<p>Here is a <a href="http://gruntjs.com/getting-started">sample Gruntfile</a>:</p>
<div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>

  <span class="c1">// Project configuration.</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
    <span class="nx">uglify</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">banner</span><span class="o">:</span> <span class="s1">&#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\n&#39;</span>
      <span class="p">},</span>
      <span class="nx">build</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;src/&lt;%= pkg.name %&gt;.js&#39;</span><span class="p">,</span>
        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;build/&lt;%= pkg.name %&gt;.min.js&#39;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="c1">// Load the plugin that provides the &quot;uglify&quot; task.</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-uglify&#39;</span><span class="p">);</span>

  <span class="c1">// Default task(s).</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;uglify&#39;</span><span class="p">]);</span>

<span class="p">};</span>
</pre></div>

<p>Text vomit to me, ick.</p>
<div class="highlight"><pre><span class="nv">module.exports = </span><span class="nf">(grunt) -&gt;</span>

  <span class="c1"># Project configuration.</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span>
    <span class="nv">pkg: </span><span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s">&quot;package.json&quot;</span><span class="p">)</span>
    <span class="nv">uglify:</span>
      <span class="nv">options:</span>
        <span class="nv">banner: </span><span class="s">&#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\n&#39;</span>

      <span class="nv">build:</span>
        <span class="nv">src: </span><span class="s">&quot;src/&lt;%= pkg.name %&gt;.js&quot;</span>
        <span class="nv">dest: </span><span class="s">&quot;build/&lt;%= pkg.name %&gt;.min.js&quot;</span>


  <span class="c1"># Load the plugin that provides the &quot;uglify&quot; task.</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span> <span class="s">&quot;grunt-contrib-uglify&quot;</span>

  <span class="c1"># Default task(s).</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&quot;default&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;uglify&quot;</span><span class="p">]</span>
</pre></div>

<p>As stated, I pretty much hate CoffeeScript despite the fact that I wrote <a href="http://procbits.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript">this</a>. (I might just go invent a time-machine so that I can go back in time and give a round house kick to the face of JP past.) But at least it looks a little better.</p>
<h2 id="grunt-with-browserify">Grunt with Browserify</h2>
<p>First, you should install the Grunt task runner:</p>
<pre><code>[sudo] npm install -g grunt-cli</code></pre>
<p>install the grunt browserify package:</p>
<pre><code>npm install --save-dev grunt-browserify</code></pre>
<p>that&#39;s it.</p>
<p>Let&#39;s create a simple JS file that will act as our browser side JavaScript:</p>
<pre><code>mkdir www
touch www/app.js</code></pre>
<p>Now let&#39;s create our gruntfile <code>Gruntfile.js</code>:</p>
<div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
    <span class="nx">browserify</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">js</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;./www/app.js&#39;</span><span class="p">,</span>
        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./www/bundle.js&#39;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>

  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-browserify&#39;</span><span class="p">)</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;browserify&#39;</span><span class="p">])</span>
<span class="p">}</span>
</pre></div>

<p>now run the task:</p>
<pre><code>grunt browserify</code></pre>
<p>and you&#39;ll notice that <code>./www/bundle.js</code> has been created. But that&#39;s not much better than creating a Makefile. Arguably worse.</p>
<h2 id="grunt-with-watch">Grunt with Watch</h2>
<p>What would really be useful is to save a file and then have Grunt call browserify to recompile it. </p>
<p>Install the following npm package:</p>
<pre><code>npm install --save-dev grunt-contrib-watch</code></pre>
<p>modify your grunt file to look like:</p>
<div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">js</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;www/**/*.js&#39;</span><span class="p">],</span>
        <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;browserify&#39;</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">browserify</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">js</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;./www/app.js&#39;</span><span class="p">,</span>
        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./www/bundle.js&#39;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>

  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">)</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-browserify&#39;</span><span class="p">)</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="s1">&#39;browserify&#39;</span><span class="p">])</span>
<span class="p">}</span>
</pre></div>

<p>now run the task:</p>
<pre><code>grunt watch</code></pre>
<p>and if you modify <code>./www/app.js</code> and save it, you&#39;ll notice browserify will automatically run!</p>
<h2 id="grunt-with-less">Grunt with Less</h2>
<p>Now let&#39;s say that you want the same behavior with Less. Install:</p>
<pre><code>npm install --save-dev grunt-contrib-less</code></pre>
<p>create your less file:</p>
<pre><code>touch www/app.less</code></pre>
<p>modify your gruntfile:</p>
<div class="highlight"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">js</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;www/**/*.js&#39;</span><span class="p">],</span>
        <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;browserify&#39;</span><span class="p">]</span>
      <span class="p">},</span>
      <span class="nx">css</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;www/**/*.less&#39;</span><span class="p">],</span>
        <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;less&#39;</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">browserify</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">js</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;./www/app.js&#39;</span><span class="p">,</span>
        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;./www/bundle.js&#39;</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">less</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">development</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">files</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;./www/app.css&#39;</span><span class="o">:</span> <span class="s1">&#39;./www/app.less&#39;</span><span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>

  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">)</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-browserify&#39;</span><span class="p">)</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-less&#39;</span><span class="p">)</span>
  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="s1">&#39;browserify&#39;</span><span class="p">,</span> <span class="s1">&#39;less&#39;</span><span class="p">])</span>
<span class="p">}</span>
</pre></div>

<p>Now modify <code>www/app.less</code> and save it. You&#39;ll see <code>www/app.css</code> update accordingly.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I don&#39;t love Grunt yet, but I&#39;m definitely warming up to the idea of having it as another tool in my developer arsenal.</p>
]]></description><link>http://procbits.com/2013/12/05/warming-up-to-grunt-compiling-less-and-browserify</link><guid isPermaLink="true">http://procbits.com/2013/12/05/warming-up-to-grunt-compiling-less-and-browserify</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Tue, 03 Dec 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Connecting to a SockJS server from native HTML5 WebSocket]]></title><description><![CDATA[<h2 id="overview-of-the-problem">Overview of the Problem</h2>
<p>I wasted over four hours today on a problem with an extremely trivial solution. I was trying to connect native HTML5 instances of the 
<code>WebSocket</code> class to my Node.js <a href="https://github.com/sockjs/sockjs-node">SockJS</a> server. Why, was I trying to do this? I was trying to mimize dependences for my library <a href="https://github.com/jprichardson/jsock">JSock</a></p>
<p>I kept getting the following error in the browser Chrome console:</p>
<pre><code>failed: Unexpected response code: 200 </code></pre>
<p>I Googled this error, and usually Google returns the cause of the problem within the first page. What followed, was me spending hours trying various different things.</p>
<p>So, this solution applies to you if:</p>
<ol>
<li>You are using SockJS on the server, in particular Node.js. (It may apply to other SockJS server implementations too)</li>
<li>In the browser, you are using the native <code>WebSocket</code> class and not SockJS.</li>
</ol>
<p>Your code may look something like this:</p>
<p><strong>server.js</strong>:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">8080</span>

<span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">()</span>

<span class="kd">var</span> <span class="nx">sockjs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sockjs&#39;</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">wss</span> <span class="o">=</span> <span class="nx">sockjs</span><span class="p">.</span><span class="nx">createServer</span><span class="p">()</span>
<span class="nx">wss</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ws</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">ws</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ws</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;from server: &#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="nx">ws</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">})</span>

<span class="nx">wss</span><span class="p">.</span><span class="nx">installHandlers</span><span class="p">(</span><span class="nx">server</span><span class="p">,</span> <span class="p">{</span><span class="nx">prefix</span><span class="o">:</span> <span class="s1">&#39;/data&#39;</span><span class="p">})</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">)</span>
</pre></div>

<p><strong>browser.js</strong>:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">wsUrl</span> <span class="o">=</span> <span class="s1">&#39;ws://&#39;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span> 
<span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="nx">wsUrl</span> <span class="o">+</span> <span class="s1">&#39;/data&#39;</span><span class="p">)</span>

<span class="nx">ws</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">ws</span><span class="p">.</span><span class="nx">onopen</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;opening...&#39;</span><span class="p">)</span>
  <span class="nx">ws</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;hello server&#39;</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">ws</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;WEbSocket error &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

<h2 id="solution">Solution</h2>
<p>I tried removing Express, different ports, different prefixes, spent an hour combing the SockJS source code, and finally stumbled upon the solution and felt like a complete idiot.</p>
<p>To get your WebSockets working and remove this error:</p>
<pre><code>failed: Unexpected response code: 200 </code></pre>
<p>Change the following line:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="nx">wsUrl</span> <span class="o">+</span> <span class="s1">&#39;/data&#39;</span><span class="p">)</span>
</pre></div>

<p>to:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="nx">wsUrl</span> <span class="o">+</span> <span class="s1">&#39;/data/websocket&#39;</span><span class="p">)</span>
</pre></div>

<p>... as stated in the documentation that I thought I read thourougly enough. I wanted to bang my head against the wall. Oh well, if this saves someone else time, then I&#39;ll be glad that I least documented it here. Happy coding!</p>
]]></description><link>http://procbits.com/2013/10/09/connecting-to-a-sockjs-server-from-native-html5-websocket</link><guid isPermaLink="true">http://procbits.com/2013/10/09/connecting-to-a-sockjs-server-from-native-html5-websocket</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Sat, 19 Oct 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Getting Started with Ansible on Digital Ocean]]></title><description><![CDATA[<p>Full disclosure: any link to Digital Ocean has a referral code. If you signup to Digital Ocean and purchase anything, I get a little credit for you doing so.</p>
<p>If you have to manage more than one server with common software packages and configuration, you&#39;re going to want a server configuration management tool. Originally, I wrote shell scripts to handle this. However, shell scripts can have problems with error handling. Another benefit of most configuration management tools is that their operations are <a href="http://en.wikipedia.org/wiki/Idempotence">idempotent</a> i.e. you can run any operation more than once and it won&#39;t have any effect. </p>
<p>For the last few months, I&#39;ve read tutorials on <a href="http://en.wikipedia.org/wiki/Puppet_(software)">Puppet</a>, <a href="http://en.wikipedia.org/wiki/Chef_(software)">Chef</a>, and <a href="http://en.wikipedia.org/wiki/Salt_(software)">Salt</a>. I took a liking to Chef, especially the Chef tool <a href="https://github.com/matschaffer/knife-solo">Knife Solo</a>. I finally discovered <a href="http://en.wikipedia.org/wiki/Ansible_(software)">Ansible</a> in the comments of a <a href="http://news.ycombinator.com">Hacker News</a> post about Salt. If you&#39;re having trouble deciding whether you should choose Puppet, Chef, Salt, or Ansible then the eBook <a href="http://devopsu.com/books/taste-test-puppet-chef-salt-stack-ansible.html">Taste Test: Configuration Management Tools Get Tasted!</a> by <a href="http://mattjaynes.com/">Matt Jaynes</a> will help you decide.</p>
<p>Ansible&#39;s primary benefit is that of simplicity and not requiring any software to be installed on the target machine. All you need is SSH enabled. I have two <a href="https://www.digitalocean.com/?refcode=a65fd89c7fd0">Digital Ocean</a> VPS that I need to install software and configure.</p>
<h2 id="assumptions">Assumptions</h2>
<p>You&#39;re running Mac OS X (should work with Linux) and you have Git and Python installed. These instructions are specific to <a href="https://www.digitalocean.com/?refcode=a65fd89c7fd0">Digital Ocean</a> but should work with any remote servers offered by any vendor.</p>
<h2 id="installing-ansible">Installing Ansible</h2>
<p>checkout latest development branch of Ansible:</p>
<pre><code>cd /tmp
git clone git://github.com/ansible/ansible.git
cd ./ansible</code></pre>
<p>if you want a specific version, you can check that out too:</p>
<pre><code>git tag</code></pre>
<p>outputs:</p>
<pre><code>...

0.8
v0.9
v1.0
v1.1
v1.2
v1.2.1
v1.2.2
v1.2.3</code></pre>
<p>to checkout a specific version:</p>
<pre><code>git checkout v1.2.3</code></pre>
<p>or, as stated, if you want the latest, don&#39;t call <code>git checkout</code></p>
<pre><code>sudo make install</code></pre>
<p>according to <a href="https://raymii.org/s/tutorials/Ansible_Deployment_Framework.html">this</a>, you need to install some python Ansible dependencies:</p>
<pre><code>sudo easy_install jinja2 
sudo easy_install pyyaml
sudo easy_install paramiko</code></pre>
<h2 id="configuring-ansible-to-communicate-with-servers">Configuring Ansible to Communicate with Servers</h2>
<p>Let&#39;s assume that you have two servers named with IPs <code>1.2.3.4</code> and <code>4.3.2.1</code>. With Digital Ocean, unfortunately, you&#39;re insecurely emailed the root password to each server. Let&#39;s add our SSH key to each server.</p>
<h3 id="ssh-keys">SSH Keys</h3>
<p>if you don&#39;t have an SSH key, you can generate one really easily:</p>
<pre><code>ssh-keygen -t rsa -C &quot;your_email@somedomain.com&quot;</code></pre>
<p>if you&#39;re running Linux, you can use <code>ssh-copy-id</code> to copy the key the remote servers:</p>
<pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub root@1.2.3.4
ssh-copy-id -i ~/.ssh/id_rsa.pub root@4.3.2.1</code></pre>
<p>if you&#39;re running on OS X, you won&#39;t have <code>ssh-copy-id</code>, here is an alternative:</p>
<pre><code>cat ~/.ssh/id_rsa.pub | ssh root@1.2.3.4 &quot;mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys&quot;
cat ~/.ssh/id_rsa.pub | ssh root@4.3.2.1 &quot;mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</code></pre>
<p>if you get an error about the <code>.ssh</code> directory existing, modify the previous to this:</p>
<pre><code>cat ~/.ssh/id_rsa.pub | ssh root@1.2.3.4 &quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot;
cat ~/.ssh/id_rsa.pub | ssh root@4.3.2.1 &quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot; </code></pre>
<h3 id="ansible-hosts-file">Ansible Hosts File</h3>
<p>You must create a file that tells Ansible which servers to connect to:</p>
<pre><code>touch ~/ansible_hosts</code></pre>
<p>edit <code>~/ansible_hosts</code>:</p>
<pre><code>[databases]
1.2.3.4
4.3.2.1</code></pre>
<p>you can optionally add the port if you connect to your servers using another port:</p>
<pre><code>[databases]
1.2.3.4:5555
4.3.2.1:22</code></pre>
<p>add the following to the end of your shell resource file <code>~/.bashrc</code>, <code>~/.bash_profile</code>, or <code>~/.zshrc</code> (if you use zsh):</p>
<pre><code>export ANSIBLE_HOSTS=~/ansible_hosts</code></pre>
<p>load the changes in your current shell:</p>
<pre><code>source ~/.bashrc</code></pre>
<h2 id="test-ansible">Test Ansible</h2>
<pre><code>ansible all -m ping</code></pre>
<p>if you get the following errors:</p>
<pre><code>1.2.3.4 | FAILED =&gt; could not create temporary directory: SSH exited with return code 255
4.3.2.1 | FAILED =&gt; could not create temporary directory: SSH exited with return code 255</code></pre>
<p>or:</p>
<pre><code>1.2.3.4 | FAILED =&gt; Authentication or permission failure.  In some cases, you may have been able to authenticate and did not have permissions on the remote directory. Consider changing the remote temp path in ansible.cfg to a path rooted in &quot;/tmp&quot;. Failed command was: mkdir -p $HOME/.ansible/tmp/ansible-1378609938.37-242553567200892 &amp;&amp; chmod a+rx $HOME/.ansible/tmp/ansible-1378609938.37-242553567200892 &amp;&amp; echo $HOME/.ansible/tmp/ansible-1378609938.37-242553567200892, exited with result 255
4.3.2.1 | FAILED =&gt; Authentication or permission failure.  In some cases, you may have been able to authenticate and did not have permissions on the remote directory. Consider changing the remote temp path in ansible.cfg to a path rooted in &quot;/tmp&quot;. Failed command was: mkdir -p $HOME/.ansible/tmp/ansible-1378609938.37-89444589247915 &amp;&amp; chmod a+rx $HOME/.ansible/tmp/ansible-1378609938.37-89444589247915 &amp;&amp; echo $HOME/.ansible/tmp/ansible-1378609938.37-89444589247915, exited with result 255</code></pre>
<p>it&#39;s because we didn&#39;t specify that we want to connect with the <code>root</code> user. Generally, it&#39;s considered a bad idea to connect to SSH with the <code>root</code> user, but that&#39;s how <a href="https://www.digitalocean.com/?refcode=a65fd89c7fd0">Digital Ocean</a> servers are configured out of the box.</p>
<p>you can modify your <code>ANSIBLE_HOSTS</code> file:</p>
<pre><code>[databases]
1.2.3.4 ansible_connection=ssh  ansible_ssh_user=root
4.3.2.1 ansible_connection=ssh  ansible_ssh_user=root</code></pre>
<p>or you can also do:</p>
<pre><code>ansible all -m ping -u root</code></pre>
<p>expected output:</p>
<pre><code>1.2.3.4 | success &gt;&gt; {
    &quot;changed&quot;: false, 
    &quot;ping&quot;: &quot;pong&quot;
}

4.3.2.1 | success &gt;&gt; {
    &quot;changed&quot;: false, 
    &quot;ping&quot;: &quot;pong&quot;
}</code></pre>
<p>which indicates it was a success.</p>
<p>Further reading: <a href="http://www.ansibleworks.com/docs/">http://www.ansibleworks.com/docs/</a> In a future article, I&#39;ll discuss <a href="http://www.ansibleworks.com/docs/playbooks.html">playbooks</a>.</p>
]]></description><link>http://procbits.com/2013/09/08/getting-started-with-ansible-digital-ocean</link><guid isPermaLink="true">http://procbits.com/2013/09/08/getting-started-with-ansible-digital-ocean</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Sun, 08 Sep 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Generating a Bitcoin Address with JavaScript]]></title><description><![CDATA[<script src="/media/2013/08/bitcoinjs-min.js"></script>

<p>If you&#39;re not familiar with Bitcoin, Bitcoin is essentially a P2P currency that has <a href="http://blockchain.info/charts/market-price">increased an order of magnitude in value within the last year</a>. This <a href="http://www.youtube.com/watch?v=Um63OQz3bjo">video</a> does a good job of explaining it. There are a number of libraries to work with Bitcoin in some of the most popular languages: <a href="https://github.com/MatthewLM/cbitcoin">C</a>, <a href="https://code.google.com/p/bitcoinj/">Java</a>, <a href="https://code.google.com/p/bitcoinsharp/">C#</a>, <a href="https://github.com/lian/bitcoin-ruby">Ruby</a>, <a href="https://github.com/laanwj/bitcoin-python">Python</a>, <a href="https://github.com/piotrnar/gocoin">Go</a>, and <a href="https://github.com/bitcoinjs/bitcoinjs-lib">JavaScript</a>. This article will focus exclusively on the JavaScript library.</p>
<p><strong>Disclaimer:</strong> I am not a cryptographer and any such cryptography advice or implementations should be accepted as academic experimentation and not crypto best practices.</p>
<h2 id="random-number-generation">Random Number Generation</h2>
<p>I&#39;d be remiss if I didn&#39;t mention anything about random number generation. Random number generation is the basis of most cryptography and Bitcoin. Your Bitcoin addresses are only as secure as your random number generator. A random number generator that is said to be cryptographically secure if it is good enough to use for cryptography in that there is enough <a href="http://en.wikipedia.org/wiki/Entropy">entropy</a> for a person to predict the number generator. <code>Math.random()</code> is not cryptographically secure. This is because <code>Math.random()</code> is predictable. If it&#39;s predictable, an attacker could figure out your private key from your public key. The implications of someone else knowing your private key means that they can also spend your Bitcoins.</p>
<p>At the time of this writing, the predominant <a href="">JavaScript Bitcoin library</a> uses <a href="https://code.google.com/p/crypto-js/">CryptoJS</a> which surprisingly uses <code>Math.random()</code>. This article shows how you can use the up and coming <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues"><code>window.crytpo</code> standard</a> or the <a href="http://bitwiseshiftleft.github.io/sjcl/">Stanford JavaScript Crypto Library</a></p>
<p>further reading:</p>
<ul>
<li><a href="http://nakedsecurity.sophos.com/2013/07/09/anatomy-of-a-pseudorandom-number-generator-visualising-cryptocats-buggy-prng/">Anatomy of a pseudorandom number generator - Visualizing Cryptocat&#39;s buggy PRNG</a></li>
<li><a href="http://crypto.stackexchange.com/questions/394/what-tests-can-i-do-to-ensure-my-prng-is-working-correctly">What tests can I do to ensure my PRNG is working correctly?</a></li>
<li><a href="http://cacr.uwaterloo.ca/hac/about/chap5.pdf">Handbook of Applied Cryptography - Chapter 5: Pseudorandom Bits and Sequences</a></li>
<li><a href="https://bitcointalk.org/index.php?topic=271831.0">Bitcoin Talk: Android Key Rotation</a></li>
<li><a href="https://bitcointalk.org/index.php?topic=271486.0/">Bitcoin Talk: Bad Signatures leading to 55.82 BTC theft</a></li>
<li><a href="http://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html">Android Developers: Some SecureRandom Thoughts</a></li>
<li><a href="http://arstechnica.com/security/2013/08/all-android-created-bitcoin-wallets-vulnerable-to-theft/">All Android-created Bitcoin wallets vulnerable to theft</a></li>
<li><a href="http://arstechnica.com/security/2013/08/google-confirms-critical-android-crypto-flaw-used-in-5700-bitcoin-heist/">Google confirms critical Android crypto flaw used in $5,700 Bitcoin heist</a></li>
<li><a href="http://armoredbarista.blogspot.ch/2013/03/randomly-failed-weaknesses-in-java.html">Randomly failed! Weaknesses in Java Pseudo Random Number Generators</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues">window.crypto.getRandomValues()</a></li>
</ul>
<h2 id="getting-started">Getting Started</h2>
<p>You&#39;re going to want to use the <a href="https://raw.github.com/bitcoinjs/bitcoinjs-lib/master/build/bitcoinjs-min.js">latest BitcoinJS client lib</a>. It&#39;s pretty outdated though. There are some more recent forks: <a href="https://github.com/bitfloor/bitcoinjs-lib">1</a>, <a href="https://github.com/twistandshout/bitcoinjs-lib">2</a>, and the one that <a href="https://github.com/DimeJet/bitcoinjs-lib">I will eventually maintain</a>. For now, use the outdated one, from BitcoinJS.</p>
<p>I have included the library on this page. Just open up your Chrome Console or Firefox Console and start typing along.</p>
<h2 id="bitcoin-keys-addresses-formats">Bitcoin Keys, Addresses, &amp; Formats</h2>
<p>Bitcoin derives its security from the public-key crypto scheme <a href="http://en.wikipedia.org/wiki/Elliptic_curve_cryptography">Elliptic Curve Cryptography (ECC)</a>. So why did the designer of Bitcoin, <a href="https://en.bitcoin.it/wiki/Satoshi_Nakamoto">Satoshi Nakamoto</a>, decide to use ECC over the prevalent RSA crypto scheme? The primary benefit is the key size. According to the <a href="http://en.wikipedia.org/wiki/Elliptic_curve_cryptography">Wikipedia article on ECC</a>, &quot;a 256-bit ECC public key should provide comparable security to a 3072-bit RSA public key&quot;.</p>
<p>The Elliptical Curve Cryptography <a href="http://www.secg.org/collateral/sec1_final.pdf">spec 2.2.1</a> states that the cryptography is governed by the equation:</p>
<mjax>
  $$ y^2 = (x^3 + ax + b) \bmod p $$
</mjax>


<p>The entire Elliptic curve domain is a sextuple, <a href="http://www.secg.org/collateral/sec1_final.pdf">spec 3.1.1</a>:</p>
<mjax>
  $$  T = (p, a, b, G, n, h) $$
</mjax>


<p>The precise details are out of scope for this article, read the spec for more info. Bitcoin uses the <a href="http://www.secg.org/collateral/sec2_final.pdf">secp256k1 (info on 2.7.1)</a> implementation, which uses <a href="http://en.wikipedia.org/wiki/Neal_Koblitz">Koblitz curves</a>.</p>
<p>The sextuple parameters for secpk256k1 are:</p>
<ul>
<li><strong>p</strong>: FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F</li>
<li><strong>a</strong>: 0</li>
<li><strong>b</strong>: 7</li>
<li><strong>G</strong> (compressed): 02 79BE667E F9DCBBAC 55A06295 CE870B07 029BFCDB 2DCE28D9 59F2815B 16F81798</li>
<li><strong>G</strong> (uncompressed): 04 79BE667E F9DCBBAC 55A06295 CE870B07 029BFCDB 2DCE28D9 59F2815B 16F81798 483ADA77 26A3C465 5DA4FBFC 0E1108A8 FD17B448 A6855419 9C47D08F FB10D4B8</li>
<li><strong>n</strong>: FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141</li>
<li><strong>h</strong>: 1</li>
</ul>
<p>thus reducing the elliptic curve equation to:</p>
<mjax>
    $$ y^2 = (x^3 + 7) \bmod p $$
</mjax>


<p>you really don&#39;t need to understand much of this. I mainly presented this material for academic purposes.</p>
<h3 id="private-keys">Private Keys</h3>
<p>Private keys are what allows you to spend your coins. A private key, <code>d</code> is any random number between <code>1</code> and <code>n - 1</code>. According to the <a href="http://www.secg.org/collateral/sec1_final.pdf">spec (3.2.1)</a>: &quot;an elliptic
curve key pair <code>(d, Q)</code> associated with <code>T</code> consists of an elliptic curve secret key <code>d</code> which is an integer in the interval <code>[1, n - 1]</code>, and an elliptic curve public key <mjax>$ Q = (x_Q, y_Q) $</mjax> which is the point <mjax>$ Q = dG $</mjax>.</p>
<p>You&#39;ll notice that we generate 32 random values. And <code>n</code> does not have a maximum of <mjax>$ 2^{256} - 1 $</mjax>, so it&#39;s theoretically possible to generate a key larger than the standard dictates. However, in practice, you really don&#39;t have to worry about it.</p>
<p>let&#39;s generate a private key:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">randArr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="c1">//create a typed array of 32 bytes (256 bits)</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">crypto</span><span class="p">.</span><span class="nx">getRandomValues</span><span class="p">(</span><span class="nx">randArr</span><span class="p">)</span> <span class="c1">//populate array with cryptographically secure random numbers</span>

<span class="c1">//some Bitcoin and Crypto methods don&#39;t like Uint8Array for input. They expect regular JS arrays.</span>
<span class="kd">var</span> <span class="nx">privateKeyBytes</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">randArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span>
  <span class="nx">privateKeyBytes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">randArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>

<span class="c1">//if you want to follow the step-by-step results in this article, comment the </span>
<span class="c1">//previous code and uncomment the following</span>
<span class="c1">//var privateKeyBytes = Crypto.util.hexToBytes(&quot;1184CD2CDD640CA42CFC3A091C51D549B2F016D454B2774019C2B2D2E08529FD&quot;)</span>

<span class="c1">//hex string of our private key</span>
<span class="kd">var</span> <span class="nx">privateKeyHex</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">bytesToHex</span><span class="p">(</span><span class="nx">privateKeyBytes</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">privateKeyHex</span><span class="p">)</span> <span class="c1">//1184CD2CDD640CA42CFC3A091C51D549B2F016D454B2774019C2B2D2E08529FD</span>
</pre></div>

<p>simple enough, huh? But wait, this doesn&#39;t look like the private keys that you see in your Bitcoin clients. So, what&#39;s going on? Private keys typically use a format called the <a href="https://en.bitcoin.it/wiki/Wallet_import_format">Wallet Import Format (WIF)</a>.</p>
<h4 id="wallet-import-format">Wallet Import Format</h4>
<p>The Wallet Import Format (WIF) is shorter way to encode the private key. It is a <a href="https://en.bitcoin.it/wiki/Base58Check_encoding">base 58</a> encoding of <code>0x80</code> + private key + checksum.</p>
<p>generate a WIF in JS:</p>
<div class="highlight"><pre><span class="c1">//add 0x80 to the front, https://en.bitcoin.it/wiki/List_of_address_prefixes</span>
<span class="kd">var</span> <span class="nx">privateKeyAndVersion</span> <span class="o">=</span> <span class="s2">&quot;80&quot;</span> <span class="o">+</span> <span class="nx">privateKeyHex</span>
<span class="kd">var</span> <span class="nx">firstSHA</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">privateKeyAndVersion</span><span class="p">))</span>
<span class="kd">var</span> <span class="nx">secondSHA</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">firstSHA</span><span class="p">))</span>
<span class="kd">var</span> <span class="nx">checksum</span> <span class="o">=</span> <span class="nx">secondSHA</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">checksum</span><span class="p">)</span> <span class="c1">//&quot;206EC97E&quot;</span>

<span class="c1">//append checksum to end of the private key and version</span>
<span class="kd">var</span> <span class="nx">keyWithChecksum</span> <span class="o">=</span> <span class="nx">privateKeyAndVersion</span> <span class="o">+</span> <span class="nx">checksum</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">keyWithChecksum</span><span class="p">)</span> <span class="c1">//&quot;801184CD2CDD640CA42CFC3A091C51D549B2F016D454B2774019C2B2D2E08529FD206EC97E&quot;</span>

<span class="kd">var</span> <span class="nx">privateKeyWIF</span> <span class="o">=</span> <span class="nx">Bitcoin</span><span class="p">.</span><span class="nx">Base58</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">keyWithChecksum</span><span class="p">))</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">privateKeyWIF</span><span class="p">)</span> <span class="c1">//&quot;5Hx15HFGyep2CfPxsJKe2fXJsCVn5DEiyoeGGF6JZjGbTRnqfiD&quot;</span>
</pre></div>

<p>You can verify that this checks out by looking at either at <a href="http://brainwallet.org">http://brainwallet.org</a> and entering the value of <code>privateKeyHex</code> for the input to <strong>Secret Exponent</strong>.  You can also verify <a href="http://gobittest.appspot.com/PrivateKey">http://gobittest.appspot.com/PrivateKey</a>.</p>
<p>However, there is a much easier method to use:</p>
<div class="highlight"><pre><span class="c1">//recall, &quot;privateKeyBytes&quot; is an array of random numbers</span>
<span class="kd">var</span> <span class="nx">privateKeyWIF</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bitcoin</span><span class="p">.</span><span class="nx">Address</span><span class="p">(</span><span class="nx">privateKeyBytes</span><span class="p">)</span> 
<span class="nx">privateKeyWIF</span><span class="p">.</span><span class="nx">version</span> <span class="o">=</span> <span class="mh">0x80</span> <span class="c1">//0x80 = 128, https://en.bitcoin.it/wiki/List_of_address_prefixes</span>
<span class="nx">privateKeyWIF</span> <span class="o">=</span> <span class="nx">privateKeyWIF</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">privateKeyWIF</span><span class="p">)</span> <span class="c1">//&quot;5Hx15HFGyep2CfPxsJKe2fXJsCVn5DEiyoeGGF6JZjGbTRnqfiD&quot;</span>
</pre></div>

<h3 id="public-keys">Public Keys</h3>
<p>Now that we have our private key, we can generate a public key. Recall that Bitcoin keys use the <a href="http://www.secg.org/collateral/sec2_final.pdf">secp256k1 (info on 2.7.1)</a> parameters. Public keys are generated by:</p>
<mjax>

$$ Q = dG $$

</mjax>

<p>where <mjax>$ Q $</mjax> is the public key, <mjax>$ d $</mjax> is the private key, and <mjax>$ G $</mjax> is a curve parameter. A public key is a 65 byte long value consisting of a leading <code>0x04</code> and X and Y coordinates of 32 bytes each.</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">curve</span> <span class="o">=</span> <span class="nx">getSECCurveByName</span><span class="p">(</span><span class="s2">&quot;secp256k1&quot;</span><span class="p">)</span> <span class="c1">//found in bitcoinjs-lib/src/jsbn/sec.js</span>

<span class="c1">//convert our random array or private key to a Big Integer</span>
<span class="kd">var</span> <span class="nx">privateKeyBN</span> <span class="o">=</span> <span class="nx">BigInteger</span><span class="p">.</span><span class="nx">fromByteArrayUnsigned</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> 

<span class="kd">var</span> <span class="nx">curvePt</span> <span class="o">=</span> <span class="nx">curve</span><span class="p">.</span><span class="nx">getG</span><span class="p">().</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">privateKeyBN</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">curvePt</span><span class="p">.</span><span class="nx">getX</span><span class="p">().</span><span class="nx">toBigInteger</span><span class="p">()</span>
<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">curvePt</span><span class="p">.</span><span class="nx">getY</span><span class="p">().</span><span class="nx">toBigInteger</span><span class="p">()</span>
<span class="kd">var</span> <span class="nx">publicKeyBytes</span> <span class="o">=</span> <span class="nx">integerToBytes</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span> <span class="c1">//integerToBytes is found in bitcoinjs-lib/src/ecdsa.js</span>
<span class="nx">publicKeyBytes</span> <span class="o">=</span> <span class="nx">publicKeyBytes</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">integerToBytes</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span><span class="mi">32</span><span class="p">))</span>
<span class="nx">publicKeyBytes</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mh">0x04</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">publicKeyHex</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">bytesToHex</span><span class="p">(</span><span class="nx">publicKeyBytes</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">publicKeyHex</span><span class="p">)</span>
<span class="cm">/* output:</span>
<span class="cm">04d0988bfa799f7d7ef9ab3de97ef481cd0f75d2367ad456607647edde665d6f6</span>
<span class="cm">fbdd594388756a7beaf73b4822bc22d36e9bda7db82df2b8b623673eefc0b7495</span>
<span class="cm">*/</span>
</pre></div>

<p>this output can be verified with <a href="http://brainwallet.org">http://brainwallet.org</a>.</p>
<h4 id="compressed-keys">Compressed Keys</h4>
<p>You may have heard of Compressed keys. An excellent <a href="http://bitcoin.stackexchange.com/questions/3059/what-is-a-compressed-bitcoin-key">answer on the Bitcoin Stack Exchange</a> explains the differences:</p>
<blockquote>
<p>A compressed key is just a way of storing a public key in fewer bytes (33 instead of 65). There are no compatibility or security issues because they are precisely the same keys, just stored in a different way. The original Bitcoin software didn&#39;t use compressed keys only because their use was poorly documented in OpenSSL. They have no disadvantages other than that a little bit of additional computation is needed before they can be used to validate a signature.</p>
<p>If you think of a public key as a point somewhere along a giant U, an uncompressed key is the X and Y coordinates of the point. A compressed key is how high up on the U the point is along with a single bit indicating whether it&#39;s on the left or right side. As you can visualize, they both encode precisely the same thing, but the compressed form requires half as much space plus one bit. (Of course, they&#39;re really points on elliptic curve secp256k1, but the concept is the same.)</p>
<p>-- <cite>David Schwartz</cite></p>
</blockquote>
<p>There is little reason to use uncompressed keys. Let&#39;s generate a compressed public key:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">publicKeyBytesCompressed</span> <span class="o">=</span> <span class="nx">integerToBytes</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span> <span class="c1">//x from above</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">isEven</span><span class="p">())</span>
  <span class="nx">publicKeyBytesCompressed</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mh">0x02</span><span class="p">)</span>
<span class="k">else</span>
  <span class="nx">publicKeyBytesCompressed</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mh">0x03</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">publicKeyHexCompressed</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">bytesToHex</span><span class="p">(</span><span class="nx">publicKeyBytesCompressed</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">publicKeyHexCompressed</span><span class="p">)</span>
<span class="cm">/* output:</span>
<span class="cm">03d0988bfa799f7d7ef9ab3de97ef481cd0f75d2367ad456607647edde665d6f6f</span>
<span class="cm">*/</span>
</pre></div>

<p>You can see that this matches up to <a href="http://brainwallet.org">http://brainwallet.org</a> when <strong>Compressed</strong> is clicked.</p>
<p>It&#39;s possible to do all of this in many shorter steps:</p>
<div class="highlight"><pre><span class="c1">//privateKeyBytes is the private key array from the top</span>
<span class="kd">var</span> <span class="nx">eckey</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bitcoin</span><span class="p">.</span><span class="nx">ECKey</span><span class="p">(</span><span class="nx">privateKeyBytes</span><span class="p">)</span> 
<span class="kd">var</span> <span class="nx">publicKeyHex</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">bytesToHex</span><span class="p">(</span><span class="nx">eckey</span><span class="p">.</span><span class="nx">getPub</span><span class="p">())</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">publicKeyHex</span><span class="p">)</span>
<span class="cm">/* output:</span>
<span class="cm">04d0988bfa799f7d7ef9ab3de97ef481cd0f75d2367ad456607647edde665d6f6</span>
<span class="cm">fbdd594388756a7beaf73b4822bc22d36e9bda7db82df2b8b623673eefc0b7495</span>
<span class="cm">*/</span>

<span class="nx">eckey</span><span class="p">.</span><span class="nx">compressed</span> <span class="o">=</span> <span class="kc">true</span>
<span class="kd">var</span> <span class="nx">publicKeyHexCompressed</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">bytesToHex</span><span class="p">(</span><span class="nx">eckey</span><span class="p">.</span><span class="nx">getPub</span><span class="p">())</span>
</pre></div>

<h4 id="compressed-private-keys">Compressed Private Keys</h4>
<p>You may have noticed that when you toggle back and forth between <strong>Compressed</strong> and <strong>Uncompressed</strong> on <a href="http://brainwallet.org">http://brainwallet.org</a> that the Private Key changes as well. So, if you import a private key into your wallet, which public key will it use? Another <a href="http://bitcoin.stackexchange.com/questions/7299/when-importing-private-keys-will-compressed-or-uncompressed-format-be-used">good answer on Bitcoin Stack Exchange</a> on how to deal with this:</p>
<blockquote>
<p>...
Thus, in order to support both, we must remember for each public/private keypair whether the normal or compressed encoding is to be used. As you point out, we also need this information when importing a private key. To do so, the &quot;Wallet Import Format&quot; for private keys (the base58 form, typically starting with a &#39;5&#39;), was extended. If the public key/address for a particular private key are to be derived from the compressed encoding of the public key, the private key gets an extra 0x01 byte at the end, resulting in a base58 form that starts with &#39;K&#39; or &#39;L&#39;.</p>
<p>So to answer your question: when importing a private key into the reference client, it will use the normal encoding for public keys if the &#39;5&#39; format was used for the private key, and the compressed encoding if the &#39;K&#39;/&#39;L&#39; format was used. It doesn&#39;t make sense to try to convert one to the other: the client must use the same encoding as was used when generating the address, or the address won&#39;t match. Unfortunately, quite a lot of software doesn&#39;t support compressed public keys yet (which is a pity, as they save block chain space).</p>
<p>-- <cite>Pieter Wuille</cite></p>
</blockquote>
<p>let&#39;s generate our private compressed key:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">privateKeyBytesCompressed</span> <span class="o">=</span> <span class="nx">privateKeyBytes</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//clone array</span>
<span class="nx">privateKeyBytesCompressed</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mh">0x01</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">privateKeyWIFCompressed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bitcoin</span><span class="p">.</span><span class="nx">Address</span><span class="p">(</span><span class="nx">privateKeyBytesCompressed</span><span class="p">)</span>
<span class="nx">privateKeyWIFCompressed</span><span class="p">.</span><span class="nx">version</span> <span class="o">=</span> <span class="mh">0x80</span>
<span class="nx">privateKeyWIFCompressed</span> <span class="o">=</span> <span class="nx">privateKeyWIFCompressed</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">privateKeyWIFCompressed</span><span class="p">)</span> <span class="c1">//KwomKti1X3tYJUUMb1TGSM2mrZk1wb1aHisUNHCQXTZq5auC2qc3</span>
</pre></div>

<p>Once again, verify it matches <a href="http://brainwallet.org">http://brainwallet.org</a>.</p>
<h3 id="addresses">Addresses</h3>
<p>Bitcoin uses <a href="https://en.bitcoin.it/wiki/Address">addresses</a> as a means to receive coins from someone else. An address is a <a href="https://en.bitcoin.it/wiki/Base58Check_encoding">base58</a> encoded string of a 25 byte binary address. All Bitcoin addresses start with <code>1</code>.  A person can have as many addresses as they&#39;d like. Using more than one address is said to increase anonymity. Private keys give you access to spend money associated with an address.</p>
<p>The address is generated like the following:</p>
<blockquote>
<p>Version = 1 byte of 0 (zero); on the test network, this is 1 byte of 111</p>
<p>Key hash = Version concatenated with RIPEMD-160(SHA-256(public key))</p>
<p>Checksum = 1st 4 bytes of SHA-256(SHA-256(Key hash))</p>
<p>Bitcoin Address = Base58Encode(Key hash concatenated with Checksum)</p>
<p>-- <cite><a href="https://en.bitcoin.it/wiki/Protocol_specification#Addresses">Bitcoin Wiki: Addresses</a></cite> </p>
</blockquote>
<p>Compressed, uncompressed, zomg... yes, there are <strong>two addresses</strong> associated with each ECC private key. The procedure is exactly the same:</p>
<div class="highlight"><pre><span class="c1">//could use publicKeyBytesCompressed as well</span>
<span class="kd">var</span> <span class="nx">hash160</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">RIPEMD160</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">(</span><span class="nx">publicKeyBytes</span><span class="p">)))</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hash160</span><span class="p">)</span> <span class="c1">//&quot;3c176e659bea0f29a3e9bf7880c112b1b31b4dc8&quot;</span>

<span class="kd">var</span> <span class="nx">version</span> <span class="o">=</span> <span class="mh">0x00</span> <span class="c1">//if using testnet, would use 0x6F or 111.</span>
<span class="kd">var</span> <span class="nx">hashAndBytes</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">hash160</span><span class="p">)</span>
<span class="nx">hashAndBytes</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">version</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">doubleSHA</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">(</span><span class="nx">hashAndBytes</span><span class="p">)))</span>
<span class="kd">var</span> <span class="nx">addressChecksum</span> <span class="o">=</span> <span class="nx">doubleSHA</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">addressChecksum</span><span class="p">)</span> <span class="c1">//26268187</span>

<span class="kd">var</span> <span class="nx">unencodedAddress</span> <span class="o">=</span> <span class="s2">&quot;00&quot;</span> <span class="o">+</span> <span class="nx">hash160</span> <span class="o">+</span> <span class="nx">addressChecksum</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">unencodedAddress</span><span class="p">)</span>
<span class="cm">/* output</span>
<span class="cm">  003c176e659bea0f29a3e9bf7880c112b1b31b4dc826268187</span>
<span class="cm">*/</span>

<span class="kd">var</span> <span class="nx">address</span> <span class="o">=</span> <span class="nx">Bitcoin</span><span class="p">.</span><span class="nx">Base58</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">unencodedAddress</span><span class="p">))</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="c1">//16UjcYNBG9GTK4uq2f7yYEbuifqCzoLMGS</span>
</pre></div>

<p>even easier...</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bitcoin</span><span class="p">.</span><span class="nx">Address</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">hash160</span><span class="p">))</span>
<span class="nx">address</span><span class="p">.</span><span class="nx">version</span> <span class="o">=</span> <span class="mh">0x00</span> <span class="c1">//testnet would be 0x6F</span>
<span class="nx">address</span> <span class="o">=</span> <span class="nx">address</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</pre></div>

<p>ok, the easiest of all...</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">address</span> <span class="o">=</span> <span class="nx">eckey</span><span class="p">.</span><span class="nx">getBicoinAddress</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span> <span class="c1">//&quot;eckey&quot; from above</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="c1">////16UjcYNBG9GTK4uq2f7yYEbuifqCzoLMGS</span>

<span class="c1">//you must generate a new one if you already called getBitcoinAddress() for the</span>
<span class="c1">//address representing the uncompressed version</span>
<span class="kd">var</span> <span class="nx">eckey2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bitcoin</span><span class="p">.</span><span class="nx">ECKey</span><span class="p">(</span><span class="nx">privateKeyBytes</span><span class="p">)</span>
<span class="nx">eckey2</span><span class="p">.</span><span class="nx">compressed</span> <span class="o">=</span> <span class="kc">true</span>
<span class="kd">var</span> <span class="nx">addressForCompressed</span> <span class="o">=</span> <span class="nx">eckey2</span><span class="p">.</span><span class="nx">getBitcoinAddress</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">addressForCompressed</span><span class="p">)</span> <span class="c1">//1FkKMsKNJqWSDvTvETqcCeHcUQQ64kSC6s</span>
</pre></div>

<h3 id="double-hashing">Double Hashing</h3>
<p>OK, you&#39;ve probably noticed it a lot. Once again, I&#39;m going to defer to the internets and the peeps smarter than me:</p>
<p>From: <a href="http://bitcoin.stackexchange.com/questions/9202/why-does-bitcoin-use-two-hash-functions-sha-256-and-ripemd-160-to-create-an-ad">Why does Bitcoin use two hash functions (SHA-256 and RIPEMD-160) to create an address?</a></p>
<blockquote>
<p>RIPEMD was used because it produces the shortest hashes whose uniqueness is still sufficiently assured. This allows Bitcoin addresses to be shorter.</p>
<p>SHA256 is used as well because Bitcoin&#39;s use of a hash of a public key might create unique weaknesses due to unexpected interactions between RIPEMD and ECDSA (the public key signature algorithm). Interposing an additional and very different hash operation between RIPEMD and ECDSA makes it almost inconceivable that there might be a way to find address collisions that is significantly easier than brute force trying a large number of secret keys.</p>
<p>Essentially, it was a belt and suspenders approach. Bitcoin had to do something unique and rather than have to hope they got it exactly right, they overdesigned it.</p>
<p>-- <cite>David Schwartz</cite></p>
</blockquote>
<p>and on the SHA256(SHA256(input)):</p>
<blockquote>
<p>So why does he hash twice? I suspect it&#39;s in order to prevent length-extension attacks.</p>
<p>SHA-2, like all Merkle-Damgard hashes suffers from a property called &quot;length-extension&quot;. This allows an attacker who knows H(x) to calculate H(x||y) without knowing x. This is usually not a problem, but there are some uses where it totally breaks the security. The most relevant example is using H(k||m) as MAC, where an attacker can easily calculate a MAC for m||m&#39;. I don&#39;t think Bitcoin ever uses hashes in a way that would suffer from length extensions, but I guess Satoshi went with the safe choice of preventing it everywhere.</p>
<p>To avoid this property, Ferguson and Schneier suggested using SHA256d = SHA256(SHA256(x)) which avoids length-extension attacks. This construction has some minor weaknesses (not relevant to bitcoin), so I wouldn&#39;t recommend it for new protocols, and would use HMAC with constant key, or truncated SHA512 instead.</p>
<p>Answered by CodesInChaos</p>
</blockquote>
<h2 id="summary">Summary</h2>
<p>Compressed keys are the preferred format now. Let&#39;s do this in one quick JS snippet to make everything stupidly simple and compatible with pretty much every Bitcoin client:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">randArr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span> <span class="c1">//create a typed array of 32 bytes (256 bits)</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">crypto</span><span class="p">.</span><span class="nx">getRandomValues</span><span class="p">(</span><span class="nx">randArr</span><span class="p">)</span> <span class="c1">//populate array with cryptographically secure random numbers</span>

<span class="c1">//some Bitcoin and Crypto methods don&#39;t like Uint8Array for input. They expect regular JS arrays.</span>
<span class="kd">var</span> <span class="nx">privateKeyBytes</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">randArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span>
  <span class="nx">privateKeyBytes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">randArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>

<span class="kd">var</span> <span class="nx">eckey</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bitcoin</span><span class="p">.</span><span class="nx">ECKey</span><span class="p">(</span><span class="nx">privateKeyBytes</span><span class="p">)</span>
<span class="nx">eckey</span><span class="p">.</span><span class="nx">compressed</span> <span class="o">=</span> <span class="kc">true</span>
<span class="kd">var</span> <span class="nx">address</span> <span class="o">=</span> <span class="nx">eckey</span><span class="p">.</span><span class="nx">getBitcoinAddress</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span><span class="c1">// 1FkKMsKNJqWSDvTvETqcCeHcUQQ64kSC6s</span>


<span class="kd">var</span> <span class="nx">privateKeyBytesCompressed</span> <span class="o">=</span> <span class="nx">privateKeyBytes</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//clone array</span>
<span class="nx">privateKeyBytesCompressed</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mh">0x01</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">privateKeyWIFCompressed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bitcoin</span><span class="p">.</span><span class="nx">Address</span><span class="p">(</span><span class="nx">privateKeyBytesCompressed</span><span class="p">)</span>
<span class="nx">privateKeyWIFCompressed</span><span class="p">.</span><span class="nx">version</span> <span class="o">=</span> <span class="mh">0x80</span>
<span class="nx">privateKeyWIFCompressed</span> <span class="o">=</span> <span class="nx">privateKeyWIFCompressed</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">privateKeyWIFCompressed</span><span class="p">)</span> <span class="c1">//KwomKti1X3tYJUUMb1TGSM2mrZk1wb1aHisUNHCQXTZq5auC2qc3</span>
</pre></div>

<p>There you have it! <strong>KwomKti1X3tYJUUMb1TGSM2mrZk1wb1aHisUNHCQXTZq5auC2qc3</strong> is your private key in WIF form that allows you to send money for address <strong>1FkKMsKNJqWSDvTvETqcCeHcUQQ64kSC6s</strong>.</p>
<h4 id="addresses-and-keys-from-a-password-or-passphrase">Addresses and Keys from a Password or Passphrase</h4>
<p>You can generate private keys from a passphrase. One method would be to just calculate the double SHA256 hash on the user passphrase and use that as the private key.</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">password</span> <span class="o">=</span> <span class="s2">&quot;there can be only one&quot;</span>
<span class="kd">var</span> <span class="nx">privateKeyHex</span> <span class="o">=</span> <span class="nx">Crytpo</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">SHA256</span><span class="p">(</span><span class="nx">password</span><span class="p">)))</span>
<span class="kd">var</span> <span class="nx">privateKeyBytes</span> <span class="o">=</span> <span class="nx">Crypto</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">hexToBytes</span><span class="p">(</span><span class="nx">privateKeyHex</span><span class="p">)</span>
</pre></div>

<p>further reading:</p>
<ul>
<li><a href="http://www.nsa.gov/business/programs/elliptic_curve.shtml">NSA: The Case for Elliptic Curve Cryptography</a></li>
<li><a href="http://crypto.stackexchange.com/questions/653/basic-explanation-of-elliptic-curve-cryptography">Basic Explanation of Elliptic Curve Cryptography</a></li>
<li><a href="http://en.wikipedia.org/wiki/Elliptic_Curve_DSA">Wikipedia: Elliptic Curve DSA</a></li>
<li><a href="https://engineering.purdue.edu/kak/compsec/NewLectures/Lecture14.pdf">Elliptic Curve Cryptography and Digital Rights Management</a></li>
<li><a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses#How_to_create_Bitcoin_Address">How to create a Bitcoin Address</a></li>
<li><a href="http://bitcoin.stackexchange.com/questions/3609/can-an-sha256-hash-be-used-as-an-ecdsa-private-key">Can a SHA256 hash be used as an ECDSA private key?</a></li>
<li><a href="http://bitcoin.stackexchange.com/questions/1730/what-are-green-addresses">What are Green Addresses?</a></li>
<li><a href="http://crypto.stackexchange.com/questions/1638/compressing-ec-private-keys">Compressing EC Private Keys</a></li>
<li><a href="https://bitcointalk.org/?topic=2699.0">Bitcoin Talk: secp256k1</a></li>
<li><a href="http://bitcoin.stackexchange.com/questions/7683/why-is-it-impossible-to-derive-public-key-from-address">Why is it impossible to derive the public key from the address?</a></li>
<li><a href="http://bitcoin.stackexchange.com/questions/3600/why-are-bitcoin-addresses-hashes-of-public-keys">Why are Bitcoin Addresses Hashes of Public Keys?</a></li>
<li><a href="https://en.bitcoin.it/wiki/List_of_address_prefixes">List of address prefixes</a></li>
</ul>
<p><strong>Credits:</strong> Combing through the <a href="http://brainwallet.org">http://brainwallet.org</a> was a big help.</p>
<p>I started a new project called <a href="https://github.com/cryptocoinjs">CryptoCoinJS</a> to address the shortcomings in the BitcoinJS library. Check it out here: <a href="https://github.com/cryptocoinjs">https://github.com/cryptocoinjs</a></p>
]]></description><link>http://procbits.com/2013/08/27/generating-a-bitcoin-address-with-javascript</link><guid isPermaLink="true">http://procbits.com/2013/08/27/generating-a-bitcoin-address-with-javascript</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Tue, 27 Aug 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[CSS Resets]]></title><description><![CDATA[<p>This is the first of <a href="http://procbits.com/tags/css">many articles</a> related to my adventures with CSS. I haven&#39;t actually really had the need to use CSS for about 6 years. I always had avoided it. When <a href="http://twitter.github.io/bootstrap/">Twitter Bootstrap</a> was released I was pumped because there was a way for developers to just focus on code and ignore the style. Recently, I decide that I&#39;m going to write a cross-platform app using <a href="http://phonegap.com/">Adobe Phonegap</a>. So, I&#39;ll need to get really familiar with CSS3 hardware transitions and styles.</p>
<p>Let&#39;s start with the basics. CSS resets.</p>
<p>Huh? What&#39;s the point?</p>
<p>Each browser renders elements in its own default way. Consider the following HTML:</p>
<div class="highlight"><pre><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;p&gt;</span>Some paragraph<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li&gt;</span>item 1<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>item 2<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</pre></div>

<h4 id="output-">output:</h4>
<iframe src="http://embed.plnkr.co/RRptESb8sbIeWWk4JzXf/preview" ></iframe>

<p>It looks liked you&#39;d expect. </p>
<p>Now, let&#39;s modify it a bit, and add the following style:</p>
<div class="highlight"><pre><span class="o">*</span> <span class="p">{</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<h4 id="output-">output:</h4>
<iframe src="http://embed.plnkr.co/rxRPPHnK9ploDznjhAD5/preview"></iframe>

<p>Notice the item list bullets are gone?</p>
<p>Let&#39;s modify it a bit more:</p>
<div class="highlight"><pre><span class="o">*</span> <span class="p">{</span>
  <span class="k">padding</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
  <span class="k">margin</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<h4 id="output-">output:</h4>
<iframe src="http://embed.plnkr.co/VlVoTlypjSKWo4CGvSSu/preview"></iframe>

<p>Now you&#39;ll notice that the margins are removed.</p>
<p>There is a case to be made against using the universal selector <code>*</code>, and that is that it ruins the margins and padding
of form elements. But it&#39;s definitely a good start to understanding on you can make cross browser HTML look consistent.</p>
<h3 id="css-reset-frameworks">CSS Reset Frameworks</h3>
<ul>
<li><a href="http://necolas.github.io/normalize.css/">Normalize.css</a></li>
<li><a href="http://meyerweb.com/eric/thoughts/2011/01/03/reset-revisited/">Eric Meyer&#39;s Reset</a></li>
</ul>
<h3 id="resources">Resources</h3>
<ul>
<li><a href="http://sixrevisions.com/css/css-tips/css-tip-1-resetting-your-styles-with-css-reset/">http://sixrevisions.com/css/css-tips/css-tip-1-resetting-your-styles-with-css-reset/</a></li>
<li><a href="http://snook.ca/archives/html_and_css/no_css_reset/">http://snook.ca/archives/html_and_css/no_css_reset/</a></li>
<li><a href="https://mondaybynoon.com/why-i-like-and-use-reset-css/">https://mondaybynoon.com/why-i-like-and-use-reset-css/</a></li>
<li><a href="http://stackoverflow.com/questions/99643/css-reset-default-styles-for-common-elements">http://stackoverflow.com/questions/99643/css-reset-default-styles-for-common-elements</a></li>
</ul>
]]></description><link>http://procbits.com/2013/07/13/css-resets</link><guid isPermaLink="true">http://procbits.com/2013/07/13/css-resets</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Fri, 12 Jul 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Client-Side JavaScript Management, Browserify vs Component]]></title><description><![CDATA[<p>I&#39;ve been writing mostly JavaScript for the last 1.5 years; primarily Node.js using server side only. I started working on a big project that required a single-page web app. For my recent client-side work, I&#39;ve been using <a href="http://angularjs.org">AngularJS</a>. </p>
<p>Most of my apps haven&#39;t been large enough to require any client-side JavaScript dependency management; I&#39;ve also been fortunate enough, up to this point, to avoid the <a href="http://requirejs.org/docs/whyamd.html">AMD</a> vs <a href="http://dailyjs.com/2010/10/18/modules/">CommonJS</a> on the client-side.</p>
<p>On the client-side, there are two primary problems with JavaScript packages: </p>
<ol>
<li>Dependency management.</li>
<li>Module composition. With the most frequent styles being: CommonJS and AMD.</li>
</ol>
<p>Because of m ybias towards CommonJS because of Node.js and the fact that I agree with TJ Holowaychuk that <a href="http://tjholowaychuk.com/post/27984551477/components">AMD is ugly</a>, automatically rules out any solution that prefers AMD, namely: <a href="http://requirejs.org/">RequireJS</a>, <a href="http://volojs.org/">Volo</a>, or <a href="http://jamjs.org/">Jam</a>. <a href="http://bowerjs.org">Bower</a> is intriguing because it does a great job of client-side dependency management and it was created by Twitter, so there is a big name backing it. However, Bower doesn&#39;t care if you use AMD or CommonJS. I cared more about using CommonJS in the browser than I did package management. So, it&#39;s preferable to find a solution that does dependency management and CommonJS.</p>
<p>This left me with a choice of <a href="http://browserify.org/">Browserify</a> and <a href="https://github.com/component/component">Component</a>. They are both created by well known members of the Node.js community: <a href="https://github.com/substack">Substack</a> and <a href="https://github.com/visionmedia">TJ Holowaychuk</a> respectively.</p>
<h2 id="browserify">Browserify</h2>
<h3 id="pros">Pros</h3>
<ol>
<li>Can reuse Node.js modules on the client with relative ease. Obviously, there are limits such as modules that use any of the networking or file system API.</li>
<li>You use NPM for installation and dependency management. Isaac (the Node.js benevolent dictator) has <a href="http://esa-matti.suuronen.org/blog/2013/03/22/journey-from-requirejs-to-browserify/#comment-838581508">said that storing pure client-side modules in NPM is OK</a>. </li>
<li>Source maps.</li>
<li>Simple to use. If you&#39;re already using Node.js and NPM, there isn&#39;t much you need to do with Browserify, other than require your code client-side. There is no dependency listing or anything like that, Browserify will traverse your <code>require()</code> statements and include the necessary code.</li>
</ol>
<h3 id="cons">Cons</h3>
<ol>
<li>There is no dependency management. This could be a pro as well if you&#39;re satisfied with NPM for dependency management.</li>
<li>It may feel a bit magical. You can use <code>EventEmitter</code> and other Node.js core modules on the client.</li>
<li>Build step. (A watcher can help this)</li>
<li>Client-side libraries in NPM feels weird and a bit wrong.</li>
<li>NPM dependency graph could get bloated if you include the wrong module client-side. i.e. The same module with different versions.</li>
<li>Documentation is really bad.</li>
<li>Node.js naming conflicts. Getting harder to come up with good names. Fortunately you can just append a <code>.js</code> to give yourself more choices but will probably introduce ambiguity.</li>
</ol>
<h2 id="component">Component</h2>
<h3 id="pros">Pros</h3>
<ol>
<li>Encouragement of simplicity. This could become a bit unwieldy because some Component modules are just a few lines. Your app might need 100&#39;s of components. But again, this could be a big plus.</li>
<li>Github is the de facto repository for storage and retrieval of your components. This makes publishing easy.</li>
<li>Github style naming. i.e. <code>jprichardson/mymodule</code> vs <code>tjholowaychuk/mymodule</code>.</li>
<li>Momentum seems to be increasing.</li>
<li>Flat dependency tree. Only one version of a component allowed, this reduces the amount of client-side JavaScript.</li>
</ol>
<h3 id="cons">Cons</h3>
<ol>
<li>Feels like there is a bit too much ceremony to get up and going if you&#39;re already using NPM. This makes sense given that it supports dependency management though.</li>
<li>Build step.</li>
<li><code>Component</code> is hard to Google. Anytime you Google anything with the search term <code>Component</code>, a lot of unrelated articles come up. Picking such a generic name was a bad idea IMHO. Overtime, this may get better.</li>
<li>HTTP only remotes. You can have private Component repos, but it must support HTTP. I know that this <a href="https://github.com/godmodelabs/contre">https://github.com/godmodelabs/contre</a> can help with that. I really bothers me. I&#39;d like to <code>component install jp@myprivateserver.com/var/lib/git/mymodule.git</code>.</li>
<li>Extra <code>component.json</code> file. I&#39;m being a bit nitpicky here, but managing the version number in two places (assuming you have a package.json) sucks. I understand TJ&#39;s <a href="https://github.com/component/component/wiki/F.A.Q">reason for doing this though</a>.</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>I ultimately chose Browserify. At this point it seems that my main problem to solve is getting some of my JavaScript modules (specific algorithms) on the client. I love NPM and so Browserify feels natural and makes sense. To be fair, it seems that Component&#39;s main goal is to encourage you to write reusable web (or JavaScript) components. This isn&#39;t a problem that I need to solve, especially given that I&#39;m pretty invested in the AngularJS ecosystem and Angular way of doing things. But Component is a pure client-side solution. It may feel like a bit much if you&#39;re already using NPM.</p>
<p>I&#39;m also hoping that <a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules">ES Harmony modules</a> and <a href="http://www.w3.org/TR/2013/WD-components-intro-20130606/">Web Components standard</a> help to solve some of these problems.</p>
<p>Honorable mention: <a href="http://ender.jit.su/">Ender</a>. I have no idea why Ender hasn&#39;t seen a lot of adoption.</p>
<p>More reading:</p>
<ol>
<li><a href="http://www.reddit.com/r/javascript/comments/vc9d9/npm_vs_jam_requirejs_vs_browserify_vs_ender/">http://www.reddit.com/r/javascript/comments/vc9d9/npm_vs_jam_requirejs_vs_browserify_vs_ender/</a></li>
<li><a href="http://stackoverflow.com/questions/15603095/jam-vs-bower-whats-the-difference">http://stackoverflow.com/questions/15603095/jam-vs-bower-whats-the-difference</a></li>
<li><a href="http://yeoman.io/packagemanager.html">http://yeoman.io/packagemanager.html</a></li>
<li><a href="https://github.com/webpack/webpack">https://github.com/webpack/webpack</a></li>
<li><a href="http://kpuputti.github.io/perkele.js/examples/javascript-package-managers/index.html">http://kpuputti.github.io/perkele.js/examples/javascript-package-managers/index.html</a></li>
<li><a href="http://wibblycode.wordpress.com/2013/01/01/the-state-of-javascript-package-management/">http://wibblycode.wordpress.com/2013/01/01/the-state-of-javascript-package-management/</a></li>
<li><a href="https://github.com/medikoo/modules-webmake">https://github.com/medikoo/modules-webmake</a></li>
<li><a href="http://dailyjs.com/2013/01/28/components/">http://dailyjs.com/2013/01/28/components/</a></li>
<li><a href="http://www.forbeslindesay.co.uk/post/44144487088/browserify-vs-component">http://www.forbeslindesay.co.uk/post/44144487088/browserify-vs-component</a></li>
<li><a href="https://github.com/stagas/browserify-vs-component/wiki/Browserify-vs-Component">https://github.com/stagas/browserify-vs-component/wiki/Browserify-vs-Component</a></li>
<li><a href="http://anthonyshort.me/2012/12/building-projects-with-component">http://anthonyshort.me/2012/12/building-projects-with-component</a></li>
<li><a href="http://esa-matti.suuronen.org/blog/2013/03/22/journey-from-requirejs-to-browserify/">http://esa-matti.suuronen.org/blog/2013/03/22/journey-from-requirejs-to-browserify/</a></li>
</ol>
<p><a href="http://requirejs.org/">requirejs</a>:</p>
]]></description><link>http://procbits.com/2013/06/17/client-side-javascript-management-browserify-vs-component</link><guid isPermaLink="true">http://procbits.com/2013/06/17/client-side-javascript-management-browserify-vs-component</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Mon, 17 Jun 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Wordpress Export to Markdown Hosted on Amazon S3]]></title><description><![CDATA[<p>You may have been able to tell, but this blog looks different. Yes, I finally left Wordpress. I converted my Wordpress blog to a static generated Markdown blog. It&#39;s fairly straight forward.</p>
<h2 id="why-">Why?</h2>
<ul>
<li>I hated writing my blog posts in Wordpress. I wanted to write in pure Markdown since I&#39;m such a big <a href="https://github.com/jprichardson">open source advocate</a> and have been using Markdown a lot with Github.</li>
<li>I wanted complete control on the look and the feel.</li>
<li>I hate the idea of maintaining a server for a blog.</li>
</ul>
<h2 id="must-haves-">Must Haves:</h2>
<ul>
<li>Must not break any links. For obvious SEO purposes. That&#39;s why I&#39;m using Amazon S3 over Github.</li>
<li>Must be able to use existing comments. (Disqus handled this beautifully)</li>
<li>Must be able to control the entire look and feel.</li>
</ul>
<h2 id="how-">How?</h2>
<p>It&#39;s pretty straightforward:</p>
<ol>
<li>Installed Pandoc: <a href="http://code.google.com/p/pandoc/downloads/list">http://code.google.com/p/pandoc/downloads/list</a> </li>
<li>Exported my Wordpress blog from a tool that I wrote: <a href="https://github.com/jprichardson/potter-wordpress">https://github.com/jprichardson/potter-wordpress</a></li>
<li>Dumped my comments from Wordpress export and imported them using Disqus import tool. You&#39;ll need to use an XML sanitization tool on the Wordpress exported XML data... I don&#39;t remember what I used, but if you Google for it, I&#39;m sure you can find it. I think I used <code>xmllint</code>.</li>
<li>Followed Amazon tutorial on redirecting www.procbits.com to procbits.com and keep all links in tact.</li>
<li>Wrote my own static blog generator (all the cool kids are doing it), <a href="https://github.com/skywrite/sky">Sky</a>, to actually create the html.</li>
<li>Deployed to S3 using another tool that I wrote (Basin): <a href="https://github.com/skywrite/basin">https://github.com/skywrite/basin</a>.</li>
</ol>
<p>There are still a lot of things to do. But for now, I&#39;m satisfied.</p>
]]></description><link>http://procbits.com/2013/03/02/wordpress-export-to-markdown-hosted-on-amazon-s3</link><guid isPermaLink="true">http://procbits.com/2013/03/02/wordpress-export-to-markdown-hosted-on-amazon-s3</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Sat, 23 Mar 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[BatchFlow: Easily batch process collections sequentially or in parallel in JavaScript/Node.js]]></title><description><![CDATA[<h2 id="why-">Why?</h2>
<p>I really got tired of writing the following patterns over and over
again:</p>
<p><strong>Sequential:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="kd">function</span> <span class="nx">again</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">files</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">files</span><span class="p">[</span><span class="nx">x</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//... do something with data ...</span>
            <span class="nx">again</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Done.&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">again</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</pre></div>

<p>or..</p>
<p><strong>Parallel:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="kd">var</span> <span class="nx">pending</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">files</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">pending</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//... do something with data ....</span>

        <span class="nx">pending</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">pending</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">===</span> <span class="nx">files</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Done.&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span>
</pre></div>

<p>That&#39;s ugly. For more complicated examples it requires a bit more
thinking.</p>
<p>Why don&#39;t I use the wonderful library
<a href="https://github.com/caolan/async/">async</a>? Well, `async` tries to do
way too much. I also suffer from a server case of NIH syndrome. Kidding,
or else I&#39;d rewrite Express.js. Or, am I? Muahahhaa. `async` syntax is
also very ugly and not CoffeeScript friendly.</p>
<h2 id="installation">Installation</h2>
<p><code>npm install batchflow</code></p>
<h2 id="examples">Examples</h2>
<h3 id="arrays">Arrays</h3>
<p>Let&#39;s rewrite the previous sequential example:</p>
<p><strong>Sequential:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">).</span><span class="nx">sequential</span><span class="p">()</span>
<span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//do something with data</span>
        <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//analyze results</span>
<span class="p">});</span>
</pre></div>

<p>How about the parallel example?</p>
<p><strong>Parallel:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">).</span><span class="nx">parallel</span><span class="p">()</span>
<span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//do something with data</span>
        <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span> <span class="c1">//&lt;---- yes, you must still call done in parallel, this way we can know when to trigger `end()`.</span>
    <span class="p">});</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//analyze results</span>
<span class="p">});</span>
</pre></div>

<pre><code>
What&#39;s that, your data is not stored in an array? Oh, you say it&#39;s
stored in an object? That&#39;s OK too...

Objects
-------

**Sequential:**

```javascript
var batch = require(&#39;batchflow&#39;);

var files = {&#39;file1&#39;: &#39;path&#39;.... &#39;filen&#39;: &#39;pathn&#39;}
batch(files).sequential()
.each(function(key, val, done) {
    fs.readFile(val, function(err, data) {
        //do something with data
        done(someResult);
    });
}).end(function(results) {
    //analyze results
});</code></pre>
<p>How about the parallel example? <strong>Parallel:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;file1&#39;</span><span class="o">:</span> <span class="s1">&#39;path&#39;</span><span class="p">....</span> <span class="s1">&#39;filen&#39;</span><span class="o">:</span> <span class="s1">&#39;pathn&#39;</span><span class="p">}</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">).</span><span class="nx">parallel</span><span class="p">()</span>
<span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//do something with data</span>
        <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//analyze results</span>
<span class="p">});</span>
</pre></div>

<h2 id="misc">Misc</h2>
<p>​1. Is `sequential()` or `parallel()` too long? Fine. `series()`
and `seq()` are aliases for `sequential()` and `par()` is an alias
for `parallel()`. 2. You don&#39;t like the fluent API? That&#39;s OK too:</p>
<p>Non-fluent API BatchFlow</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">bf</span> <span class="o">=</span> <span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">);</span>
<span class="nx">bf</span><span class="p">.</span><span class="nx">isSequential</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

<span class="nx">bf</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">bf</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//blah blah</span>
<span class="p">});</span>
</pre></div>

<h2 id="coffeescript">CoffeeScript</h2>
<div class="highlight"><pre><span class="n">batch</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">)</span>
<span class="n">files</span> <span class="o">=</span> <span class="o">[.</span><span class="n">.</span><span class="o">.</span> <span class="n">list</span> <span class="n">of</span> <span class="n">files</span> <span class="o">.</span><span class="n">.</span><span class="o">.]</span>
<span class="n">bf</span> <span class="o">=</span> <span class="n">batch</span><span class="p">(</span><span class="n">files</span><span class="p">)</span><span class="o">.</span><span class="n">seq</span><span class="p">()</span><span class="o">.</span><span class="n">each</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="n">done</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">fs</span><span class="o">.</span><span class="n">readFile</span> <span class="n">file</span><span class="p">,</span> <span class="n">done</span>
<span class="n">bf</span><span class="o">.</span><span class="n">error</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
<span class="n">bf</span><span class="o">.</span><span class="n">end</span> <span class="p">(</span><span class="n">results</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">fr</span><span class="o">.</span><span class="n">toString</span><span class="p">()</span> <span class="k">for</span> <span class="n">fr</span> <span class="k">in</span> <span class="n">results</span>
</pre></div>

<h2 id="error-handling">Error Handling</h2>
<p>What&#39;s that, you want error handling? Well, you might as well call me
Burger King... have it your way.</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;f&#39;</span><span class="o">:</span> <span class="s1">&#39;/tmp/file_DOES_NOT_exist_hopefully&#39;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()};</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">parallel</span><span class="p">().</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//&lt;--- shouldn&#39;t get here</span>
<span class="p">});</span>


<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;/tmp/file_DOES_NOT_exist_hopefully&#39;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()];</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">series</span><span class="p">().</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;err&#39;</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//&lt;--- shouldn&#39;t get here</span>
<span class="p">});</span>
</pre></div>

<p>You can grab the source on
<a href="https://github.com/jprichardson/node-batchflow">Github</a>.</p>
]]></description><link>http://procbits.com/2012/08/14/batchflow-easily-batch-process-collections-sequentially-or-in-parallel-in-javascriptnode-js</link><guid isPermaLink="true">http://procbits.com/2012/08/14/batchflow-easily-batch-process-collections-sequentially-or-in-parallel-in-javascriptnode-js</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Wed, 15 Aug 2012 00:26:33 GMT</pubDate></item><item><title><![CDATA[Like Unix Expect: Automate Command Line Programs in Node.js with Suppose]]></title><description><![CDATA[<p>Have you ever heard of the command line program
<a href="http://en.wikipedia.org/wiki/Expect">expect</a>? Basically, expect allows
you to automate command line programs.
<a href="https://github.com/jprichardson/node-suppose">suppose</a> is a
programmable Node.js module that allows the same behavior.</p>
<p>Why would you do this? Maybe you want to automate a ssh session? Or,
maybe you want to test the external interface of on of your Node.js
command line scripts.</p>
<p>Install: <code>npm install suppose</code></p>
<p>Example:</p>
<div class="highlight"><pre><span class="nx">process</span><span class="p">.</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;/tmp/awesome&#39;</span><span class="p">);</span>
<span class="nx">suppose</span><span class="p">(</span><span class="s1">&#39;npm&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;init&#39;</span><span class="p">])</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;name: (awesome) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;awesome_package\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;version: (0.0.0) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;0.0.1\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;description: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s2">&quot;It&#39;s an awesome package man!\n&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;entry point: (index.js) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;test command: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;npm test\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;git repository: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keywords: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;awesome, cool\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;author: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;JP Richardson\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;license: (BSD) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;MIT\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ok? (yes) &#39;</span> <span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;yes\n&#39;</span><span class="p">)</span>
<span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">code</span><span class="p">){</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">code</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">packageFile</span> <span class="o">=</span> <span class="s1">&#39;/tmp/awesome/package.json&#39;</span><span class="p">;</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">packageFile</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">packageObj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;awesome_package&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">version</span> <span class="o">===</span> <span class="s1">&#39;0.0.1&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">description</span> <span class="o">===</span> <span class="s2">&quot;It&#39;s an awesome package man!&quot;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">main</span> <span class="o">===</span> <span class="s1">&#39;index.js&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">scripts</span><span class="p">.</span><span class="nx">test</span> <span class="o">===</span> <span class="s1">&#39;npm test&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">keywords</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;awesome&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">keywords</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;cool&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">author</span> <span class="o">===</span> <span class="s1">&#39;JP Richardson&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">license</span> <span class="o">===</span> <span class="s1">&#39;MIT&#39;</span><span class="p">);</span>
        <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">});</span>
</pre></div>

<p>Pretty easy, huh? You can grab the source on
<a href="https://github.com/jprichardson/node-suppose">Github</a>.</p>
]]></description><link>http://procbits.com/2012/08/03/like-unix-expect-automate-command-line-programs-in-node-js-with-suppose</link><guid isPermaLink="true">http://procbits.com/2012/08/03/like-unix-expect-automate-command-line-programs-in-node-js-with-suppose</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Fri, 03 Aug 2012 21:09:40 GMT</pubDate></item><item><title><![CDATA[NextFlow: Sane CoffeeScript Flow Control]]></title><description><![CDATA[<p>Take a look at the most prominent JavaScript control flow libraries:
<a href="https://github.com/caolan/async">Async.js</a>,
<a href="https://github.com/creationix/step">Step</a>,
<a href="https://github.com/substack/node-seq">Seq</a>. If you were to use these
libraries in CoffeeScript, your code would be an ugly mess.</p>
<p><strong>Async.js / CoffeeScript</strong></p>
<div class="highlight"><pre><span class="n">async</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;async&#39;</span><span class="p">)</span>

<span class="n">async</span><span class="o">.</span><span class="n">series</span><span class="p">(</span>
  <span class="p">(</span><span class="o">-&gt;</span>
    <span class="c1">#first function</span>
  <span class="p">),</span>
  <span class="p">(</span><span class="o">-&gt;</span>
    <span class="c1">#second function</span>
  <span class="p">)</span>
<span class="p">)</span>
</pre></div>

<p><strong>Step / CoffeeScript</strong></p>
<div class="highlight"><pre><span class="no">Step</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;step&#39;</span><span class="p">)</span>

<span class="no">Step</span><span class="p">(</span>
  <span class="p">(</span><span class="o">-&gt;</span>
    <span class="c1">#first function</span>
  <span class="p">),</span>
  <span class="p">(</span><span class="o">-&gt;</span>
    <span class="c1">#second function</span>
  <span class="p">)</span>
<span class="p">)</span>
</pre></div>

<p><strong>Seq / CoffeeScript</strong></p>
<div class="highlight"><pre><span class="no">Seq</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;seq&#39;</span><span class="p">)</span>

<span class="no">Seq</span><span class="p">()</span><span class="o">.</span><span class="n">seq</span><span class="p">(</span><span class="o">-&gt;</span>
  <span class="c1">#first function</span>
<span class="p">)</span><span class="o">.</span><span class="n">seq</span><span class="p">(</span><span class="o">-&gt;</span>
  <span class="c1">#second function</span>
<span class="p">)</span>
</pre></div>

<p>Yuck. If you&#39;re programming in JavaScript, all of them are very usable
solutions. Also, to be fair, they do a lot more than NextFlow. But
NextFlow looks much nicer with CoffeeScript programs.</p>
<p><strong>How to Install:</strong></p>
<p><code>npm install --production nextflow</code></p>
<p>Can be used in the browser too.</p>
<p>Execute sequentially, calling the `next()` function:</p>
<div class="highlight"><pre><span class="k">next</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;nextflow&#39;</span><span class="p">)</span>

<span class="n">vals</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">flow</span> <span class="o">=</span>
  <span class="mi">1</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="vi">@next</span><span class="p">()</span>
  <span class="mi">2</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
    <span class="vi">@next</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="mi">3</span><span class="p">:</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="vi">@next</span><span class="p">()</span>
  <span class="mi">4</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
    <span class="vi">@next</span><span class="p">()</span>
  <span class="mi">5</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#is 1</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1">#is 2</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1">#is x</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="c1">#is 4</span>

<span class="k">next</span><span class="p">(</span><span class="n">flow</span><span class="p">)</span>
</pre></div>

<p>Call functions by the label:</p>
<div class="highlight"><pre><span class="n">vals</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">flow</span> <span class="o">=</span>
  <span class="n">a1</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="vi">@a2</span><span class="p">()</span>
  <span class="n">a2</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
    <span class="vi">@a3</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="n">a3</span><span class="p">:</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="vi">@a4</span><span class="p">()</span>
  <span class="n">a4</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
    <span class="vi">@a5</span><span class="p">()</span>
  <span class="n">a5</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#is 1</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1">#is 2</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1">#is x</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="c1">#is 4</span>

<span class="k">next</span><span class="p">(</span><span class="n">flow</span><span class="p">)</span>
</pre></div>

<p>Call either `next()` or call the label:</p>
<div class="highlight"><pre><span class="n">vals</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">flow</span> <span class="o">=</span>
  <span class="n">a1</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="vi">@a2</span><span class="p">()</span>
  <span class="n">a2</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
    <span class="vi">@a3</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="n">a3</span><span class="p">:</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
    <span class="vi">@next</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
  <span class="n">a4</span><span class="p">:</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="vi">@a5</span><span class="p">()</span>
  <span class="n">a5</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#is 1</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1">#is 2</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1">#is x</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="c1">#is y</span>

<span class="k">next</span><span class="p">(</span><span class="n">flow</span><span class="p">)</span>
</pre></div>

<p><a href="https://github.com/jprichardson/node-nextflow">NextFlow on Github</a></p>
]]></description><link>http://procbits.com/2012/06/28/nextflow-sane-coffeescript-flow-control</link><guid isPermaLink="true">http://procbits.com/2012/06/28/nextflow-sane-coffeescript-flow-control</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Thu, 28 Jun 2012 18:23:54 GMT</pubDate></item></channel></rss>