<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[procbits]]></title><description><![CDATA[source code snippets and other random musings about software]]></description><link>http://procbits.com</link><generator>NodeJS RSS Module</generator><lastBuildDate>Mon, 17 Jun 2013 21:52:00 GMT</lastBuildDate><atom:link href="http://procbits.com/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Client-Side JavaScript Management, Browserify vs Component]]></title><description><![CDATA[<p>I&#39;ve been writing mostly JavaScript for the last 1.5 years; primarily Node.js using server side only. I started working on a big project that required a single-page web app. For my recent client-side work, I&#39;ve been using <a href="http://angularjs.org">AngularJS</a>. </p>
<p>Most of my apps haven&#39;t been large enough to require any client-side JavaScript dependency management; I&#39;ve also been fortunate enough, up to this point, to avoid the <a href="http://requirejs.org/docs/whyamd.html">AMD</a> vs <a href="http://dailyjs.com/2010/10/18/modules/">CommonJS</a> on the client-side.</p>
<p>On the client-side, there are two primary problems with JavaScript packages: </p>
<ol>
<li>Dependency management.</li>
<li>Module composition. With the most frequent styles being: CommonJS and AMD.</li>
</ol>
<p>Because of m ybias towards CommonJS because of Node.js and the fact that I agree with TJ Holowaychuk that <a href="http://tjholowaychuk.com/post/27984551477/components">AMD is ugly</a>, automatically rules out any solution that prefers AMD, namely: <a href="http://requirejs.org/">RequireJS</a>, <a href="http://volojs.org/">Volo</a>, or <a href="http://jamjs.org/">Jam</a>. <a href="http://bowerjs.org">Bower</a> is intriguing because it does a great job of client-side dependency management and it was created by Twitter, so there is a big name backing it. However, Bower doesn&#39;t care if you use AMD or CommonJS. I cared more about using CommonJS in the browser than I did package management. So, it&#39;s preferable to find a solution that does dependency management and CommonJS.</p>
<p>This left me with a choice of <a href="http://browserify.org/">Browserify</a> and <a href="https://github.com/component/component">Component</a>. They are both created by well known members of the Node.js community: <a href="https://github.com/substack">Substack</a> and <a href="https://github.com/visionmedia">TJ Holowaychuk</a> respectively.</p>
<h2>Browserify</h2>
<h3>Pros</h3>
<ol>
<li>Can reuse Node.js modules on the client with relative ease. Obviously, there are limits such as modules that use any of the networking or file system API.</li>
<li>You use NPM for installation and dependency management. Isaac (the Node.js benevolent dictator) has <a href="http://esa-matti.suuronen.org/blog/2013/03/22/journey-from-requirejs-to-browserify/#comment-838581508">said that storing pure client-side modules in NPM is OK</a>. </li>
<li>Source maps.</li>
<li>Simple to use. If you&#39;re already using Node.js and NPM, there isn&#39;t much you need to do with Browserify, other than require your code client-side. There is no dependency listing or anything like that, Browserify will traverse your <code>require()</code> statements and include the necessary code.</li>
</ol>
<h3>Cons</h3>
<ol>
<li>There is no dependency management. This could be a pro as well if you&#39;re satisfied with NPM for dependency management.</li>
<li>It may feel a bit magical. You can use <code>EventEmitter</code> and other Node.js core modules on the client.</li>
<li>Build step. (A watcher can help this)</li>
<li>Client-side libraries in NPM feels weird and a bit wrong.</li>
<li>NPM dependency graph could get bloated if you include the wrong module client-side. i.e. The same module with different versions.</li>
<li>Documentation is really bad.</li>
<li>Node.js naming conflicts. Getting harder to come up with good names. Fortunately you can just append a <code>.js</code> to give yourself more choices but will probably introduce ambiguity.</li>
</ol>
<h2>Component</h2>
<h3>Pros</h3>
<ol>
<li>Encouragement of simplicity. This could become a bit unwieldy because some Component modules are just a few lines. Your app might need 100&#39;s of components. But again, this could be a big plus.</li>
<li>Github is the de facto repository for storage and retrieval of your components. This makes publishing easy.</li>
<li>Github style naming. i.e. <code>jprichardson/mymodule</code> vs <code>tjholowaychuk/mymodule</code>.</li>
<li>Momentum seems to be increasing.</li>
<li>Flat dependency tree. Only one version of a component allowed, this reduces the amount of client-side JavaScript.</li>
</ol>
<h3>Cons</h3>
<ol>
<li>Feels like there is a bit too much ceremony to get up and going if you&#39;re already using NPM. This makes sense given that it supports dependency management though.</li>
<li>Build step.</li>
<li><code>Component</code> is hard to Google. Anytime you Google anything with the search term <code>Component</code>, a lot of unrelated articles come up. Picking such a generic name was a bad idea IMHO. Overtime, this may get better.</li>
<li>HTTP only remotes. You can have private Component repos, but it must support HTTP. I know that this <a href="https://github.com/godmodelabs/contre">https://github.com/godmodelabs/contre</a> can help with that. I really bothers me. I&#39;d like to <code>component install jp@myprivateserver.com/var/lib/git/mymodule.git</code>.</li>
<li>Extra <code>component.json</code> file. I&#39;m being a bit nitpicky here, but managing the version number in two places (assuming you have a package.json) sucks. I understand TJ&#39;s <a href="https://github.com/component/component/wiki/F.A.Q">reason for doing this though</a>.</li>
</ol>
<h2>Conclusion</h2>
<p>I ultimately chose Browserify. At this point it seems that my main problem to solve is getting some of my JavaScript modules (specific algorithms) on the client. I love NPM and so Browserify feels natural and makes sense. To be fair, it seems that Component&#39;s main goal is to encourage you to write reusable web (or JavaScript) components. This isn&#39;t a problem that I need to solve, especially given that I&#39;m pretty invested in the AngularJS ecosystem and Angular way of doing things. But Component is a pure client-side solution. It may feel like a bit much if you&#39;re already using NPM.</p>
<p>I&#39;m also hoping that <a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules">ES Harmony modules</a> and <a href="http://www.w3.org/TR/2013/WD-components-intro-20130606/">Web Components standard</a> help to solve some of these problems.</p>
<p>Honorable mention: <a href="http://ender.jit.su/">Ender</a>. I have no idea why Ender hasn&#39;t seen a lot of adoption.</p>
<p>More reading:</p>
<ol>
<li><a href="http://www.reddit.com/r/javascript/comments/vc9d9/npm_vs_jam_requirejs_vs_browserify_vs_ender/">http://www.reddit.com/r/javascript/comments/vc9d9/npm_vs_jam_requirejs_vs_browserify_vs_ender/</a></li>
<li><a href="http://stackoverflow.com/questions/15603095/jam-vs-bower-whats-the-difference">http://stackoverflow.com/questions/15603095/jam-vs-bower-whats-the-difference</a></li>
<li><a href="http://yeoman.io/packagemanager.html">http://yeoman.io/packagemanager.html</a></li>
<li><a href="https://github.com/webpack/webpack">https://github.com/webpack/webpack</a></li>
<li><a href="http://kpuputti.github.io/perkele.js/examples/javascript-package-managers/index.html">http://kpuputti.github.io/perkele.js/examples/javascript-package-managers/index.html</a></li>
<li><a href="http://wibblycode.wordpress.com/2013/01/01/the-state-of-javascript-package-management/">http://wibblycode.wordpress.com/2013/01/01/the-state-of-javascript-package-management/</a></li>
<li><a href="https://github.com/medikoo/modules-webmake">https://github.com/medikoo/modules-webmake</a></li>
<li><a href="http://dailyjs.com/2013/01/28/components/">http://dailyjs.com/2013/01/28/components/</a></li>
<li><a href="http://www.forbeslindesay.co.uk/post/44144487088/browserify-vs-component">http://www.forbeslindesay.co.uk/post/44144487088/browserify-vs-component</a></li>
<li><a href="https://github.com/stagas/browserify-vs-component/wiki/Browserify-vs-Component">https://github.com/stagas/browserify-vs-component/wiki/Browserify-vs-Component</a></li>
<li><a href="http://anthonyshort.me/2012/12/building-projects-with-component">http://anthonyshort.me/2012/12/building-projects-with-component</a></li>
<li><a href="http://esa-matti.suuronen.org/blog/2013/03/22/journey-from-requirejs-to-browserify/">http://esa-matti.suuronen.org/blog/2013/03/22/journey-from-requirejs-to-browserify/</a></li>
</ol>
<p><a href="http://requirejs.org/">requirejs</a>:</p>
]]></description><link>http://procbits.com/2013/06/17/client-side-javascript-management-browserify-vs-component</link><guid isPermaLink="true">http://procbits.com/2013/06/17/client-side-javascript-management-browserify-vs-component</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Mon, 17 Jun 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Wordpress Export to Markdown Hosted on Amazon S3]]></title><description><![CDATA[<p>You may have been able to tell, but this blog looks different. Yes, I finally left Wordpress. I converted my Wordpress blog to a static generated Markdown blog. It&#39;s fairly straight forward.</p>
<h2>Why?</h2>
<ul>
<li>I hated writing my blog posts in Wordpress. I wanted to write in pure Markdown since I&#39;m such a big <a href="https://github.com/jprichardson">open source advocate</a> and have been using Markdown a lot with Github.</li>
<li>I wanted complete control on the look and the feel.</li>
<li>I hate the idea of maintaining a server for a blog.</li>
</ul>
<h2>Must Haves:</h2>
<ul>
<li>Must not break any links. For obvious SEO purposes. That&#39;s why I&#39;m using Amazon S3 over Github.</li>
<li>Must be able to use existing comments. (Disqus handled this beautifully)</li>
<li>Must be able to control the entire look and feel.</li>
</ul>
<h2>How?</h2>
<p>It&#39;s pretty straightforward:</p>
<ol>
<li>Installed Pandoc: <a href="http://code.google.com/p/pandoc/downloads/list">http://code.google.com/p/pandoc/downloads/list</a> </li>
<li>Exported my Wordpress blog from a tool that I wrote: <a href="https://github.com/jprichardson/potter-wordpress">https://github.com/jprichardson/potter-wordpress</a></li>
<li>Dumped my comments from Wordpress export and imported them using Disqus import tool. You&#39;ll need to use an XML sanitization tool on the Wordpress exported XML data... I don&#39;t remember what I used, but if you Google for it, I&#39;m sure you can find it. I think I used <code>xmllint</code>.</li>
<li>Followed Amazon tutorial on redirecting www.procbits.com to procbits.com and keep all links in tact.</li>
<li>Wrote my own static blog generator (all the cool kids are doing it), <a href="https://github.com/skywrite/sky">Sky</a>, to actually create the html.</li>
<li>Deployed to S3 using another tool that I wrote (Basin): <a href="https://github.com/skywrite/basin">https://github.com/skywrite/basin</a>.</li>
</ol>
<p>There are still a lot of things to do. But for now, I&#39;m satisfied.</p>
<p>-JP</p>
]]></description><link>http://procbits.com/2013/03/02/wordpress-export-to-markdown-hosted-on-amazon-s3</link><guid isPermaLink="true">http://procbits.com/2013/03/02/wordpress-export-to-markdown-hosted-on-amazon-s3</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Sat, 23 Mar 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[BatchFlow]]></title><description><![CDATA[<h2>Why?</h2>
<p>I really got tired of writing the following patterns over and over
again:</p>
<p><strong>Sequential:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="kd">function</span> <span class="nx">again</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">files</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">files</span><span class="p">[</span><span class="nx">x</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//... do something with data ...</span>
            <span class="nx">again</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Done.&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">again</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</pre></div>

<p>or..</p>
<p><strong>Parallel:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="kd">var</span> <span class="nx">pending</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">files</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">pending</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//... do something with data ....</span>

        <span class="nx">pending</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">pending</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">===</span> <span class="nx">files</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Done.&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span>
</pre></div>

<p>That&#39;s ugly. For more complicated examples it requires a bit more
thinking.</p>
<p>Why don&#39;t I use the wonderful library
<a href="https://github.com/caolan/async/">async</a>? Well, `async` tries to do
way too much. I also suffer from a server case of NIH syndrome. Kidding,
or else I&#39;d rewrite Express.js. Or, am I? Muahahhaa. `async` syntax is
also very ugly and not CoffeeScript friendly.</p>
<h2>Installation</h2>
<p><code>npm install batchflow</code></p>
<h2>Examples</h2>
<h3>Arrays</h3>
<p>Let&#39;s rewrite the previous sequential example:</p>
<p><strong>Sequential:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">).</span><span class="nx">sequential</span><span class="p">()</span>
<span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//do something with data</span>
        <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//analyze results</span>
<span class="p">});</span>
</pre></div>

<p>How about the parallel example?</p>
<p><strong>Parallel:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[...</span> <span class="nx">list</span> <span class="nx">of</span> <span class="nx">files</span> <span class="p">...];</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">).</span><span class="nx">parallel</span><span class="p">()</span>
<span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//do something with data</span>
        <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span> <span class="c1">//&lt;---- yes, you must still call done in parallel, this way we can know when to trigger `end()`.</span>
    <span class="p">});</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//analyze results</span>
<span class="p">});</span>
</pre></div>

<pre><code>
What&#39;s that, your data is not stored in an array? Oh, you say it&#39;s
stored in an object? That&#39;s OK too...

Objects
-------

**Sequential:**

```javascript
var batch = require(&#39;batchflow&#39;);

var files = {&#39;file1&#39;: &#39;path&#39;.... &#39;filen&#39;: &#39;pathn&#39;}
batch(files).sequential()
.each(function(key, val, done) {
    fs.readFile(val, function(err, data) {
        //do something with data
        done(someResult);
    });
}).end(function(results) {
    //analyze results
});</code></pre>
<p>How about the parallel example? <strong>Parallel:</strong></p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;file1&#39;</span><span class="o">:</span> <span class="s1">&#39;path&#39;</span><span class="p">....</span> <span class="s1">&#39;filen&#39;</span><span class="o">:</span> <span class="s1">&#39;pathn&#39;</span><span class="p">}</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">).</span><span class="nx">parallel</span><span class="p">()</span>
<span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//do something with data</span>
        <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//analyze results</span>
<span class="p">});</span>
</pre></div>

<h2>Misc</h2>
<p>​1. Is `sequential()` or `parallel()` too long? Fine. `series()`
and `seq()` are aliases for `sequential()` and `par()` is an alias
for `parallel()`. 2. You don&#39;t like the fluent API? That&#39;s OK too:</p>
<p>Non-fluent API BatchFlow</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">batch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">bf</span> <span class="o">=</span> <span class="nx">batch</span><span class="p">(</span><span class="nx">files</span><span class="p">);</span>
<span class="nx">bf</span><span class="p">.</span><span class="nx">isSequential</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

<span class="nx">bf</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">done</span><span class="p">(</span><span class="nx">someResult</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">bf</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//blah blah</span>
<span class="p">});</span>
</pre></div>

<h2>CoffeeScript</h2>
<div class="highlight"><pre><span class="n">batch</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;batchflow&#39;</span><span class="p">)</span>
<span class="n">files</span> <span class="o">=</span> <span class="o">[.</span><span class="n">.</span><span class="o">.</span> <span class="n">list</span> <span class="n">of</span> <span class="n">files</span> <span class="o">.</span><span class="n">.</span><span class="o">.]</span>
<span class="n">bf</span> <span class="o">=</span> <span class="n">batch</span><span class="p">(</span><span class="n">files</span><span class="p">)</span><span class="o">.</span><span class="n">seq</span><span class="p">()</span><span class="o">.</span><span class="n">each</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="n">done</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">fs</span><span class="o">.</span><span class="n">readFile</span> <span class="n">file</span><span class="p">,</span> <span class="n">done</span>
<span class="n">bf</span><span class="o">.</span><span class="n">error</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
<span class="n">bf</span><span class="o">.</span><span class="n">end</span> <span class="p">(</span><span class="n">results</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">fr</span><span class="o">.</span><span class="n">toString</span><span class="p">()</span> <span class="k">for</span> <span class="n">fr</span> <span class="k">in</span> <span class="n">results</span>
</pre></div>

<h2>Error Handling</h2>
<p>What&#39;s that, you want error handling? Well, you might as well call me
Burger King... have it your way.</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;f&#39;</span><span class="o">:</span> <span class="s1">&#39;/tmp/file_DOES_NOT_exist_hopefully&#39;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()};</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">parallel</span><span class="p">().</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//&lt;--- shouldn&#39;t get here</span>
<span class="p">});</span>


<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;/tmp/file_DOES_NOT_exist_hopefully&#39;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()];</span>
<span class="nx">batch</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">series</span><span class="p">().</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;err&#39;</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">//&lt;--- shouldn&#39;t get here</span>
<span class="p">});</span>
</pre></div>

<p>You can grab the source on
<a href="https://github.com/jprichardson/node-batchflow">Github</a>.</p>
<p>If you use Git with others, you should checkout
<a href="http://gitpilot.com">Gitpilot</a> to make collaboration with Git simple
using a different GUI. We would love your feedback.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a></p>
<p>-JP</p>
]]></description><link>http://procbits.com/2012/08/14/batchflow-easily-batch-process-collections-sequentially-or-in-parallel-in-javascriptnode-js</link><guid isPermaLink="true">http://procbits.com/2012/08/14/batchflow-easily-batch-process-collections-sequentially-or-in-parallel-in-javascriptnode-js</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Tue, 14 Aug 2012 05:00:00 GMT</pubDate></item><item><title><![CDATA[Like Unix Expect]]></title><description><![CDATA[<p>Have you ever heard of the command line program
<a href="http://en.wikipedia.org/wiki/Expect">expect</a>? Basically, expect allows
you to automate command line programs.
<a href="https://github.com/jprichardson/node-suppose">suppose</a> is a
programmable Node.js module that allows the same behavior.</p>
<p>Why would you do this? Maybe you want to automate a ssh session? Or,
maybe you want to test the external interface of on of your Node.js
command line scripts.</p>
<p>Install: <code>npm install suppose</code></p>
<p>Example:</p>
<div class="highlight"><pre><span class="nx">process</span><span class="p">.</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;/tmp/awesome&#39;</span><span class="p">);</span>
<span class="nx">suppose</span><span class="p">(</span><span class="s1">&#39;npm&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;init&#39;</span><span class="p">])</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;name: (awesome) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;awesome_package\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;version: (0.0.0) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;0.0.1\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;description: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s2">&quot;It&#39;s an awesome package man!\n&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;entry point: (index.js) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;test command: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;npm test\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;git repository: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keywords: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;awesome, cool\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;author: &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;JP Richardson\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;license: (BSD) &#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;MIT\n&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ok? (yes) &#39;</span> <span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;yes\n&#39;</span><span class="p">)</span>
<span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">code</span><span class="p">){</span>
    <span class="nx">assert</span><span class="p">(</span><span class="nx">code</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">packageFile</span> <span class="o">=</span> <span class="s1">&#39;/tmp/awesome/package.json&#39;</span><span class="p">;</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">packageFile</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">packageObj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;awesome_package&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">version</span> <span class="o">===</span> <span class="s1">&#39;0.0.1&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">description</span> <span class="o">===</span> <span class="s2">&quot;It&#39;s an awesome package man!&quot;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">main</span> <span class="o">===</span> <span class="s1">&#39;index.js&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">scripts</span><span class="p">.</span><span class="nx">test</span> <span class="o">===</span> <span class="s1">&#39;npm test&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">keywords</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;awesome&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">keywords</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;cool&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">author</span> <span class="o">===</span> <span class="s1">&#39;JP Richardson&#39;</span><span class="p">);</span>
        <span class="nx">assert</span><span class="p">(</span><span class="nx">packageObj</span><span class="p">.</span><span class="nx">license</span> <span class="o">===</span> <span class="s1">&#39;MIT&#39;</span><span class="p">);</span>
        <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">});</span>
</pre></div>

<p>Pretty easy, huh? You can grab the source on
<a href="https://github.com/jprichardson/node-suppose">Github</a>.</p>
<p>If you use Git with others, you should checkout
<a href="http://gitpilot.com">Gitpilot</a> to make collaboration with Git simple
using a different GUI. We would love your feedback.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a></p>
<p>-JP</p>
]]></description><link>http://procbits.com/2012/08/03/like-unix-expect-automate-command-line-programs-in-node-js-with-suppose</link><guid isPermaLink="true">http://procbits.com/2012/08/03/like-unix-expect-automate-command-line-programs-in-node-js-with-suppose</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Fri, 03 Aug 2012 05:00:00 GMT</pubDate></item><item><title><![CDATA[NextFlow]]></title><description><![CDATA[<p>Take a look at the most prominent JavaScript control flow libraries:
<a href="https://github.com/caolan/async">Async.js</a>,
<a href="https://github.com/creationix/step">Step</a>,
<a href="https://github.com/substack/node-seq">Seq</a>. If you were to use these
libraries in CoffeeScript, your code would be an ugly mess.</p>
<p><strong>Async.js / CoffeeScript</strong></p>
<div class="highlight"><pre><span class="n">async</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;async&#39;</span><span class="p">)</span>

<span class="n">async</span><span class="o">.</span><span class="n">series</span><span class="p">(</span>
  <span class="p">(</span><span class="o">-&gt;</span>
    <span class="c1">#first function</span>
  <span class="p">),</span>
  <span class="p">(</span><span class="o">-&gt;</span>
    <span class="c1">#second function</span>
  <span class="p">)</span>
<span class="p">)</span>
</pre></div>

<p><strong>Step / CoffeeScript</strong></p>
<div class="highlight"><pre><span class="no">Step</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;step&#39;</span><span class="p">)</span>

<span class="no">Step</span><span class="p">(</span>
  <span class="p">(</span><span class="o">-&gt;</span>
    <span class="c1">#first function</span>
  <span class="p">),</span>
  <span class="p">(</span><span class="o">-&gt;</span>
    <span class="c1">#second function</span>
  <span class="p">)</span>
<span class="p">)</span>
</pre></div>

<p><strong>Seq / CoffeeScript</strong></p>
<div class="highlight"><pre><span class="no">Seq</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;seq&#39;</span><span class="p">)</span>

<span class="no">Seq</span><span class="p">()</span><span class="o">.</span><span class="n">seq</span><span class="p">(</span><span class="o">-&gt;</span>
  <span class="c1">#first function</span>
<span class="p">)</span><span class="o">.</span><span class="n">seq</span><span class="p">(</span><span class="o">-&gt;</span>
  <span class="c1">#second function</span>
<span class="p">)</span>
</pre></div>

<p>Yuck. If you&#39;re programming in JavaScript, all of them are very usable
solutions. Also, to be fair, they do a lot more than NextFlow. But
NextFlow looks much nicer with CoffeeScript programs.</p>
<p><strong>How to Install:</strong></p>
<p><code>npm install --production nextflow</code></p>
<p>Can be used in the browser too.</p>
<p>Execute sequentially, calling the `next()` function:</p>
<div class="highlight"><pre><span class="k">next</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;nextflow&#39;</span><span class="p">)</span>

<span class="n">vals</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">flow</span> <span class="o">=</span>
  <span class="mi">1</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="vi">@next</span><span class="p">()</span>
  <span class="mi">2</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
    <span class="vi">@next</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="mi">3</span><span class="p">:</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="vi">@next</span><span class="p">()</span>
  <span class="mi">4</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
    <span class="vi">@next</span><span class="p">()</span>
  <span class="mi">5</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#is 1</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1">#is 2</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1">#is x</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="c1">#is 4</span>

<span class="k">next</span><span class="p">(</span><span class="n">flow</span><span class="p">)</span>
</pre></div>

<p>Call functions by the label:</p>
<div class="highlight"><pre><span class="n">vals</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">flow</span> <span class="o">=</span>
  <span class="n">a1</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="vi">@a2</span><span class="p">()</span>
  <span class="n">a2</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
    <span class="vi">@a3</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="n">a3</span><span class="p">:</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="vi">@a4</span><span class="p">()</span>
  <span class="n">a4</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
    <span class="vi">@a5</span><span class="p">()</span>
  <span class="n">a5</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#is 1</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1">#is 2</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1">#is x</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="c1">#is 4</span>

<span class="k">next</span><span class="p">(</span><span class="n">flow</span><span class="p">)</span>
</pre></div>

<p>Call either `next()` or call the label:</p>
<div class="highlight"><pre><span class="n">vals</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">flow</span> <span class="o">=</span>
  <span class="n">a1</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="vi">@a2</span><span class="p">()</span>
  <span class="n">a2</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
    <span class="vi">@a3</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="n">a3</span><span class="p">:</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
    <span class="vi">@next</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
  <span class="n">a4</span><span class="p">:</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">vals</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="vi">@a5</span><span class="p">()</span>
  <span class="n">a5</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#is 1</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1">#is 2</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1">#is x</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="n">vals</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="c1">#is y</span>

<span class="k">next</span><span class="p">(</span><span class="n">flow</span><span class="p">)</span>
</pre></div>

<p><a href="https://github.com/jprichardson/node-nextflow">NextFlow on Github</a></p>
<p>Checkout <a href="http://gitpilot.com">Gitpilot</a>, to become more productive with
Git.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a></p>
<p>-JP</p>
]]></description><link>http://procbits.com/2012/06/28/nextflow-sane-coffeescript-flow-control</link><guid isPermaLink="true">http://procbits.com/2012/06/28/nextflow-sane-coffeescript-flow-control</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Thu, 28 Jun 2012 05:00:00 GMT</pubDate></item><item><title><![CDATA[Thinking Asynchronously in CoffeeScript/JavaScript]]></title><description><![CDATA[<p>Awhile back, I wrote about my new experience in learning Node.js: <a href="http://procbits.com/2011/10/29/a-node-js-experiment-thinking-asynchronously-recursion-calculate-file-size-directory/">A
Node.js Experiment: Thinking Asynchronously, Using Recursion to
Calculate the Total File Size in a
Directory</a>.</p>
<p>Consider this snippet of code:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;JP&#39;</span><span class="p">,</span> <span class="s1">&#39;Chris&#39;</span><span class="p">,</span> <span class="s1">&#39;Leslie&#39;</span><span class="p">];</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">names</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">){</span>
  <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>              
  <span class="p">},</span><span class="mi">10</span><span class="p">);</span>
<span class="p">}</span><span class="err">​</span>
</pre></div>

<p>Equivalent CoffeeScript:</p>
<div class="highlight"><pre><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;JP&#39;</span><span class="p">,</span> <span class="s1">&#39;Chris&#39;</span><span class="p">,</span> <span class="s1">&#39;Leslie&#39;</span><span class="o">]</span>
<span class="k">for</span> <span class="nb">name</span> <span class="k">in</span> <span class="n">names</span>
  <span class="n">setTimeout</span><span class="p">(</span><span class="o">-&gt;</span>
    <span class="n">alert</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</pre></div>

<p>Click
<a href="http://coffeescript.org/#try:names%20%3D%20%5B&#39;JP&#39;%2C%20&#39;Chris&#39;%2C%20&#39;Leslie&#39;%5D%0Afor%20name%20in%20names%0A%20%20setTimeout(-%3E%0A%20%20%20%20alert(name">here</a>%0A%20%20%2C10))
to run it. If you guessed that the loop would alert &quot;Leslie&quot; three
times, then you&#39;d be correct.</p>
<p>The problem is, that before the callback executes, the loop has
completed. Thus callback always has the last value.</p>
<p>How do you solve this problem? You wrap the callback in a closure that
executes immediately.</p>
<p>JavaScript:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;JP&#39;</span><span class="p">,</span> <span class="s1">&#39;Chris&#39;</span><span class="p">,</span> <span class="s1">&#39;Leslie&#39;</span><span class="p">];</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">names</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">){</span>
  <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
  <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
      <span class="nx">alert</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>              
    <span class="p">},</span><span class="mi">10</span><span class="p">);</span>
  <span class="p">})(</span><span class="nx">name</span><span class="p">);</span>
<span class="p">}</span><span class="err">​</span>
</pre></div>

<p>CoffeeScript:</p>
<div class="highlight"><pre><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;JP&#39;</span><span class="p">,</span> <span class="s1">&#39;Chris&#39;</span><span class="p">,</span> <span class="s1">&#39;Leslie&#39;</span><span class="o">]</span>
<span class="k">for</span> <span class="nb">name</span> <span class="k">in</span> <span class="n">names</span>
  <span class="k">do</span> <span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">setTimeout</span><span class="p">(</span><span class="o">-&gt;</span>
      <span class="n">alert</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</pre></div>

<p>Click
<a href="http://coffeescript.org/#try:names%20%3D%20%5B&#39;JP&#39;%2C%20&#39;Chris&#39;%2C%20&#39;Leslie&#39;%5D%0Afor%20name%20in%20names%0A%20%20do%20(name">here</a>%20-%3E%0A%20%20%20%20setTimeout(-%3E%0A%20%20%20%20%20%20alert(name)%0A%20%20%20%20%2C10))
to run it.</p>
<p>These solutions execute the block of code in a parallel manner. Using
the alert&#39;s are not a good indication in showing this behavior. However,
if you were opening files, all of them would be opened approximately
(not exactly) at the same time.</p>
<p>What if you wanted to perform the action in the callback in a serial
manner?</p>
<p>Using the previous simple example, it&#39;d look like this:</p>
<p>JavaScript:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;JP&#39;</span><span class="p">,</span> <span class="s1">&#39;Chris&#39;</span><span class="p">,</span> <span class="s1">&#39;Leslie&#39;</span><span class="p">];</span>
<span class="nx">loop</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
      <span class="nx">alert</span><span class="p">(</span><span class="nx">names</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">names</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="nx">loop</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>       
    <span class="p">},</span><span class="mi">10</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">loop</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</pre></div>

<p>CoffeeScript:</p>
<div class="highlight"><pre><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;JP&#39;</span><span class="p">,</span> <span class="s1">&#39;Chris&#39;</span><span class="p">,</span> <span class="s1">&#39;Leslie&#39;</span><span class="o">]</span><span class="p">;</span>
<span class="n">doloop</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">setTimeout</span><span class="p">(</span><span class="o">-&gt;</span>
    <span class="n">alert</span><span class="p">(</span><span class="n">names</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">names</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span>
      <span class="n">doloop</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>       
  <span class="p">,</span><span class="mi">10</span><span class="p">);</span>
<span class="n">doloop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</pre></div>

<p><a href="http://coffeescript.org/#try:names%20%3D%20%5B&#39;JP&#39;%2C%20&#39;Chris&#39;%2C%20&#39;Leslie&#39;%5D%3B%0Adoloop%20%3D%20(i">Run
it.</a>%20-%3E%0A%20%20setTimeout(-%3E%0A%20%20%20%20alert(names%5Bi%5D)%0A%20%20%20%20if%20i%20%3C%20names.length%20-%201%0A%20%20%20%20%20%20doloop(i%20%2B%201)%20%20%20%20%20%20%20%0A%20%20%2C10)%3B%0Adoloop(0))</p>
<p>If you were doing file processing in the loop, it would be executed
sequentially.</p>
<p>Hopefully this helps you to better understand asynchronous design of
algorithms in JavaScript.</p>
<p><strong>Update:</strong> I forgot about the forEach function that exists in Node.js
and most modern browsers. This function pretty much solves the problem.</p>
<p>Here&#39;s the JavaScript code:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;JP&#39;</span><span class="p">,</span> <span class="s1">&#39;Chris&#39;</span><span class="p">,</span> <span class="s1">&#39;Leslie&#39;</span><span class="p">];</span>
<span class="nx">names</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>              
  <span class="p">},</span><span class="mi">10</span><span class="p">);</span>
<span class="p">}</span><span class="err">​</span><span class="p">);</span>
</pre></div>

<p>Much cleaner. Thanks to <a href="http://www.reddit.com/r/programming/comments/u34ed/thinking_asynchronously_in_coffeescriptjavascript/c4ryifw">smog_alado
[Reddit]</a>
for the reminder.</p>
<p>Checkout <a href="http://gitpilot.com">Gitpilot</a>, a different kind of Git GUI.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a></p>
<p>-JP</p>
]]></description><link>http://procbits.com/2012/05/24/thinking-asynchronously-in-coffeescriptjavascript-loops-and-callbacks</link><guid isPermaLink="true">http://procbits.com/2012/05/24/thinking-asynchronously-in-coffeescriptjavascript-loops-and-callbacks</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Thu, 24 May 2012 05:00:00 GMT</pubDate></item><item><title><![CDATA[Why Do All the Great Node.js Developers Hate CoffeeScript?]]></title><description><![CDATA[<p>Why do all the great Node.js developers hate CoffeeScript?</p>
<p>Take a look at the following Github repositories of the well-known
Node.js developers:</p>
<ul>
<li><a href="https://github.com/isaacs">Isaac Schleuter</a> (maintainer of Node.js
/ NPM)</li>
<li><a href="https://github.com/visionmedia">TJ Holowaychuk</a> (express, Jade,
Mocha)</li>
<li><a href="https://github.com/mikeal">Mikeal Rogers</a> (Request)</li>
<li><a href="https://github.com/substack">James Haliday &quot;substack&quot;</a> (Browserify,
dnode, Optimist)</li>
<li><a href="https://github.com/guille">Guillermo Rauch</a> (Socket.IO)</li>
<li><a href="https://github.com/aheckmann">Aaron Heckmann</a> (Mongoose)</li>
<li><a href="https://github.com/TooTallNate">Nathan Rajich &quot;Too Tall Nate&quot;</a>
(node-gyp)</li>
<li><a href="https://github.com/marak">Marak Squires</a> (Hook.io, pdf.js,
color.js)</li>
<li><a href="https://github.com/felixge">Felix Geisendörfer </a></li>
<li><a href="https://github.com/creationix">Tim Caswell</a> (NVM)</li>
</ul>
<p>Did you look at them? Not one of them has a project (that isn&#39;t forked)
that is written in CoffeeScript. So does the absence of CoffeeScript on
Github imply these developers hate it? Absolutely not. Listen to episode
<a href="http://nodeup.com/eighteen">18</a> or <a href="http://nodeup.com/nineteen">19</a> of
Nodeup (don&#39;t remember which one) but there are a couple of instances
where they (expert Node.js devs) joke and laugh about writing in
CoffeeScript. If this offensive? Of course not. But the attitude is
curious to me.</p>
<p>One of the aforementioned developers said the following about a
technology:</p>
<blockquote>
<p>What if we could omit braces? How about semi-colons?</p>
</blockquote>
<p>Sounds like the developer is talking about CoffeeScript, doesn&#39;t it? No,
it was TJ Holowaychuk
describing <a href="http://learnboost.github.com/stylus/">Stylus</a>, his CSS
replacement language. Look at Stylus, look how CoffeeScript-esque it is.
This is the the same <a href="https://github.com/visionmedia/jade/issues/430">TJ that doesn&#39;t like
CoffeeScript</a>. This is
meant to be partially tongue &amp; cheek, but it does lend credance to my
point.</p>
<p>Can you guess what the second most <a href="http://search.npmjs.org/">depended-upon package is on
NPM</a>? If you guessed CoffeeScript, you&#39;d be
right!</p>
<p><a href="http://procbits.files.wordpress.com/2012/05/coffeescript-dep2.png"><img src="http://procbits.files.wordpress.com/2012/05/coffeescript-dep2.png?w=300" alt="" title="NPM / CoffeeScript"></a></p>
<p>So if it&#39;s the second most depended-upon package, it must be in use by
us mere-mortal developers. Having defected from Rails, I love
CoffeeScript. But, I ask again, why do the greats have a haughty
attitude towards CoffeeScript? This isn&#39;t meant to be a crusade trying
to get people to convert to the holier-than-though CoffeeScript, but a
genuine lack of understanding of why the disdain exists. Especially
given the acceptance towards Haml, SASS, SCSS, Jade, etc. I mean, when
it comes down to it, write in whatever makes you happy, but I feel like
I&#39;m missing something. If you&#39;re part of the Node.js community, you&#39;ll
know what I&#39;m talking about.</p>
<p>Looking over the <a href="http://coffeescript.org/">CoffeeScrip</a>t page, I think
that you can safely conclude that in general, you&#39;ll write less lines of
code using CoffeeScript. <a href="http://www.codinghorror.com/blog/2007/12/size-is-the-enemy.html">Code is our
enemy</a>
so that&#39;s a good thing.</p>
<p>What do you think about CoffeeScript? Why do you think these developers
don&#39;t like CoffeeScript?</p>
<p>More fun CoffeeScript hatred:</p>
<ul>
<li><a href="http://ryanflorence.com/2011/case-against-coffeescript/">A Case Against Using
CoffeeScript</a></li>
<li><a href="http://net.tutsplus.com/articles/interviews/should-you-learn-coffeescript/">Should You Learn
CoffeeScript?</a></li>
</ul>
<p>If you use Git with others, you should checkout
<a href="http://gitpilot.com">Gitpilot</a> to make collaboration with Git simple.
We would love your advice.</p>
<p>If you made it this far, follow me on Twitter:
<a href="http://twitter.com/jprichardson">@jprichardson</a></p>
<p>-JP</p>
]]></description><link>http://procbits.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript</link><guid isPermaLink="true">http://procbits.com/2012/05/18/why-do-all-the-great-node-js-developers-hate-coffeescript</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Fri, 18 May 2012 05:00:00 GMT</pubDate></item><item><title><![CDATA[Quick and Dirty Screen Scraping with Node.js using Request and Cheerio]]></title><description><![CDATA[<p>I wrote my own screen scraping module built on
<a href="http://www.phantomjs.org/">PhantomJS</a>, but unfortunately it&#39;s too slow
for most screen scraping tasks that don&#39;t require browser-side
JavaScript. One easy way to scrape pages with Node.js is to use
<a href="https://github.com/mikeal/request">Request</a> and
<a href="https://github.com/MatthewMueller/cheerio">Cheerio</a>.</p>
<p>Here is an example of scraping Bing to get all of the search results:</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">cheerio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cheerio&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">searchTerm</span> <span class="o">=</span> <span class="s1">&#39;screen+scraping&#39;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://www.bing.com/search?q=&#39;</span> <span class="o">+</span> <span class="nx">searchTerm</span><span class="p">;</span>

<span class="nx">request</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">body</span><span class="p">){</span>
  <span class="nx">$</span> <span class="o">=</span> <span class="nx">cheerio</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
  <span class="nx">links</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.sb_tlst h3 a&#39;</span><span class="p">);</span> <span class="c1">//use your CSS selector here</span>
  <span class="nx">$</span><span class="p">(</span><span class="nx">links</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">link</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">link</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;:\n  &#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="nx">link</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">));</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre></div>

<p>Cheerio acts a jQuery replacement for a lot of jQuery tasks. It doesn&#39;t
replicate jQuery in every way, and most importantly it&#39;s not meant for
the browser but for the server. But it beats the pants off of the
<a href="https://github.com/tmpvar/jsdom">jsdom</a>/jQuery combo for screen
scraping.</p>
<p>Do you use Git? If so, checkout <a href="http://gitpilot.com">Gitpilot</a> to make
collaborating on software development easy.</p>
<p>You should follow me on Twitter:
<a href="http://twitter.com/jprichardson">@jprichardson</a>.</p>
<p>-JP</p>
]]></description><link>http://procbits.com/2012/04/11/quick-and-dirty-screen-scraping-with-node-js-using-request-and-cheerio</link><guid isPermaLink="true">http://procbits.com/2012/04/11/quick-and-dirty-screen-scraping-with-node-js-using-request-and-cheerio</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Wed, 11 Apr 2012 05:00:00 GMT</pubDate></item><item><title><![CDATA[Submitting/Posting Files and Fields to an HTTP Form using C#/.NET]]></title><description><![CDATA[<p>Awhile back, I had to integrate a C# program with a web system that
allowed the user to upload a few files and include some misc. data. I
Googled around and didn&#39;t find a comprehensive solution.</p>
<p>I did use some code I found on the internet, unfortunately I don&#39;t
remember where, so I can&#39;t give proper attribution. If you know, please
let me know; it&#39;s the code relevant to the <code>MimePart</code> class. I added the
form values code and packaged it up into the <code>HttpForm</code> sugar.</p>
<p>Here is the code:</p>
<div class="highlight"><pre><span class="k">public</span> <span class="k">class</span> <span class="nc">HttpForm</span> <span class="p">{</span>

    <span class="k">private</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">_files</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="k">private</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">_values</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="nf">HttpForm</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">Url</span> <span class="p">=</span> <span class="n">url</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">Method</span> <span class="p">=</span> <span class="s">&quot;POST&quot;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">string</span> <span class="n">Method</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">//return self so that we can chain</span>
    <span class="k">public</span> <span class="n">HttpForm</span> <span class="nf">AttachFile</span><span class="p">(</span><span class="kt">string</span> <span class="n">field</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fileName</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_files</span><span class="p">[</span><span class="n">field</span><span class="p">]</span> <span class="p">=</span> <span class="n">fileName</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">HttpForm</span> <span class="nf">ResetForm</span><span class="p">(){</span>
        <span class="n">_files</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
        <span class="n">_values</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//return self so that we can chain</span>
    <span class="k">public</span> <span class="n">HttpForm</span> <span class="nf">SetValue</span><span class="p">(</span><span class="kt">string</span> <span class="n">field</span><span class="p">,</span> <span class="kt">string</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_values</span><span class="p">[</span><span class="n">field</span><span class="p">]</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">HttpWebResponse</span> <span class="nf">Submit</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">UploadFiles</span><span class="p">(</span><span class="n">_files</span><span class="p">,</span> <span class="n">_values</span><span class="p">);</span>
    <span class="p">}</span>


    <span class="k">private</span> <span class="n">HttpWebResponse</span> <span class="nf">UploadFiles</span><span class="p">(</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">files</span><span class="p">,</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">otherValues</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">var</span> <span class="n">req</span> <span class="p">=</span> <span class="p">(</span><span class="n">HttpWebRequest</span><span class="p">)</span><span class="n">WebRequest</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">Url</span><span class="p">);</span>

        <span class="n">req</span><span class="p">.</span><span class="n">Timeout</span> <span class="p">=</span> <span class="m">10000</span> <span class="p">*</span> <span class="m">1000</span><span class="p">;</span>
        <span class="n">req</span><span class="p">.</span><span class="n">Accept</span> <span class="p">=</span> <span class="s">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span><span class="p">;</span>
        <span class="n">req</span><span class="p">.</span><span class="n">AllowAutoRedirect</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">mimeParts</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MimePart</span><span class="p">&gt;();</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">otherValues</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">fieldName</span> <span class="k">in</span> <span class="n">otherValues</span><span class="p">.</span><span class="n">Keys</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">part</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MimePart</span><span class="p">();</span>

                    <span class="n">part</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="s">&quot;Content-Disposition&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;form-data; name=\&quot;&quot;</span> <span class="p">+</span> <span class="n">fieldName</span> <span class="p">+</span> <span class="s">&quot;\&quot;&quot;</span><span class="p">;</span>
                    <span class="n">part</span><span class="p">.</span><span class="n">Data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">otherValues</span><span class="p">[</span><span class="n">fieldName</span><span class="p">]));</span>

                    <span class="n">mimeParts</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">part</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">files</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">fieldName</span> <span class="k">in</span> <span class="n">files</span><span class="p">.</span><span class="n">Keys</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">part</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MimePart</span><span class="p">();</span>

                    <span class="n">part</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="s">&quot;Content-Disposition&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;form-data; name=\&quot;&quot;</span> <span class="p">+</span> <span class="n">fieldName</span> <span class="p">+</span> <span class="s">&quot;\&quot;; filename=\&quot;&quot;</span> <span class="p">+</span> <span class="n">files</span><span class="p">[</span><span class="n">fieldName</span><span class="p">]</span> <span class="p">+</span> <span class="s">&quot;\&quot;&quot;</span><span class="p">;</span>
                    <span class="n">part</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="s">&quot;Content-Type&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;application/octet-stream&quot;</span><span class="p">;</span>
                    <span class="n">part</span><span class="p">.</span><span class="n">Data</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">OpenRead</span><span class="p">(</span><span class="n">files</span><span class="p">[</span><span class="n">fieldName</span><span class="p">]);</span>

                    <span class="n">mimeParts</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">part</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="kt">string</span> <span class="n">boundary</span> <span class="p">=</span> <span class="s">&quot;----------&quot;</span> <span class="p">+</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">Ticks</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s">&quot;x&quot;</span><span class="p">);</span>

            <span class="n">req</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="s">&quot;multipart/form-data; boundary=&quot;</span> <span class="p">+</span> <span class="n">boundary</span><span class="p">;</span>
            <span class="n">req</span><span class="p">.</span><span class="n">Method</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">Method</span><span class="p">;</span>

            <span class="kt">long</span> <span class="n">contentLength</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

            <span class="kt">byte</span><span class="p">[]</span> <span class="n">_footer</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&quot;--&quot;</span> <span class="p">+</span> <span class="n">boundary</span> <span class="p">+</span> <span class="s">&quot;--\r\n&quot;</span><span class="p">);</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="n">MimePart</span> <span class="n">part</span> <span class="k">in</span> <span class="n">mimeParts</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">contentLength</span> <span class="p">+=</span> <span class="n">part</span><span class="p">.</span><span class="n">GenerateHeaderFooterData</span><span class="p">(</span><span class="n">boundary</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">req</span><span class="p">.</span><span class="n">ContentLength</span> <span class="p">=</span> <span class="n">contentLength</span> <span class="p">+</span> <span class="n">_footer</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>

            <span class="kt">byte</span><span class="p">[]</span> <span class="n">buffer</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="m">8192</span><span class="p">];</span>
            <span class="kt">byte</span><span class="p">[]</span> <span class="n">afterFile</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s">&quot;\r\n&quot;</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">read</span><span class="p">;</span>

            <span class="k">using</span> <span class="p">(</span><span class="n">Stream</span> <span class="n">s</span> <span class="p">=</span> <span class="n">req</span><span class="p">.</span><span class="n">GetRequestStream</span><span class="p">())</span> <span class="p">{</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="n">MimePart</span> <span class="n">part</span> <span class="k">in</span> <span class="n">mimeParts</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">s</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="n">part</span><span class="p">.</span><span class="n">Header</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">part</span><span class="p">.</span><span class="n">Header</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>

                    <span class="k">while</span> <span class="p">((</span><span class="n">read</span> <span class="p">=</span> <span class="n">part</span><span class="p">.</span><span class="n">Data</span><span class="p">.</span><span class="n">Read</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">buffer</span><span class="p">.</span><span class="n">Length</span><span class="p">))</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                        <span class="n">s</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">read</span><span class="p">);</span>

                    <span class="n">part</span><span class="p">.</span><span class="n">Data</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>

                    <span class="n">s</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="n">afterFile</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">afterFile</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="n">s</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="n">_footer</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">_footer</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">res</span> <span class="p">=</span> <span class="p">(</span><span class="n">HttpWebResponse</span><span class="p">)</span><span class="n">req</span><span class="p">.</span><span class="n">GetResponse</span><span class="p">();</span>

            <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">ex</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="n">MimePart</span> <span class="n">part</span> <span class="k">in</span> <span class="n">mimeParts</span><span class="p">)</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">part</span><span class="p">.</span><span class="n">Data</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                    <span class="n">part</span><span class="p">.</span><span class="n">Data</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>

            <span class="k">return</span> <span class="p">(</span><span class="n">HttpWebResponse</span><span class="p">)</span><span class="n">req</span><span class="p">.</span><span class="n">GetResponse</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">class</span> <span class="nc">MimePart</span> <span class="p">{</span>
        <span class="k">private</span> <span class="n">NameValueCollection</span> <span class="n">_headers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NameValueCollection</span><span class="p">();</span>
        <span class="k">public</span> <span class="n">NameValueCollection</span> <span class="n">Headers</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_headers</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">Header</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">long</span> <span class="nf">GenerateHeaderFooterData</span><span class="p">(</span><span class="kt">string</span> <span class="n">boundary</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>

            <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;--&quot;</span><span class="p">);</span>
            <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">boundary</span><span class="p">);</span>
            <span class="n">sb</span><span class="p">.</span><span class="n">AppendLine</span><span class="p">();</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">key</span> <span class="k">in</span> <span class="n">_headers</span><span class="p">.</span><span class="n">AllKeys</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
                <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;: &quot;</span><span class="p">);</span>
                <span class="n">sb</span><span class="p">.</span><span class="n">AppendLine</span><span class="p">(</span><span class="n">_headers</span><span class="p">[</span><span class="n">key</span><span class="p">]);</span>
            <span class="p">}</span>
            <span class="n">sb</span><span class="p">.</span><span class="n">AppendLine</span><span class="p">();</span>

            <span class="n">Header</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">sb</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>

            <span class="k">return</span> <span class="n">Header</span><span class="p">.</span><span class="n">Length</span> <span class="p">+</span> <span class="n">Data</span><span class="p">.</span><span class="n">Length</span> <span class="p">+</span> <span class="m">2</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Stream</span> <span class="n">Data</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

<p>You can easily use it like so:</p>
<div class="highlight"><pre><span class="kt">var</span> <span class="n">file1</span> <span class="p">=</span> <span class="s">@&quot;C:\file&quot;</span><span class="p">;</span>
<span class="kt">var</span> <span class="n">file2</span> <span class="p">=</span> <span class="s">@&quot;C:\file2&quot;</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">yourUrl</span> <span class="p">=</span> <span class="s">&quot;http://yourdomain.com/process.php&quot;</span><span class="p">;</span>
<span class="kt">var</span> <span class="n">httpForm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpForm</span><span class="p">(</span><span class="n">yourUrl</span><span class="p">);</span>
<span class="n">httpForm</span><span class="p">.</span><span class="n">AttachFile</span><span class="p">(</span><span class="s">&quot;file1&quot;</span><span class="p">,</span> <span class="n">file1</span><span class="p">).</span><span class="n">AttachFile</span><span class="p">(</span><span class="s">&quot;file2&quot;</span><span class="p">,</span> <span class="n">file2</span><span class="p">);</span>
<span class="n">httpForm</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="s">&quot;some foo&quot;</span><span class="p">).</span><span class="n">setValue</span><span class="p">(</span><span class="s">&quot;blah&quot;</span><span class="p">,</span> <span class="s">&quot;rarrr!&quot;</span><span class="p">);</span>
<span class="n">httpForm</span><span class="p">.</span><span class="n">Submit</span><span class="p">();</span>
</pre></div>

<p>Do you use Git? If so, checkout <a href="http://gitpilot.com">Gitpilot</a> to make
using Git thoughtless.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a>.</p>
<p>-JP Richardson</p>
]]></description><link>http://procbits.com/2012/02/29/submittingposting-files-and-fields-to-an-http-form-using-c-net</link><guid isPermaLink="true">http://procbits.com/2012/02/29/submittingposting-files-and-fields-to-an-http-form-using-c-net</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Thu, 01 Mar 2012 06:00:00 GMT</pubDate></item><item><title><![CDATA[Installing Node.js on Ubuntu 10.04 LTS]]></title><description><![CDATA[<p>Installing Node.js on Ubuntu 10.04 LTS is pretty straight forward.</p>
<p>You will want a Node.js versioning manager. Node.js has a quick release
cycle, point releases happen quite frequently. A Node.js versioning
manager will help you keep all of your versions isolated from each
other.</p>
<p>As it stands today, there are four Node.js version managers. They are:</p>
<ol>
<li><a href="https://github.com/creationix/nvm">NVM</a> - NVM works like RVM. It
must be sourced in your ~./bashrc or ~./profile file. Some people
don&#39;t like this. It&#39;s my understanding that some find this to be a
bit of hackery.</li>
<li><a href="https://github.com/isaacs/nave">Nave</a> - Nave doesn&#39;t need to be
sourced or loaded up into your bash profile. But, when you use Nave
it executes commands into a
<a href="http://docstore.mik.ua/orelly/unix/upt/ch38_04.htm">subshell</a>. It&#39;s
my understanding that if any process in a subshell modifies the
environment then these changes won&#39;t persist to the parent process.
It&#39;s not entirely clear these changes persist or not. But the
rhetoric from some regarding using subshells for version management
was enough to drive me away.</li>
<li><a href="https://github.com/visionmedia/n">n</a> - I love the simplicity of
&#39;n&#39;. It doesn&#39;t use subshells and it doesn&#39;t require that you modify
your bash profile. I would use &#39;n&#39; if it installed NPM (Node.js
package manager) with each release, and <a href="https://github.com/visionmedia/n/issues/47">it
doesn&#39;t</a>.</li>
<li><a href="https://github.com/ekalinin/nodeenv">nodeenv</a>- I never seriously
considered this one as it requires Python to be installed. I haven&#39;t
read about anyone using this. But I wanted to list it so that you&#39;d
be informed about its existence.</li>
</ol>
<p>Use NVM. Seriously, it just works.</p>
<p>On your clean Ubuntu machine, make sure that Git is installed:</p>
<div class="highlight"><pre>sudo apt-get install git-core
</pre></div>

<p>Then install NVM:</p>
<div class="highlight"><pre>git clone git://github.com/creationix/nvm.git ~/.nvm
. ~/.nvm/nvm.sh <span class="c"># &lt;------ be sure to add this line to the end of your ~./profile or ~./bashrc file</span>
</pre></div>

<p>Now install all of the packages need to build Node.js:</p>
<div class="highlight"><pre>sudo apt-get install build-essential openssl libssl-dev pkg-config
</pre></div>

<p>Now install the latest version of Node.js, at the time of this writing
it&#39;s v0.6.9</p>
<div class="highlight"><pre>nvm install v0.6.9
</pre></div>

<p>You now have a Node.js environment on your machine! Just run <code>node</code> on
the command line to experiment with the Node.js REPL. You can also run
<code>npm</code> to install Node.js packages. Read more about <a href="http://npmjs.org/">NPM
here</a>.</p>
<p>Do you use Git? If so, checkout <a href="http://gitpilot.com">Gitpilot</a> to make
using Git mindless.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a>
and read my blog on entrepreneurship: <a href="http://techneur.com">Techneur</a>.</p>
<p>-JP Richardson</p>
]]></description><link>http://procbits.com/2012/01/29/installing-node-js-on-ubuntu-10-4-lts</link><guid isPermaLink="true">http://procbits.com/2012/01/29/installing-node-js-on-ubuntu-10-4-lts</guid><dc:creator><![CDATA[JP Richardson]]></dc:creator><pubDate>Mon, 30 Jan 2012 06:00:00 GMT</pubDate></item></channel></rss>