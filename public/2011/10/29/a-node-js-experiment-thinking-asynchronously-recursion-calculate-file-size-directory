<!DOCTYPE html>
<title>A Node.js Experiment</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/style.css" rel="stylesheet">
<link href="/assets/css/highlight.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>A Node.js Experiment</h1>

<p>I recently picked up Node.js/CoffeeScript; I figured that since
JavaScript can run on about every modern computing device, it&#39;s about
time that I accept JavaScript instead of side-stepping it by using dying
technologies such as GWT and Silverlight.</p>
<p>I&#39;ve always felt that the best way to learn a new language/platform is
to start by writing a simple program that solves a simple problem.</p>
<p>My problem involved traversing the filesystem and performing some tasks.
For the sake of this blog post and for the sake of your attention span,
the problem can be reduced to a simple algorithm that computes the total
space that a directory and its contents use.</p>
<p>Let&#39;s start by creating a simple synchronous version:</p>
<div class="highlight"><pre><span class="n">fs</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="n">path</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>

<span class="n">du</span> <span class="o">=</span> <span class="p">(</span><span class="n">dir</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">try</span> 
    <span class="n">stat</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="n">lstatSync</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isFile</span><span class="p">()</span>
      <span class="n">total</span> <span class="o">+=</span> <span class="n">stat</span><span class="o">.</span><span class="n">size</span>
    <span class="k">else</span> <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isDirectory</span><span class="p">()</span>
      <span class="n">files</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="n">readdirSync</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>
      <span class="k">for</span> <span class="n">file</span> <span class="k">in</span> <span class="n">files</span>
        <span class="n">total</span> <span class="o">+=</span> <span class="n">du</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">file</span><span class="p">))</span>
  <span class="kp">catch</span> <span class="n">e</span>

  <span class="n">total</span>

<span class="no">DIR</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span>
<span class="n">total_bytes</span> <span class="o">=</span> <span class="n">du</span><span class="p">(</span><span class="no">DIR</span><span class="p">)</span>
<span class="n">total_kb</span> <span class="o">=</span> <span class="n">total_bytes</span> <span class="o">/</span> <span class="mi">1024</span><span class="o">.</span><span class="mi">0</span>
<span class="n">total_mb</span> <span class="o">=</span> <span class="n">total_kb</span> <span class="o">/</span> <span class="mi">1024</span><span class="o">.</span><span class="mi">0</span>

<span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">DIR</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">total_mb</span><span class="o">.</span><span class="n">toFixed</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="s2"> MB&quot;</span><span class="p">)</span>
</pre></div>

<p>This code works fine and as expected. It displays the total size of your
entire directory in MiB. Ya, I know, I wrote &quot;MB&quot;.</p>
<p>But... we are using Node.js here. The asynchronous nature should be
embraced. Let&#39;s rewrite this algorithm in an asynchronous form.</p>
<div class="highlight"><pre><span class="n">fs</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="n">path</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>

<span class="n">duAsync</span> <span class="o">=</span> <span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">cb</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">fs</span><span class="o">.</span><span class="n">lstat</span> <span class="n">dir</span><span class="p">,</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">stat</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="k">if</span> <span class="n">err</span> <span class="k">then</span> <span class="k">return</span>
    <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isFile</span><span class="p">()</span>
      <span class="n">total</span> <span class="o">+=</span> <span class="n">stat</span><span class="o">.</span><span class="n">size</span>
    <span class="k">else</span> <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isDirectory</span><span class="p">()</span>
      <span class="n">fs</span><span class="o">.</span><span class="n">readdir</span> <span class="n">dir</span><span class="p">,</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">files</span><span class="p">)</span> <span class="o">-&gt;</span>
        <span class="k">if</span> <span class="n">err</span> <span class="k">then</span> <span class="k">return</span>
        <span class="k">for</span> <span class="n">file</span> <span class="k">in</span> <span class="n">files</span>
          <span class="n">duAsync</span> <span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">file</span><span class="p">),</span> <span class="n">cb</span>
    <span class="n">cb</span><span class="p">(</span><span class="n">null</span><span class="p">,</span><span class="n">total</span><span class="p">)</span>

<span class="no">DIR</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span>
<span class="n">duAsync</span> <span class="no">DIR</span><span class="p">,</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">total_bytes</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">total_kb</span> <span class="o">=</span> <span class="n">total_bytes</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">.</span><span class="mi">0</span>
  <span class="n">total_mb</span> <span class="o">=</span> <span class="n">total_kb</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">.</span><span class="mi">0</span>

  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">DIR</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">total_mb</span><span class="o">.</span><span class="n">toFixed</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="s2"> MB&quot;</span><span class="p">)</span>
</pre></div>

<p>Hmm, this doesn&#39;t output the correct values. I&#39;m not passing the totals
up the callback chain.</p>
<p>Also, from here on out, I&#39;m only going to show the algorithm.</p>
<p>Let&#39;s take advantage of closures and modify this a bit. If we could
remove the recursion, that may simplify things a bit.</p>
<div class="highlight"><pre><span class="n">duAsync2</span> <span class="o">=</span> <span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">cb</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">files</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="n">all_files</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>

  <span class="k">while</span> <span class="n">all_files</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="n">current_dir</span> <span class="o">=</span> <span class="n">files</span><span class="o">.</span><span class="n">pop</span>
    <span class="n">fs</span><span class="o">.</span><span class="n">lstat</span> <span class="n">current_dir</span><span class="p">,</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span><span class="n">stat</span><span class="p">)</span> <span class="o">-&gt;</span>
      <span class="k">if</span> <span class="n">err</span> <span class="k">then</span> <span class="k">return</span>
      <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isFile</span><span class="p">()</span>
        <span class="n">total</span> <span class="o">+=</span> <span class="n">stat</span><span class="o">.</span><span class="n">size</span>
      <span class="k">else</span> <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isDirectory</span><span class="p">()</span>
        <span class="n">fs</span><span class="o">.</span><span class="n">readdir</span> <span class="n">current_dir</span><span class="p">,</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span><span class="n">files</span><span class="p">)</span> <span class="o">-&gt;</span>
          <span class="k">if</span> <span class="n">err</span> <span class="k">then</span> <span class="k">return</span>
          <span class="k">for</span> <span class="n">file</span> <span class="k">in</span> <span class="n">files</span>
            <span class="n">all_files</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_dir</span><span class="p">,</span> <span class="n">file</span><span class="p">))</span>
      <span class="n">cb</span><span class="p">(</span><span class="n">null</span><span class="p">,</span><span class="n">total</span><span class="p">)</span>
</pre></div>

<p>On the surface, this looks fairly simple. We have removed the recursive
aspect to simplify it a bit. The code in the while block will always see
&#39;total&#39; so we don&#39;t run into the same problem as the last
implementation.</p>
<p>One major problem though, this doesn&#39;t work. This exits almost right
away. Ah yes... we are doing an asynchronous implementation. The
all_files array is empty by the time the while loop goes to the second
iteration.</p>
<p>Maybe recursion is unavoidable? Let&#39;s still leverage closures though.</p>
<p>This version is very similar to the last, I&#39;ve just managed to use
recursion within a function. The &#39;again&#39; function is called recursively.</p>
<div class="highlight"><pre><span class="n">duAsync3</span> <span class="o">=</span> <span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">cb</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="n">again</span> <span class="o">=</span> <span class="p">(</span><span class="n">current_dir</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">fs</span><span class="o">.</span><span class="n">lstat</span> <span class="n">current_dir</span><span class="p">,</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">stat</span><span class="p">)</span> <span class="o">-&gt;</span>
      <span class="k">if</span> <span class="n">err</span> <span class="k">then</span> <span class="k">return</span>
      <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isFile</span><span class="p">()</span>
        <span class="n">total</span> <span class="o">+=</span> <span class="n">stat</span><span class="o">.</span><span class="n">size</span>
      <span class="k">else</span> <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isDirectory</span><span class="p">()</span>
        <span class="n">fs</span><span class="o">.</span><span class="n">readdir</span> <span class="n">current_dir</span><span class="p">,</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span><span class="n">files</span><span class="p">)</span> <span class="o">-&gt;</span>
          <span class="k">if</span> <span class="n">err</span> <span class="k">then</span> <span class="k">return</span>
          <span class="k">for</span> <span class="n">file</span> <span class="k">in</span> <span class="n">files</span>
            <span class="n">again</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_dir</span><span class="p">,</span> <span class="n">file</span><span class="p">))</span>
      <span class="n">cb</span><span class="p">(</span><span class="n">null</span><span class="p">,</span> <span class="n">total</span><span class="p">)</span>

  <span class="n">again</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>
</pre></div>

<p>It works! Consider this: what if you only want the results at the very
end? That is, you only want the callback to occur once, and at the
end... then what do you do?</p>
<p>This was a dilemma that I faced for a bit. For this particular problem,
it might not really matter much. Especially considering that this is a
console utility. However, I considered figuring this out, a right of
passage as a Node.js/JavaScript noob. So I didn&#39;t want to use any
utilities such as <a href="https://github.com/caolan/async">Async.js</a>,
<a href="https://github.com/substack/node-seq">Seq</a>, etc.</p>
<p>I started doing research, fortunately I stumbled upon two great
articles:</p>
<ol>
<li><a href="http://bjouhier.wordpress.com/2011/01/09/asynchronous-javascript-the-tale-of-harry/">&quot;Asynchronous JavaScript: The Tale of
Harry&quot;</a></li>
<li><a href="http://bjouhier.wordpress.com/2011/04/04/currying-the-callback-or-the-essence-of-futures/">Currying the Callback the Essence of
Futures</a></li>
</ol>
<p>The first article seemed to have almost an identical problem. Except,
that the author didn&#39;t impose the additional constraint of only
executing the callback upon the finished. The solution in that article
works as expected, but seems a bit more complex than necessary.</p>
<p>I kept researching. Found an article <a href="http://igstan.ro/posts/2010-12-01-deriving-the-y-combinator-in-7-easy-steps.html">Deriving the Y-Combinator in 7
Easy Steps
(JavaScript)</a>.
My mind was exploding learning some of these functional programming
concepts!</p>
<p>But, I still wasn&#39;t closer to a solution. I finally made my way into
#node.js on freenode (IRC). Fortunately,
<a href="https://github.com/avianflu">AvianFlu</a> was able to lend me a tip. He
suggested the following:</p>
<ul>
<li>Create three variables: started, finished, running</li>
<li>At the beginning of the callback, increment started and running.</li>
<li>At the end, decrement running and increment finished.</li>
<li>When (started === finished) &amp;&amp; (running === 0) You should be done.</li>
</ul>
<p>I experimented with this for awhile. Sometimes, it felt that I was
close. But it never quite worked. Then I thought about it a bit more and
kept the concept of a &#39;running&#39; variable and added a variable to denote
the number of files left to process.</p>
<div class="highlight"><pre><span class="n">duAsync4</span> <span class="o">=</span> <span class="p">(</span><span class="n">dir</span><span class="p">,</span><span class="n">cb</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">file_counter</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1">#starts at one because of the initial directory</span>
  <span class="n">async_running</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="n">again</span> <span class="o">=</span> <span class="p">(</span><span class="n">current_dir</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">fs</span><span class="o">.</span><span class="n">lstat</span> <span class="n">current_dir</span><span class="p">,</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">stat</span><span class="p">)</span> <span class="o">-&gt;</span>
      <span class="k">if</span> <span class="n">err</span> <span class="k">then</span> <span class="n">file_counter</span><span class="o">--</span><span class="p">;</span> <span class="k">return</span>
      <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isFile</span><span class="p">()</span>
        <span class="n">file_counter</span><span class="o">--</span>
        <span class="n">total</span> <span class="o">+=</span> <span class="n">stat</span><span class="o">.</span><span class="n">size</span>
      <span class="k">else</span> <span class="k">if</span> <span class="n">stat</span><span class="o">.</span><span class="n">isDirectory</span><span class="p">()</span>
        <span class="n">file_counter</span><span class="o">--</span>
        <span class="n">async_running</span><span class="o">++</span>
        <span class="n">fs</span><span class="o">.</span><span class="n">readdir</span> <span class="n">current_dir</span><span class="p">,</span> <span class="p">(</span><span class="n">err</span><span class="p">,</span><span class="n">files</span><span class="p">)</span> <span class="o">-&gt;</span>
          <span class="n">async_running</span><span class="o">--</span>
          <span class="k">if</span> <span class="n">err</span> <span class="k">then</span> <span class="k">return</span> <span class="c1">#console.log err.message</span>
          <span class="n">file_counter</span> <span class="o">+=</span> <span class="n">files</span><span class="o">.</span><span class="n">length</span>
          <span class="k">for</span> <span class="n">file</span> <span class="k">in</span> <span class="n">files</span>
            <span class="n">again</span> <span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">current_dir</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
      <span class="k">else</span>
        <span class="n">file_counter</span><span class="o">--</span>
      <span class="k">if</span> <span class="n">file_counter</span> <span class="n">is</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">async_running</span> <span class="n">is</span> <span class="mi">0</span>
        <span class="n">cb</span><span class="p">(</span><span class="n">null</span><span class="p">,</span> <span class="n">total</span><span class="p">)</span>

  <span class="n">again</span> <span class="n">dir</span>
</pre></div>

<p>This works. What&#39;s important to note is that there are many ways to
solve problems using Node.js. On my Quad-Core MBP 8 GB Ram, this is
almost <strong>twice as fast</strong> as the synchronous version!</p>
<p>Try it out and let me know your results. Also, can you think of any
other ways to solve this problem?</p>
<p>Do you use Git? If so, checkout <a href="http://gitpilot.com">Gitpilot</a> to make
using Git thoughtless.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a>
and read my blog on entrepreneurship: <a href="http://techneur.com">Techneur</a>.</p>
<p>-JP Richardson</p>


<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>

<p>
  -JP
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2011/10/29/a-node-js-experiment-thinking-asynchronously-recursion-calculate-file-size-directory/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>