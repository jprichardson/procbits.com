<!DOCTYPE html>
<title>Linear Regression in C#/.NET Using Least Squares</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/style.css" rel="stylesheet">
<link href="/assets/css/highlight.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>Linear Regression in C#/.NET Using Least Squares</h1>

<p>I had a class that handled the regression of my data sets, but it had
too many business rules. It was necessary for me to refactor the code.</p>
<p>Here&#39;s how you can use it:</p>
<div class="highlight"><pre><span class="kt">double</span><span class="p">[]</span> <span class="n">X</span> <span class="p">=</span> <span class="p">{</span> <span class="m">75.0</span><span class="p">,</span> <span class="m">83</span><span class="p">,</span> <span class="m">85</span><span class="p">,</span> <span class="m">85</span><span class="p">,</span> <span class="m">92</span><span class="p">,</span> <span class="m">97</span><span class="p">,</span> <span class="m">99</span> <span class="p">};</span>
<span class="kt">double</span><span class="p">[]</span> <span class="n">Y</span> <span class="p">=</span> <span class="p">{</span> <span class="m">16.0</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">25</span><span class="p">,</span> <span class="m">27</span><span class="p">,</span> <span class="m">32</span><span class="p">,</span> <span class="m">48</span><span class="p">,</span> <span class="m">48</span> <span class="p">};</span>
<span class="kt">var</span> <span class="n">ds</span> <span class="p">=</span> <span class="k">new</span> <span class="n">XYDataSet</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>

<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">Round</span><span class="p">(</span><span class="n">ds</span><span class="p">.</span><span class="n">Slope</span><span class="p">,</span><span class="m">2</span><span class="p">));</span> <span class="c1">//1.45</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">Round</span><span class="p">(</span><span class="n">ds</span><span class="p">.</span><span class="n">YIntercept</span><span class="p">,</span><span class="m">2</span><span class="p">));</span> <span class="c1">//-96.85</span>
<span class="n">ConsoleWriteLine</span><span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">Round</span><span class="p">(</span><span class="n">ds</span><span class="p">.</span><span class="n">ComputeRSquared</span><span class="p">(),</span> <span class="m">3</span><span class="p">));</span> <span class="c1">//0.927</span>
</pre></div>

<p>The source is in my .NET CommonLib library. XYDataSet.cs:
<a href="https://github.com/jprichardson/CommonLib/blob/master/CommonLib/Numerical/XYDataSet.cs"><a href="https://github.com/jprichardson/CommonLib/blob/master/CommonLib/Numerical/XYDataSet.cs">https://github.com/jprichardson/CommonLib/blob/master/CommonLib/Numerical/XYDataSet.cs</a></a>
XYDataSetTest.cs:
<a href="https://github.com/jprichardson/CommonLib/blob/master/TestCommonLib/Numerical/XYDataSetTest.cs"><a href="https://github.com/jprichardson/CommonLib/blob/master/TestCommonLib/Numerical/XYDataSetTest.cs">https://github.com/jprichardson/CommonLib/blob/master/TestCommonLib/Numerical/XYDataSetTest.cs</a></a></p>
<p>Here is the source for XYDataSet.cs:</p>
<div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.ObjectModel</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">CommonLib.Geometry</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">CommonLib.Numerical</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">XYDataSet</span> <span class="p">:</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">PointD</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">PointD</span><span class="p">&gt;</span> <span class="n">_internalList</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">PointD</span><span class="p">&gt;();</span>

        <span class="k">public</span> <span class="nf">XYDataSet</span><span class="p">()</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">XYDataSet</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">PointD</span><span class="p">&gt;</span> <span class="n">points</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ResetValues</span><span class="p">();</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">point</span> <span class="k">in</span> <span class="n">points</span><span class="p">)</span>
                <span class="n">Add</span><span class="p">(</span><span class="n">point</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">XYDataSet</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">Xs</span><span class="p">,</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">Ys</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ResetValues</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">Xs</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">||</span> <span class="n">Ys</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">Xs</span><span class="p">.</span><span class="n">Count</span><span class="p">()</span> <span class="p">!=</span> <span class="n">Ys</span><span class="p">.</span><span class="n">Count</span><span class="p">())</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;X count must be the same as the Y count.&quot;</span><span class="p">);</span>

                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">Xs</span><span class="p">.</span><span class="n">Count</span><span class="p">();</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span>
                    <span class="n">Add</span><span class="p">(</span><span class="n">Xs</span><span class="p">.</span><span class="n">ElementAt</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">Ys</span><span class="p">.</span><span class="n">ElementAt</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">Count</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_internalList</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsReadOnly</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="k">false</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>

        <span class="k">private</span> <span class="kt">double</span> <span class="n">_maxX</span> <span class="p">=</span> <span class="n">Double</span><span class="p">.</span><span class="n">NegativeInfinity</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">XMax</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_internalList</span><span class="p">[</span><span class="n">XMaxIndex</span><span class="p">].</span><span class="n">X</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
        <span class="k">private</span> <span class="kt">double</span> <span class="n">_minX</span> <span class="p">=</span> <span class="n">Double</span><span class="p">.</span><span class="n">PositiveInfinity</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">XMin</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_internalList</span><span class="p">[</span><span class="n">XMinIndex</span><span class="p">].</span><span class="n">X</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">XMaxIndex</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">XMinIndex</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">private</span> <span class="kt">double</span> <span class="n">_maxY</span> <span class="p">=</span> <span class="n">Double</span><span class="p">.</span><span class="n">NegativeInfinity</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">YMax</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_internalList</span><span class="p">[</span><span class="n">YMaxIndex</span><span class="p">].</span><span class="n">Y</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
        <span class="k">private</span> <span class="kt">double</span> <span class="n">_minY</span> <span class="p">=</span> <span class="n">Double</span><span class="p">.</span><span class="n">PositiveInfinity</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">YMin</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_internalList</span><span class="p">[</span><span class="n">YMinIndex</span><span class="p">].</span><span class="n">Y</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">YMaxIndex</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">YMinIndex</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">XMean</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">XSum</span> <span class="p">/</span> <span class="n">Count</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">YMean</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">YSum</span> <span class="p">/</span> <span class="n">Count</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">RSquare</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">PointD</span> <span class="n">RegressionPoint0</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">PointD</span> <span class="n">RegressionPointN</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Slope</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">XSum</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">YSum</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">XSquaredSum</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">XYProductSum</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">XIntercept</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="p">-</span><span class="n">YIntercept</span> <span class="p">/</span> <span class="n">Slope</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">YIntercept</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>


        <span class="k">public</span> <span class="n">PointD</span> <span class="k">this</span><span class="p">[</span><span class="kt">int</span> <span class="n">index</span><span class="p">]</span> <span class="p">{</span>
            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_internalList</span><span class="p">[</span><span class="n">index</span><span class="p">];</span> <span class="p">}</span>
            <span class="k">set</span> <span class="p">{</span>
                <span class="kt">var</span> <span class="n">p</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">old</span> <span class="p">=</span> <span class="n">_internalList</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
                <span class="n">_internalList</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="n">p</span><span class="p">;</span>

                <span class="n">ComputeSums</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">SumMode</span><span class="p">.</span><span class="n">Subtract</span><span class="p">);</span>
                <span class="n">ComputeSums</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">SumMode</span><span class="p">.</span><span class="n">Add</span><span class="p">);</span>
                <span class="n">ComputeMinAndMax</span><span class="p">();</span>
                <span class="n">ComputeSlopeAndYIntercept</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">PointD</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="n">PointD</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">_internalList</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
            <span class="n">RSquare</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">NaN</span><span class="p">;</span>

            <span class="n">ComputeSums</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">SumMode</span><span class="p">.</span><span class="n">Add</span><span class="p">);</span>
            <span class="n">ComputeMinAndMax</span><span class="p">(</span><span class="n">Count</span> <span class="p">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
            <span class="n">ComputeSlopeAndYIntercept</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Clear</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">_internalList</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
            <span class="n">ResetValues</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">ComputeSlopeAndYIntercept</span><span class="p">()</span> <span class="p">{</span>
            <span class="kt">double</span> <span class="n">delta</span> <span class="p">=</span> <span class="n">Count</span> <span class="p">*</span> <span class="n">XSquaredSum</span> <span class="p">-</span> <span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">XSum</span><span class="p">,</span> <span class="m">2.0</span><span class="p">);</span>
            <span class="n">YIntercept</span> <span class="p">=</span> <span class="p">(</span><span class="m">1.0</span> <span class="p">/</span> <span class="n">delta</span><span class="p">)</span> <span class="p">*</span> <span class="p">(</span><span class="n">XSquaredSum</span> <span class="p">*</span> <span class="n">YSum</span> <span class="p">-</span> <span class="n">XSum</span> <span class="p">*</span> <span class="n">XYProductSum</span><span class="p">);</span>
            <span class="n">Slope</span> <span class="p">=</span> <span class="p">(</span><span class="m">1.0</span> <span class="p">/</span> <span class="n">delta</span><span class="p">)</span> <span class="p">*</span> <span class="p">(</span><span class="n">Count</span> <span class="p">*</span> <span class="n">XYProductSum</span> <span class="p">-</span> <span class="n">XSum</span> <span class="p">*</span> <span class="n">YSum</span><span class="p">);</span>

            <span class="n">RegressionPoint0</span><span class="p">.</span><span class="n">X</span> <span class="p">=</span> <span class="n">XMin</span><span class="p">;</span>
            <span class="n">RegressionPoint0</span><span class="p">.</span><span class="n">Y</span> <span class="p">=</span> <span class="n">Slope</span> <span class="p">*</span> <span class="n">XMin</span> <span class="p">+</span> <span class="n">YIntercept</span><span class="p">;</span>
            <span class="n">RegressionPointN</span><span class="p">.</span><span class="n">X</span> <span class="p">=</span> <span class="n">XMax</span><span class="p">;</span>
            <span class="n">RegressionPointN</span><span class="p">.</span><span class="n">Y</span> <span class="p">=</span> <span class="n">Slope</span> <span class="p">*</span> <span class="n">XMax</span> <span class="p">+</span> <span class="n">YIntercept</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="nf">ComputeRSquared</span><span class="p">()</span> <span class="p">{</span>
            <span class="kt">var</span> <span class="n">SStot</span> <span class="p">=</span> <span class="n">_internalList</span><span class="p">.</span><span class="n">Sum</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">Y</span> <span class="p">-</span> <span class="n">YMean</span><span class="p">,</span> <span class="m">2.0</span><span class="p">));</span>
            <span class="kt">var</span> <span class="n">SSerr</span> <span class="p">=</span> <span class="n">_internalList</span><span class="p">.</span><span class="n">Sum</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">Y</span> <span class="p">-</span> <span class="p">(</span><span class="n">Slope</span> <span class="p">*</span> <span class="n">p</span><span class="p">.</span><span class="n">X</span> <span class="p">+</span> <span class="n">YIntercept</span><span class="p">),</span> <span class="m">2.0</span><span class="p">));</span>
            <span class="n">RSquare</span> <span class="p">=</span> <span class="m">1.0</span> <span class="p">-</span> <span class="n">SSerr</span> <span class="p">/</span> <span class="n">SStot</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">RSquare</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Contains</span><span class="p">(</span><span class="n">PointD</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">_internalList</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">CopyTo</span><span class="p">(</span><span class="n">PointD</span><span class="p">[]</span> <span class="n">points</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">_internalList</span><span class="p">.</span><span class="n">CopyTo</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">index</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IEnumerator</span><span class="p">&lt;</span><span class="n">PointD</span><span class="p">&gt;</span> <span class="n">GetEnumerator</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">_internalList</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="n">IEnumerator</span> <span class="n">IEnumerable</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">_internalList</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="nf">IndexOf</span><span class="p">(</span><span class="n">PointD</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">_internalList</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="n">PointD</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">_internalList</span><span class="p">.</span><span class="n">Insert</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
            <span class="n">RSquare</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">NaN</span><span class="p">;</span>

            <span class="n">ComputeSums</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">SumMode</span><span class="p">.</span><span class="n">Add</span><span class="p">);</span>
            <span class="n">ComputeMinAndMax</span><span class="p">();</span>
            <span class="n">ComputeSlopeAndYIntercept</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Remove</span><span class="p">(</span><span class="n">PointD</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">var</span> <span class="n">success</span> <span class="p">=</span> <span class="n">_internalList</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">RSquare</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">NaN</span><span class="p">;</span>
                <span class="n">ComputeSums</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">SumMode</span><span class="p">.</span><span class="n">Subtract</span><span class="p">);</span>
                <span class="n">ComputeMinAndMax</span><span class="p">();</span>
                <span class="n">ComputeSlopeAndYIntercept</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">success</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">RemoveAt</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">var</span> <span class="n">old</span> <span class="p">=</span> <span class="n">_internalList</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
            <span class="n">_internalList</span><span class="p">.</span><span class="n">RemoveAt</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
            <span class="n">RSquare</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">NaN</span><span class="p">;</span>

            <span class="n">ComputeSums</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">SumMode</span><span class="p">.</span><span class="n">Subtract</span><span class="p">);</span>
            <span class="n">ComputeMinAndMax</span><span class="p">();</span>
            <span class="n">ComputeSlopeAndYIntercept</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">void</span> <span class="nf">ComputeMinAndMax</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//methods that call this, Insert, </span>
            <span class="n">ResetMinAndMax</span><span class="p">();</span>

            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">_internalList</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span>
                <span class="n">ComputeMinAndMax</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">_internalList</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">void</span> <span class="nf">ComputeMinAndMax</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="n">PointD</span> <span class="n">newPoint</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">newPoint</span><span class="p">.</span><span class="n">X</span> <span class="p">&lt;=</span> <span class="n">_minX</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">_minX</span> <span class="p">=</span> <span class="n">newPoint</span><span class="p">.</span><span class="n">X</span><span class="p">;</span>
                <span class="n">XMinIndex</span> <span class="p">=</span> <span class="n">index</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">newPoint</span><span class="p">.</span><span class="n">X</span> <span class="p">&gt;=</span> <span class="n">_maxX</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">_maxX</span> <span class="p">=</span> <span class="n">newPoint</span><span class="p">.</span><span class="n">X</span><span class="p">;</span>
                <span class="n">XMaxIndex</span> <span class="p">=</span> <span class="n">index</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">newPoint</span><span class="p">.</span><span class="n">Y</span> <span class="p">&lt;=</span> <span class="n">_minY</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">_minY</span> <span class="p">=</span> <span class="n">newPoint</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span>
                <span class="n">YMinIndex</span> <span class="p">=</span> <span class="n">index</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">newPoint</span><span class="p">.</span><span class="n">Y</span> <span class="p">&gt;=</span> <span class="n">_maxY</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">_maxY</span> <span class="p">=</span> <span class="n">newPoint</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span>
                <span class="n">YMaxIndex</span> <span class="p">=</span> <span class="n">index</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">enum</span> <span class="n">SumMode</span> <span class="p">{</span> <span class="n">Add</span><span class="p">,</span> <span class="n">Subtract</span> <span class="p">};</span>
        <span class="k">protected</span> <span class="k">void</span> <span class="nf">ComputeSums</span><span class="p">(</span><span class="n">PointD</span> <span class="n">p</span><span class="p">,</span> <span class="n">SumMode</span> <span class="n">mode</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">mode</span> <span class="p">==</span> <span class="n">SumMode</span><span class="p">.</span><span class="n">Add</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">XSum</span> <span class="p">+=</span> <span class="n">p</span><span class="p">.</span><span class="n">X</span><span class="p">;</span>
                <span class="n">YSum</span> <span class="p">+=</span> <span class="n">p</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span>
                <span class="n">XSquaredSum</span> <span class="p">+=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="m">2.0</span><span class="p">);</span>
                <span class="n">XYProductSum</span> <span class="p">+=</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">X</span> <span class="p">*</span> <span class="n">p</span><span class="p">.</span><span class="n">Y</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">mode</span> <span class="p">==</span> <span class="n">SumMode</span><span class="p">.</span><span class="n">Subtract</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">XSum</span> <span class="p">-=</span> <span class="n">p</span><span class="p">.</span><span class="n">X</span><span class="p">;</span>
                <span class="n">YSum</span> <span class="p">-=</span> <span class="n">p</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span>
                <span class="n">XSquaredSum</span> <span class="p">-=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="m">2.0</span><span class="p">);</span>
                <span class="n">XYProductSum</span> <span class="p">-=</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">X</span> <span class="p">*</span> <span class="n">p</span><span class="p">.</span><span class="n">Y</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">void</span> <span class="nf">ResetMinAndMax</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">_maxX</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">NegativeInfinity</span><span class="p">;</span>
            <span class="n">_maxY</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">NegativeInfinity</span><span class="p">;</span>
            <span class="n">_minX</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">PositiveInfinity</span><span class="p">;</span>
            <span class="n">_minY</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">PositiveInfinity</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">void</span> <span class="nf">ResetValues</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">ResetMinAndMax</span><span class="p">();</span>

            <span class="n">RegressionPoint0</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PointD</span><span class="p">();</span>
            <span class="n">RegressionPointN</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PointD</span><span class="p">();</span>

            <span class="n">RSquare</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">NaN</span><span class="p">;</span>

            <span class="n">Slope</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">NaN</span><span class="p">;</span>
            <span class="n">YIntercept</span> <span class="p">=</span> <span class="kt">double</span><span class="p">.</span><span class="n">NaN</span><span class="p">;</span>

            <span class="n">XSum</span> <span class="p">=</span> <span class="m">0.0</span><span class="p">;</span>
            <span class="n">YSum</span> <span class="p">=</span> <span class="m">0.0</span><span class="p">;</span>
            <span class="n">XSquaredSum</span> <span class="p">=</span> <span class="m">0.0</span><span class="p">;</span>
            <span class="n">XYProductSum</span> <span class="p">=</span> <span class="m">0.0</span><span class="p">;</span>

            <span class="n">XMaxIndex</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
            <span class="n">YMaxIndex</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
            <span class="n">XMinIndex</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
            <span class="n">YMinIndex</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

<p>Are you a <a href="http://gitpilot.com">Git</a> user? Let me help you make project
management with Git simple. Checkout <a href="http://gitpilot.com">Gitpilot</a>.</p>
<p>Follow me on Twitter: <a href="http://twitter.com/jprichardson">@jprichardson</a>
and read my blog on software entrepreneurship:
<a href="http://techneur.com">Techneur</a></p>
<p>-JP</p>


<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>

<p>
  -JP
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2011/05/02/linear-regression-in-c-sharp-least-squares/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>