<!DOCTYPE html>
<title>Using OCMock with Mac OS X Lion, Xcode 4, to Mock and Unit Test Cocoa Desktop Apps</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="JP Richardson">
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap.min.css" rel="stylesheet" media="screen">
<link href="/assets/css/highlight.css" rel="stylesheet">
<link href="/assets/css/style.css" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/js/bootstrap.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc2/css/bootstrap-glyphicons.css" rel="stylesheet">
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  
  
  
</script>
<div id="wrap">
  <div class="navbar navbar-default">
    <div class="container">
      <div class="navbar-header">
        <button data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://procbits.com" class="navbar-brand">procbits</a>
      </div>
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav pull-right"> 
          <li><a href="/pages/about">About            </a></li>
          <li><a href="/tags">Tags</a></li>
          <li><a href="/rss.xml">RSS</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container"> <h1>Using OCMock with Mac OS X Lion, Xcode 4, to Mock and Unit Test Cocoa Desktop Apps</h1>

<p>If you&#39;re trying to learn how to use <a href="http://ocmock.org/">OCMock</a>,
you&#39;ll encounter a number of articles dedicated to using it with iOS.
You won&#39;t find very many related to writing tests, mocks, and stubs for
your Cocoa desktop applications for OS X Lion. If you&#39;re writing your
apps to exclusively target OS X Lion (10.7), then this article will be
of use to you. I&#39;m not sure if this technique will work for Snow Leopard
apps or not. But, since OS X Lion 10.7 is a 64 bit OS the distributable
library in the <a href="http://ocmock.org/downloads/ocmock-1.77.dmg">downloadable package
(1.77)</a> will not work.
Hence, the reason for writing this article.</p>
<p>Here are the steps that you need to follow, you will create a brand new
demo application that will demo using OCMock. You should be able to
apply part of these instructions to your own project.</p>
<p>I should preface these instructions by stating that I am not an Xcode or
Objective C expert. Also, I&#39;m using Xcode version 4.1 despite version
4.2 being available. I just haven&#39;t upgraded yet.</p>
<h3 id="building-64-bit-ocmock-library">Building 64-bit OCMock Library</h3>
<p>This is the first necessary task. As stated earlier, the libOCMock.a
file found in the downloadable package is 32 bit only.</p>
<ol>
<li>Download the <a href="http://ocmock.org/downloads/ocmock-1.77.dmg">latest OCMock
package</a>. At the time
of this writing, it&#39;s version 1.77. It&#39;s conceivable that later
versions will include the 64 bit version and you&#39;ll be able to skip
these steps entirely.</li>
<li>Mount the package and extract the Source and Release directories.</li>
<li>Navigate to Source/ocmock-1.77 and open up OCMock.xcodeproj</li>
<li>When Xcode opens up, click the root node &quot;5 targets, multiple
platforms&quot; of the project navigator. The project&#39;s build settings
will show up. Observe that there are 5 targets: OCMock, OCMockTests,
OCMockPhoneSim, OCMockPhoneDevice, OCMockLib</li>
<li>Notice how there are 4 projects schemes: OCMockPhoneSim,
OCMockPhoneDevice, OCMock, and OCMockLib</li>
<li>Notice how there are four products: OCMock.framework,
OCMockTests.octest, libOCMock.a, and libOCMock.a</li>
<li>Recall, that we are most interested in a 64 bit libOCMock.a</li>
<li>Delete the target OCMockPhoneSim. Select it. Right click and hit
&#39;Delete&#39; You should notice that one of the libOCMock.a products
disappears, leaving us with one left.</li>
<li>You should still be in the OCMockPhoneSim target with &quot;My Mac
64-bit&quot; Select the target OCMockPhoneDevice. Change the Base SDK to
Mac OS X 10.7 on every dropdown that you can.</li>
<li>Change Architecture to 64-bit on every drop down that you can.</li>
<li>Remove i386 from Valid Architecture.</li>
<li>Change scheme to &quot;OCMockLib - My Mac 64-bit&quot;</li>
<li>Click &#39;OCMockLib&#39; target. Click &#39;Build Phases&quot; and then expand the
&#39;Run Script&#39;, remove the following text:</li>
</ol>
<div class="highlight"><pre>    <span class="c"># combine lib files for device and simulator platforms into one</span>

    lipo -create <span class="s2">&quot;${BUILD_DIR}/${BUILD_STYLE}-iphoneos/libOCMock.a&quot;</span> <span class="s2">&quot;${BUILD_DIR}/${BUILD_STYLE}-iphonesimulator/libOCMock.a&quot;</span> -output <span class="s2">&quot;${TARGET_BUILD_DIR}/Library/libOCMock.a&quot;</span>

    &amp;nbsp;

    <span class="c"># copy the headers (we could have used a copy files build phase, too)</span>

    cp -R <span class="s2">&quot;${BUILD_DIR}/${BUILD_STYLE}-iphoneos/Headers&quot;</span> <span class="s2">&quot;${TARGET_BUILD_DIR}/Library&quot;</span>
</pre></div>

<ol>
<li>Click &#39;Build&#39; from the &#39;Product&#39; menu. 64 bit libOCMock.a should be
built now. Right click libOCMock.a in the project navigator under
the &#39;Products&#39; group. Click &#39;Show in Finder&#39;. Copy libOCMock.a and
the directory OCMock founder in the Headers directory that is
located in the same directory as libOCMock.a. Copy these two items
to a location that you can find them later.</li>
</ol>
<h3 id="adding-ocmock-to-the-demo-project">Adding OCMock to the Demo Project</h3>
<p>Now we&#39;ll add the library and header to a demo project.</p>
<ol>
<li>Open Xcode. Click File...New Project. Select Cocoa Application.</li>
<li>Name it whatever you want. Make sure that you click &quot;Include Unit
Tests&quot;</li>
<li>Verify that the default test is working... click Product...Test You
should get a test error in the testing file. If so, works as
expected.</li>
<li>Navigate to your project directory. Create a directory in it called
&#39;TestLibraries&#39;</li>
<li>Copy libOCMock.a and the folder &#39;OCMock&#39; containing the header files
into the &#39;TestLibraries&#39; directory.</li>
<li>You&#39;ll have a group (folder) that is named like so:
(YOUR_PROJECT_NAME)Tests. We&#39;ll refer to this as the testing
group. Right click it and click &#39;Add Files to..&#39;</li>
<li>Select the folder in your project directory that you created:
&#39;TestLibraries&#39; Make sure that &quot;Copy items into designations group&#39;s
folder&quot; is NOT checked since these files already exist at the
project root. Select &#39;Create groups for any added folders&#39;. Uncheck
your project target and make sure that your testing target is
checked.</li>
<li>Go to the Test target build settings. Make sure that: &quot;Library
Search Paths&quot; has &quot;TestLibraries&quot; in it. If not, you&#39;ll need to add
the following string WITH THE QUOTES: &quot;\${SRCROOT}/TestLibraries&quot;</li>
<li>In the Test target build settings, make sure that &quot;Header Search
Paths&quot; has &quot;TestLibraries&quot; with recursive selected. If not, add the
following string WITH THE QUOTES:  &quot;\${SRCROOT}/TestLibraries&quot;
Select the &#39;recursive&#39; option.</li>
<li>In the Test target build settings, locate &#39;Other Linker Flags&#39;, add:
-ObjC -all_load</li>
<li>In your implementation test file, locate the textExample method. Put
this snippet in its place:</li>
</ol>
<div class="highlight"><pre>    <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">OCMock</span><span class="o">/</span><span class="n">OCMock</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span> <span class="c1">//put this at the top</span>
    <span class="kt">id</span> <span class="n">mockString</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMockObject</span> <span class="nl">mockForClass:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">]];</span>

    <span class="p">[[[</span><span class="n">mockString</span> <span class="n">stub</span><span class="p">]</span> <span class="nl">andReturn:</span><span class="s">@&quot;MOCKS UP IN&quot;</span><span class="p">]</span> <span class="n">lowercaseString</span><span class="p">];</span>

    <span class="n">STAssertEqualObjects</span><span class="p">([</span><span class="n">mockString</span> <span class="n">lowercaseString</span><span class="p">],</span> <span class="s">@&quot;MOCKS UP IN&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</pre></div>

<ol>
<li>Click &quot;Product&quot; menu and &quot;Build For Testing&quot;</li>
<li>Then click &quot;Product&quot; and &quot;Test&quot; All should pass.</li>
</ol>
<p>If you get the following error: &#39;unrecognized selector sent to instance&#39;
then you didn&#39;t at the &#39;Other Linker Flags&#39;</p>
<p>Hope this helps. References:</p>
<ul>
<li><a href="http://everburning.com/news/poking-objective-c-with-a-testing-stick/">Poking Objective-C with a Testing
Stick</a></li>
<li><a href="http://iamthewalr.us/blog/2008/11/ocmock-and-the-iphone/">OCMock and the
iPhone</a></li>
<li><a href="http://alexvollmer.com/posts/2010/06/28/making-fun-of-things-with-ocmock/">Making Fun of Things with
OCMock</a></li>
<li><a href="http://www.raywenderlich.com/3716/unit-testing-in-xcode-4-quick-start-guide">Unit Testing in Xcode 4 Quick Start
Guide</a></li>
<li><a href="http://erik.doernenburg.com/2008/07/testing-cocoa-controllers-with-ocmock/">Testing Cocoa Controllers with
OCMock</a></li>
<li><a href="http://www.sunetos.com/items/2011/01/21/creating-an-xcode-project-template-with-ghunit-and-ocmock/">Creating an Xcode Project Template with GHUnit and
OCMock</a></li>
<li><a href="http://jtigger-learning.wikidot.com/getting-ocmock-to-work-with-an-iphone-project">Getting OCMock to Work with an iPhone
Project</a></li>
</ul>


<!--<p>
  If you made it this far, you should follow me on Twitter. &nbsp; <a style="margin-top: -3px" href="https://twitter.com/jprichardson" class="twitter-follow-button" data-show-count="false">Follow @jprichardson</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</p>-->

<p>
If you made it this far, you should <a href="http://twitter.com/jprichardson">follow me on Twitter</a>.
</p>

<p>
  -JP
</p>

 <div id="disqus_thread"></div>
<script type="text/javascript">
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'procbits'; // required: replace example with your forum shortname

  //optional url
  
    var disqus_url = 'http://procbits.com/2011/11/29/using-ocmock-with-mac-os-x-lion-xcode-4-to-mock-and-unit-test-cocoa-desktop-apps/';
  

  //optional id
  

  /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
  </div>
</div>
<div id="footer">
  <div class="container">
    <p class="text-muted credit">Proudly built with<a href="https://github.com/skywrite"> Sky</a></p>
  </div>
</div>
<div class="scripts">  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35069840-2']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</div>